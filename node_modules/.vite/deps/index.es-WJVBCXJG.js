import {
  esm_default
} from "./chunk-QLI267SS.js";
import {
  recoverAddress
} from "./chunk-6IFLKUAX.js";
import "./chunk-IRGXVKYF.js";
import "./chunk-3N7J24IE.js";
import "./chunk-JTBZ7SRD.js";
import "./chunk-DF2FOQV5.js";
import {
  A,
  E,
  IEvents,
  esm_exports,
  f,
  formatJsonRpcError,
  formatJsonRpcRequest,
  formatJsonRpcResult,
  getBigIntRpcId,
  h,
  i,
  import_pino,
  isJsonRpcError,
  isJsonRpcRequest,
  isJsonRpcResponse,
  isJsonRpcResult,
  isLocalhostUrl,
  isWsUrl,
  k,
  o,
  parseConnectionError,
  payloadId,
  r,
  safeJsonParse,
  safeJsonStringify,
  y
} from "./chunk-Q5AEF23C.js";
import {
  require_events
} from "./chunk-2YULO2GZ.js";
import {
  concat,
  detect,
  fromString,
  require_cjs,
  require_cjs2,
  require_cjs3,
  toString
} from "./chunk-7KOOD3VM.js";
import {
  __commonJS,
  __toESM
} from "./chunk-MMN2DTB3.js";

// node_modules/@wagmi/connectors/node_modules/ws/browser.js
var require_browser = __commonJS({
  "node_modules/@wagmi/connectors/node_modules/ws/browser.js"(exports, module) {
    "use strict";
    module.exports = function() {
      throw new Error(
        "ws does not work in the browser. Browser clients must use the native WebSocket object"
      );
    };
  }
});

// node_modules/@wagmi/connectors/node_modules/@walletconnect/ethereum-provider/dist/index.es.js
var import_events7 = __toESM(require_events());

// node_modules/@wagmi/connectors/node_modules/@walletconnect/utils/dist/index.es.js
var import_time2 = __toESM(require_cjs());
var import_window_getters = __toESM(require_cjs2());
var import_window_metadata = __toESM(require_cjs3());

// node_modules/@wagmi/connectors/node_modules/@walletconnect/relay-auth/dist/index.es.js
var import_time = __toESM(require_cjs());
function En(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function fe(t, ...e) {
  if (!En(t)) throw new Error("Uint8Array expected");
  if (e.length > 0 && !e.includes(t.length)) throw new Error("Uint8Array expected of length " + e + ", got length=" + t.length);
}
function De(t, e = true) {
  if (t.destroyed) throw new Error("Hash instance has been destroyed");
  if (e && t.finished) throw new Error("Hash#digest() has already been called");
}
function gn(t, e) {
  fe(t);
  const n2 = e.outputLen;
  if (t.length < n2) throw new Error("digestInto() expects output buffer of length at least " + n2);
}
var it = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
var _t = (t) => new DataView(t.buffer, t.byteOffset, t.byteLength);
function yn(t) {
  if (typeof t != "string") throw new Error("utf8ToBytes expected string, got " + typeof t);
  return new Uint8Array(new TextEncoder().encode(t));
}
function de(t) {
  return typeof t == "string" && (t = yn(t)), fe(t), t;
}
var xn = class {
  clone() {
    return this._cloneInto();
  }
};
function Bn(t) {
  const e = (r2) => t().update(de(r2)).digest(), n2 = t();
  return e.outputLen = n2.outputLen, e.blockLen = n2.blockLen, e.create = () => t(), e;
}
function he(t = 32) {
  if (it && typeof it.getRandomValues == "function") return it.getRandomValues(new Uint8Array(t));
  if (it && typeof it.randomBytes == "function") return it.randomBytes(t);
  throw new Error("crypto.getRandomValues must be defined");
}
function Cn(t, e, n2, r2) {
  if (typeof t.setBigUint64 == "function") return t.setBigUint64(e, n2, r2);
  const o2 = BigInt(32), s = BigInt(4294967295), a2 = Number(n2 >> o2 & s), u3 = Number(n2 & s), i3 = r2 ? 4 : 0, D3 = r2 ? 0 : 4;
  t.setUint32(e + i3, a2, r2), t.setUint32(e + D3, u3, r2);
}
var An = class extends xn {
  constructor(e, n2, r2, o2) {
    super(), this.blockLen = e, this.outputLen = n2, this.padOffset = r2, this.isLE = o2, this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.buffer = new Uint8Array(e), this.view = _t(this.buffer);
  }
  update(e) {
    De(this);
    const { view: n2, buffer: r2, blockLen: o2 } = this;
    e = de(e);
    const s = e.length;
    for (let a2 = 0; a2 < s; ) {
      const u3 = Math.min(o2 - this.pos, s - a2);
      if (u3 === o2) {
        const i3 = _t(e);
        for (; o2 <= s - a2; a2 += o2) this.process(i3, a2);
        continue;
      }
      r2.set(e.subarray(a2, a2 + u3), this.pos), this.pos += u3, a2 += u3, this.pos === o2 && (this.process(n2, 0), this.pos = 0);
    }
    return this.length += e.length, this.roundClean(), this;
  }
  digestInto(e) {
    De(this), gn(e, this), this.finished = true;
    const { buffer: n2, view: r2, blockLen: o2, isLE: s } = this;
    let { pos: a2 } = this;
    n2[a2++] = 128, this.buffer.subarray(a2).fill(0), this.padOffset > o2 - a2 && (this.process(r2, 0), a2 = 0);
    for (let l4 = a2; l4 < o2; l4++) n2[l4] = 0;
    Cn(r2, o2 - 8, BigInt(this.length * 8), s), this.process(r2, 0);
    const u3 = _t(e), i3 = this.outputLen;
    if (i3 % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
    const D3 = i3 / 4, c3 = this.get();
    if (D3 > c3.length) throw new Error("_sha2: outputLen bigger than state");
    for (let l4 = 0; l4 < D3; l4++) u3.setUint32(4 * l4, c3[l4], s);
  }
  digest() {
    const { buffer: e, outputLen: n2 } = this;
    this.digestInto(e);
    const r2 = e.slice(0, n2);
    return this.destroy(), r2;
  }
  _cloneInto(e) {
    e || (e = new this.constructor()), e.set(...this.get());
    const { blockLen: n2, buffer: r2, length: o2, finished: s, destroyed: a2, pos: u3 } = this;
    return e.length = o2, e.pos = u3, e.finished = s, e.destroyed = a2, o2 % n2 && e.buffer.set(r2), e;
  }
};
var wt = BigInt(2 ** 32 - 1);
var St = BigInt(32);
function le(t, e = false) {
  return e ? { h: Number(t & wt), l: Number(t >> St & wt) } : { h: Number(t >> St & wt) | 0, l: Number(t & wt) | 0 };
}
function mn(t, e = false) {
  let n2 = new Uint32Array(t.length), r2 = new Uint32Array(t.length);
  for (let o2 = 0; o2 < t.length; o2++) {
    const { h: s, l: a2 } = le(t[o2], e);
    [n2[o2], r2[o2]] = [s, a2];
  }
  return [n2, r2];
}
var _n = (t, e) => BigInt(t >>> 0) << St | BigInt(e >>> 0);
var Sn = (t, e, n2) => t >>> n2;
var vn = (t, e, n2) => t << 32 - n2 | e >>> n2;
var In = (t, e, n2) => t >>> n2 | e << 32 - n2;
var Un = (t, e, n2) => t << 32 - n2 | e >>> n2;
var Tn = (t, e, n2) => t << 64 - n2 | e >>> n2 - 32;
var Fn = (t, e, n2) => t >>> n2 - 32 | e << 64 - n2;
var Nn = (t, e) => e;
var Ln = (t, e) => t;
var On = (t, e, n2) => t << n2 | e >>> 32 - n2;
var Hn = (t, e, n2) => e << n2 | t >>> 32 - n2;
var zn = (t, e, n2) => e << n2 - 32 | t >>> 64 - n2;
var Mn = (t, e, n2) => t << n2 - 32 | e >>> 64 - n2;
function qn(t, e, n2, r2) {
  const o2 = (e >>> 0) + (r2 >>> 0);
  return { h: t + n2 + (o2 / 2 ** 32 | 0) | 0, l: o2 | 0 };
}
var $n = (t, e, n2) => (t >>> 0) + (e >>> 0) + (n2 >>> 0);
var kn = (t, e, n2, r2) => e + n2 + r2 + (t / 2 ** 32 | 0) | 0;
var Rn = (t, e, n2, r2) => (t >>> 0) + (e >>> 0) + (n2 >>> 0) + (r2 >>> 0);
var jn = (t, e, n2, r2, o2) => e + n2 + r2 + o2 + (t / 2 ** 32 | 0) | 0;
var Zn = (t, e, n2, r2, o2) => (t >>> 0) + (e >>> 0) + (n2 >>> 0) + (r2 >>> 0) + (o2 >>> 0);
var Gn = (t, e, n2, r2, o2, s) => e + n2 + r2 + o2 + s + (t / 2 ** 32 | 0) | 0;
var x = { fromBig: le, split: mn, toBig: _n, shrSH: Sn, shrSL: vn, rotrSH: In, rotrSL: Un, rotrBH: Tn, rotrBL: Fn, rotr32H: Nn, rotr32L: Ln, rotlSH: On, rotlSL: Hn, rotlBH: zn, rotlBL: Mn, add: qn, add3L: $n, add3H: kn, add4L: Rn, add4H: jn, add5H: Gn, add5L: Zn };
var [Vn, Yn] = (() => x.split(["0x428a2f98d728ae22", "0x7137449123ef65cd", "0xb5c0fbcfec4d3b2f", "0xe9b5dba58189dbbc", "0x3956c25bf348b538", "0x59f111f1b605d019", "0x923f82a4af194f9b", "0xab1c5ed5da6d8118", "0xd807aa98a3030242", "0x12835b0145706fbe", "0x243185be4ee4b28c", "0x550c7dc3d5ffb4e2", "0x72be5d74f27b896f", "0x80deb1fe3b1696b1", "0x9bdc06a725c71235", "0xc19bf174cf692694", "0xe49b69c19ef14ad2", "0xefbe4786384f25e3", "0x0fc19dc68b8cd5b5", "0x240ca1cc77ac9c65", "0x2de92c6f592b0275", "0x4a7484aa6ea6e483", "0x5cb0a9dcbd41fbd4", "0x76f988da831153b5", "0x983e5152ee66dfab", "0xa831c66d2db43210", "0xb00327c898fb213f", "0xbf597fc7beef0ee4", "0xc6e00bf33da88fc2", "0xd5a79147930aa725", "0x06ca6351e003826f", "0x142929670a0e6e70", "0x27b70a8546d22ffc", "0x2e1b21385c26c926", "0x4d2c6dfc5ac42aed", "0x53380d139d95b3df", "0x650a73548baf63de", "0x766a0abb3c77b2a8", "0x81c2c92e47edaee6", "0x92722c851482353b", "0xa2bfe8a14cf10364", "0xa81a664bbc423001", "0xc24b8b70d0f89791", "0xc76c51a30654be30", "0xd192e819d6ef5218", "0xd69906245565a910", "0xf40e35855771202a", "0x106aa07032bbd1b8", "0x19a4c116b8d2d0c8", "0x1e376c085141ab53", "0x2748774cdf8eeb99", "0x34b0bcb5e19b48a8", "0x391c0cb3c5c95a63", "0x4ed8aa4ae3418acb", "0x5b9cca4f7763e373", "0x682e6ff3d6b2b8a3", "0x748f82ee5defb2fc", "0x78a5636f43172f60", "0x84c87814a1f0ab72", "0x8cc702081a6439ec", "0x90befffa23631e28", "0xa4506cebde82bde9", "0xbef9a3f7b2c67915", "0xc67178f2e372532b", "0xca273eceea26619c", "0xd186b8c721c0c207", "0xeada7dd6cde0eb1e", "0xf57d4f7fee6ed178", "0x06f067aa72176fba", "0x0a637dc5a2c898a6", "0x113f9804bef90dae", "0x1b710b35131c471b", "0x28db77f523047d84", "0x32caab7b40c72493", "0x3c9ebe0a15c9bebc", "0x431d67c49c100d4c", "0x4cc5d4becb3e42b6", "0x597f299cfc657e2a", "0x5fcb6fab3ad6faec", "0x6c44198c4a475817"].map((t) => BigInt(t))))();
var P = new Uint32Array(80);
var Q = new Uint32Array(80);
var Jn = class extends An {
  constructor() {
    super(128, 64, 16, false), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  get() {
    const { Ah: e, Al: n2, Bh: r2, Bl: o2, Ch: s, Cl: a2, Dh: u3, Dl: i3, Eh: D3, El: c3, Fh: l4, Fl: p4, Gh: w4, Gl: h5, Hh: g2, Hl: S5 } = this;
    return [e, n2, r2, o2, s, a2, u3, i3, D3, c3, l4, p4, w4, h5, g2, S5];
  }
  set(e, n2, r2, o2, s, a2, u3, i3, D3, c3, l4, p4, w4, h5, g2, S5) {
    this.Ah = e | 0, this.Al = n2 | 0, this.Bh = r2 | 0, this.Bl = o2 | 0, this.Ch = s | 0, this.Cl = a2 | 0, this.Dh = u3 | 0, this.Dl = i3 | 0, this.Eh = D3 | 0, this.El = c3 | 0, this.Fh = l4 | 0, this.Fl = p4 | 0, this.Gh = w4 | 0, this.Gl = h5 | 0, this.Hh = g2 | 0, this.Hl = S5 | 0;
  }
  process(e, n2) {
    for (let d4 = 0; d4 < 16; d4++, n2 += 4) P[d4] = e.getUint32(n2), Q[d4] = e.getUint32(n2 += 4);
    for (let d4 = 16; d4 < 80; d4++) {
      const m2 = P[d4 - 15] | 0, F5 = Q[d4 - 15] | 0, q4 = x.rotrSH(m2, F5, 1) ^ x.rotrSH(m2, F5, 8) ^ x.shrSH(m2, F5, 7), z3 = x.rotrSL(m2, F5, 1) ^ x.rotrSL(m2, F5, 8) ^ x.shrSL(m2, F5, 7), I4 = P[d4 - 2] | 0, O4 = Q[d4 - 2] | 0, ot3 = x.rotrSH(I4, O4, 19) ^ x.rotrBH(I4, O4, 61) ^ x.shrSH(I4, O4, 6), tt4 = x.rotrSL(I4, O4, 19) ^ x.rotrBL(I4, O4, 61) ^ x.shrSL(I4, O4, 6), st3 = x.add4L(z3, tt4, Q[d4 - 7], Q[d4 - 16]), at3 = x.add4H(st3, q4, ot3, P[d4 - 7], P[d4 - 16]);
      P[d4] = at3 | 0, Q[d4] = st3 | 0;
    }
    let { Ah: r2, Al: o2, Bh: s, Bl: a2, Ch: u3, Cl: i3, Dh: D3, Dl: c3, Eh: l4, El: p4, Fh: w4, Fl: h5, Gh: g2, Gl: S5, Hh: v6, Hl: L4 } = this;
    for (let d4 = 0; d4 < 80; d4++) {
      const m2 = x.rotrSH(l4, p4, 14) ^ x.rotrSH(l4, p4, 18) ^ x.rotrBH(l4, p4, 41), F5 = x.rotrSL(l4, p4, 14) ^ x.rotrSL(l4, p4, 18) ^ x.rotrBL(l4, p4, 41), q4 = l4 & w4 ^ ~l4 & g2, z3 = p4 & h5 ^ ~p4 & S5, I4 = x.add5L(L4, F5, z3, Yn[d4], Q[d4]), O4 = x.add5H(I4, v6, m2, q4, Vn[d4], P[d4]), ot3 = I4 | 0, tt4 = x.rotrSH(r2, o2, 28) ^ x.rotrBH(r2, o2, 34) ^ x.rotrBH(r2, o2, 39), st3 = x.rotrSL(r2, o2, 28) ^ x.rotrBL(r2, o2, 34) ^ x.rotrBL(r2, o2, 39), at3 = r2 & s ^ r2 & u3 ^ s & u3, Ct3 = o2 & a2 ^ o2 & i3 ^ a2 & i3;
      v6 = g2 | 0, L4 = S5 | 0, g2 = w4 | 0, S5 = h5 | 0, w4 = l4 | 0, h5 = p4 | 0, { h: l4, l: p4 } = x.add(D3 | 0, c3 | 0, O4 | 0, ot3 | 0), D3 = u3 | 0, c3 = i3 | 0, u3 = s | 0, i3 = a2 | 0, s = r2 | 0, a2 = o2 | 0;
      const At3 = x.add3L(ot3, st3, Ct3);
      r2 = x.add3H(At3, O4, tt4, at3), o2 = At3 | 0;
    }
    ({ h: r2, l: o2 } = x.add(this.Ah | 0, this.Al | 0, r2 | 0, o2 | 0)), { h: s, l: a2 } = x.add(this.Bh | 0, this.Bl | 0, s | 0, a2 | 0), { h: u3, l: i3 } = x.add(this.Ch | 0, this.Cl | 0, u3 | 0, i3 | 0), { h: D3, l: c3 } = x.add(this.Dh | 0, this.Dl | 0, D3 | 0, c3 | 0), { h: l4, l: p4 } = x.add(this.Eh | 0, this.El | 0, l4 | 0, p4 | 0), { h: w4, l: h5 } = x.add(this.Fh | 0, this.Fl | 0, w4 | 0, h5 | 0), { h: g2, l: S5 } = x.add(this.Gh | 0, this.Gl | 0, g2 | 0, S5 | 0), { h: v6, l: L4 } = x.add(this.Hh | 0, this.Hl | 0, v6 | 0, L4 | 0), this.set(r2, o2, s, a2, u3, i3, D3, c3, l4, p4, w4, h5, g2, S5, v6, L4);
  }
  roundClean() {
    P.fill(0), Q.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var Kn = Bn(() => new Jn());
var vt = BigInt(0);
var be = BigInt(1);
var Wn = BigInt(2);
function It(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function Ut(t) {
  if (!It(t)) throw new Error("Uint8Array expected");
}
function Tt(t, e) {
  if (typeof e != "boolean") throw new Error(t + " boolean expected, got " + e);
}
var Xn = Array.from({ length: 256 }, (t, e) => e.toString(16).padStart(2, "0"));
function Ft(t) {
  Ut(t);
  let e = "";
  for (let n2 = 0; n2 < t.length; n2++) e += Xn[t[n2]];
  return e;
}
function pe(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  return t === "" ? vt : BigInt("0x" + t);
}
var K = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function we(t) {
  if (t >= K._0 && t <= K._9) return t - K._0;
  if (t >= K.A && t <= K.F) return t - (K.A - 10);
  if (t >= K.a && t <= K.f) return t - (K.a - 10);
}
function Ee(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  const e = t.length, n2 = e / 2;
  if (e % 2) throw new Error("hex string expected, got unpadded hex of length " + e);
  const r2 = new Uint8Array(n2);
  for (let o2 = 0, s = 0; o2 < n2; o2++, s += 2) {
    const a2 = we(t.charCodeAt(s)), u3 = we(t.charCodeAt(s + 1));
    if (a2 === void 0 || u3 === void 0) {
      const i3 = t[s] + t[s + 1];
      throw new Error('hex string expected, got non-hex character "' + i3 + '" at index ' + s);
    }
    r2[o2] = a2 * 16 + u3;
  }
  return r2;
}
function Pn(t) {
  return pe(Ft(t));
}
function Et(t) {
  return Ut(t), pe(Ft(Uint8Array.from(t).reverse()));
}
function ge(t, e) {
  return Ee(t.toString(16).padStart(e * 2, "0"));
}
function Nt(t, e) {
  return ge(t, e).reverse();
}
function W(t, e, n2) {
  let r2;
  if (typeof e == "string") try {
    r2 = Ee(e);
  } catch (s) {
    throw new Error(t + " must be hex string or Uint8Array, cause: " + s);
  }
  else if (It(e)) r2 = Uint8Array.from(e);
  else throw new Error(t + " must be hex string or Uint8Array");
  const o2 = r2.length;
  if (typeof n2 == "number" && o2 !== n2) throw new Error(t + " of length " + n2 + " expected, got " + o2);
  return r2;
}
function ye(...t) {
  let e = 0;
  for (let r2 = 0; r2 < t.length; r2++) {
    const o2 = t[r2];
    Ut(o2), e += o2.length;
  }
  const n2 = new Uint8Array(e);
  for (let r2 = 0, o2 = 0; r2 < t.length; r2++) {
    const s = t[r2];
    n2.set(s, o2), o2 += s.length;
  }
  return n2;
}
var Lt = (t) => typeof t == "bigint" && vt <= t;
function Qn(t, e, n2) {
  return Lt(t) && Lt(e) && Lt(n2) && e <= t && t < n2;
}
function ft(t, e, n2, r2) {
  if (!Qn(e, n2, r2)) throw new Error("expected valid " + t + ": " + n2 + " <= n < " + r2 + ", got " + e);
}
function tr(t) {
  let e;
  for (e = 0; t > vt; t >>= be, e += 1) ;
  return e;
}
var er = (t) => (Wn << BigInt(t - 1)) - be;
var nr = { bigint: (t) => typeof t == "bigint", function: (t) => typeof t == "function", boolean: (t) => typeof t == "boolean", string: (t) => typeof t == "string", stringOrUint8Array: (t) => typeof t == "string" || It(t), isSafeInteger: (t) => Number.isSafeInteger(t), array: (t) => Array.isArray(t), field: (t, e) => e.Fp.isValid(t), hash: (t) => typeof t == "function" && Number.isSafeInteger(t.outputLen) };
function Ot(t, e, n2 = {}) {
  const r2 = (o2, s, a2) => {
    const u3 = nr[s];
    if (typeof u3 != "function") throw new Error("invalid validator function");
    const i3 = t[o2];
    if (!(a2 && i3 === void 0) && !u3(i3, t)) throw new Error("param " + String(o2) + " is invalid. Expected " + s + ", got " + i3);
  };
  for (const [o2, s] of Object.entries(e)) r2(o2, s, false);
  for (const [o2, s] of Object.entries(n2)) r2(o2, s, true);
  return t;
}
function xe(t) {
  const e = /* @__PURE__ */ new WeakMap();
  return (n2, ...r2) => {
    const o2 = e.get(n2);
    if (o2 !== void 0) return o2;
    const s = t(n2, ...r2);
    return e.set(n2, s), s;
  };
}
var M = BigInt(0);
var N = BigInt(1);
var nt = BigInt(2);
var rr = BigInt(3);
var Ht = BigInt(4);
var Be = BigInt(5);
var Ce = BigInt(8);
function H(t, e) {
  const n2 = t % e;
  return n2 >= M ? n2 : e + n2;
}
function or(t, e, n2) {
  if (e < M) throw new Error("invalid exponent, negatives unsupported");
  if (n2 <= M) throw new Error("invalid modulus");
  if (n2 === N) return M;
  let r2 = N;
  for (; e > M; ) e & N && (r2 = r2 * t % n2), t = t * t % n2, e >>= N;
  return r2;
}
function J(t, e, n2) {
  let r2 = t;
  for (; e-- > M; ) r2 *= r2, r2 %= n2;
  return r2;
}
function Ae(t, e) {
  if (t === M) throw new Error("invert: expected non-zero number");
  if (e <= M) throw new Error("invert: expected positive modulus, got " + e);
  let n2 = H(t, e), r2 = e, o2 = M, s = N;
  for (; n2 !== M; ) {
    const u3 = r2 / n2, i3 = r2 % n2, D3 = o2 - s * u3;
    r2 = n2, n2 = i3, o2 = s, s = D3;
  }
  if (r2 !== N) throw new Error("invert: does not exist");
  return H(o2, e);
}
function sr(t) {
  const e = (t - N) / nt;
  let n2, r2, o2;
  for (n2 = t - N, r2 = 0; n2 % nt === M; n2 /= nt, r2++) ;
  for (o2 = nt; o2 < t && or(o2, e, t) !== t - N; o2++) if (o2 > 1e3) throw new Error("Cannot find square root: likely non-prime P");
  if (r2 === 1) {
    const a2 = (t + N) / Ht;
    return function(i3, D3) {
      const c3 = i3.pow(D3, a2);
      if (!i3.eql(i3.sqr(c3), D3)) throw new Error("Cannot find square root");
      return c3;
    };
  }
  const s = (n2 + N) / nt;
  return function(u3, i3) {
    if (u3.pow(i3, e) === u3.neg(u3.ONE)) throw new Error("Cannot find square root");
    let D3 = r2, c3 = u3.pow(u3.mul(u3.ONE, o2), n2), l4 = u3.pow(i3, s), p4 = u3.pow(i3, n2);
    for (; !u3.eql(p4, u3.ONE); ) {
      if (u3.eql(p4, u3.ZERO)) return u3.ZERO;
      let w4 = 1;
      for (let g2 = u3.sqr(p4); w4 < D3 && !u3.eql(g2, u3.ONE); w4++) g2 = u3.sqr(g2);
      const h5 = u3.pow(c3, N << BigInt(D3 - w4 - 1));
      c3 = u3.sqr(h5), l4 = u3.mul(l4, h5), p4 = u3.mul(p4, c3), D3 = w4;
    }
    return l4;
  };
}
function ir(t) {
  if (t % Ht === rr) {
    const e = (t + N) / Ht;
    return function(r2, o2) {
      const s = r2.pow(o2, e);
      if (!r2.eql(r2.sqr(s), o2)) throw new Error("Cannot find square root");
      return s;
    };
  }
  if (t % Ce === Be) {
    const e = (t - Be) / Ce;
    return function(r2, o2) {
      const s = r2.mul(o2, nt), a2 = r2.pow(s, e), u3 = r2.mul(o2, a2), i3 = r2.mul(r2.mul(u3, nt), a2), D3 = r2.mul(u3, r2.sub(i3, r2.ONE));
      if (!r2.eql(r2.sqr(D3), o2)) throw new Error("Cannot find square root");
      return D3;
    };
  }
  return sr(t);
}
var ur = (t, e) => (H(t, e) & N) === N;
var cr = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function ar(t) {
  const e = { ORDER: "bigint", MASK: "bigint", BYTES: "isSafeInteger", BITS: "isSafeInteger" }, n2 = cr.reduce((r2, o2) => (r2[o2] = "function", r2), e);
  return Ot(t, n2);
}
function fr(t, e, n2) {
  if (n2 < M) throw new Error("invalid exponent, negatives unsupported");
  if (n2 === M) return t.ONE;
  if (n2 === N) return e;
  let r2 = t.ONE, o2 = e;
  for (; n2 > M; ) n2 & N && (r2 = t.mul(r2, o2)), o2 = t.sqr(o2), n2 >>= N;
  return r2;
}
function Dr(t, e) {
  const n2 = new Array(e.length), r2 = e.reduce((s, a2, u3) => t.is0(a2) ? s : (n2[u3] = s, t.mul(s, a2)), t.ONE), o2 = t.inv(r2);
  return e.reduceRight((s, a2, u3) => t.is0(a2) ? s : (n2[u3] = t.mul(s, n2[u3]), t.mul(s, a2)), o2), n2;
}
function me(t, e) {
  const n2 = e !== void 0 ? e : t.toString(2).length, r2 = Math.ceil(n2 / 8);
  return { nBitLength: n2, nByteLength: r2 };
}
function _e(t, e, n2 = false, r2 = {}) {
  if (t <= M) throw new Error("invalid field: expected ORDER > 0, got " + t);
  const { nBitLength: o2, nByteLength: s } = me(t, e);
  if (s > 2048) throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let a2;
  const u3 = Object.freeze({ ORDER: t, isLE: n2, BITS: o2, BYTES: s, MASK: er(o2), ZERO: M, ONE: N, create: (i3) => H(i3, t), isValid: (i3) => {
    if (typeof i3 != "bigint") throw new Error("invalid field element: expected bigint, got " + typeof i3);
    return M <= i3 && i3 < t;
  }, is0: (i3) => i3 === M, isOdd: (i3) => (i3 & N) === N, neg: (i3) => H(-i3, t), eql: (i3, D3) => i3 === D3, sqr: (i3) => H(i3 * i3, t), add: (i3, D3) => H(i3 + D3, t), sub: (i3, D3) => H(i3 - D3, t), mul: (i3, D3) => H(i3 * D3, t), pow: (i3, D3) => fr(u3, i3, D3), div: (i3, D3) => H(i3 * Ae(D3, t), t), sqrN: (i3) => i3 * i3, addN: (i3, D3) => i3 + D3, subN: (i3, D3) => i3 - D3, mulN: (i3, D3) => i3 * D3, inv: (i3) => Ae(i3, t), sqrt: r2.sqrt || ((i3) => (a2 || (a2 = ir(t)), a2(u3, i3))), invertBatch: (i3) => Dr(u3, i3), cmov: (i3, D3, c3) => c3 ? D3 : i3, toBytes: (i3) => n2 ? Nt(i3, s) : ge(i3, s), fromBytes: (i3) => {
    if (i3.length !== s) throw new Error("Field.fromBytes: expected " + s + " bytes, got " + i3.length);
    return n2 ? Et(i3) : Pn(i3);
  } });
  return Object.freeze(u3);
}
var Se = BigInt(0);
var gt = BigInt(1);
function zt(t, e) {
  const n2 = e.negate();
  return t ? n2 : e;
}
function ve(t, e) {
  if (!Number.isSafeInteger(t) || t <= 0 || t > e) throw new Error("invalid window size, expected [1.." + e + "], got W=" + t);
}
function Mt(t, e) {
  ve(t, e);
  const n2 = Math.ceil(e / t) + 1, r2 = 2 ** (t - 1);
  return { windows: n2, windowSize: r2 };
}
function dr(t, e) {
  if (!Array.isArray(t)) throw new Error("array expected");
  t.forEach((n2, r2) => {
    if (!(n2 instanceof e)) throw new Error("invalid point at index " + r2);
  });
}
function hr(t, e) {
  if (!Array.isArray(t)) throw new Error("array of scalars expected");
  t.forEach((n2, r2) => {
    if (!e.isValid(n2)) throw new Error("invalid scalar at index " + r2);
  });
}
var qt = /* @__PURE__ */ new WeakMap();
var Ie = /* @__PURE__ */ new WeakMap();
function $t(t) {
  return Ie.get(t) || 1;
}
function lr(t, e) {
  return { constTimeNegate: zt, hasPrecomputes(n2) {
    return $t(n2) !== 1;
  }, unsafeLadder(n2, r2, o2 = t.ZERO) {
    let s = n2;
    for (; r2 > Se; ) r2 & gt && (o2 = o2.add(s)), s = s.double(), r2 >>= gt;
    return o2;
  }, precomputeWindow(n2, r2) {
    const { windows: o2, windowSize: s } = Mt(r2, e), a2 = [];
    let u3 = n2, i3 = u3;
    for (let D3 = 0; D3 < o2; D3++) {
      i3 = u3, a2.push(i3);
      for (let c3 = 1; c3 < s; c3++) i3 = i3.add(u3), a2.push(i3);
      u3 = i3.double();
    }
    return a2;
  }, wNAF(n2, r2, o2) {
    const { windows: s, windowSize: a2 } = Mt(n2, e);
    let u3 = t.ZERO, i3 = t.BASE;
    const D3 = BigInt(2 ** n2 - 1), c3 = 2 ** n2, l4 = BigInt(n2);
    for (let p4 = 0; p4 < s; p4++) {
      const w4 = p4 * a2;
      let h5 = Number(o2 & D3);
      o2 >>= l4, h5 > a2 && (h5 -= c3, o2 += gt);
      const g2 = w4, S5 = w4 + Math.abs(h5) - 1, v6 = p4 % 2 !== 0, L4 = h5 < 0;
      h5 === 0 ? i3 = i3.add(zt(v6, r2[g2])) : u3 = u3.add(zt(L4, r2[S5]));
    }
    return { p: u3, f: i3 };
  }, wNAFUnsafe(n2, r2, o2, s = t.ZERO) {
    const { windows: a2, windowSize: u3 } = Mt(n2, e), i3 = BigInt(2 ** n2 - 1), D3 = 2 ** n2, c3 = BigInt(n2);
    for (let l4 = 0; l4 < a2; l4++) {
      const p4 = l4 * u3;
      if (o2 === Se) break;
      let w4 = Number(o2 & i3);
      if (o2 >>= c3, w4 > u3 && (w4 -= D3, o2 += gt), w4 === 0) continue;
      let h5 = r2[p4 + Math.abs(w4) - 1];
      w4 < 0 && (h5 = h5.negate()), s = s.add(h5);
    }
    return s;
  }, getPrecomputes(n2, r2, o2) {
    let s = qt.get(r2);
    return s || (s = this.precomputeWindow(r2, n2), n2 !== 1 && qt.set(r2, o2(s))), s;
  }, wNAFCached(n2, r2, o2) {
    const s = $t(n2);
    return this.wNAF(s, this.getPrecomputes(s, n2, o2), r2);
  }, wNAFCachedUnsafe(n2, r2, o2, s) {
    const a2 = $t(n2);
    return a2 === 1 ? this.unsafeLadder(n2, r2, s) : this.wNAFUnsafe(a2, this.getPrecomputes(a2, n2, o2), r2, s);
  }, setWindowSize(n2, r2) {
    ve(r2, e), Ie.set(n2, r2), qt.delete(n2);
  } };
}
function br(t, e, n2, r2) {
  if (dr(n2, t), hr(r2, e), n2.length !== r2.length) throw new Error("arrays of points and scalars must have equal length");
  const o2 = t.ZERO, s = tr(BigInt(n2.length)), a2 = s > 12 ? s - 3 : s > 4 ? s - 2 : s ? 2 : 1, u3 = (1 << a2) - 1, i3 = new Array(u3 + 1).fill(o2), D3 = Math.floor((e.BITS - 1) / a2) * a2;
  let c3 = o2;
  for (let l4 = D3; l4 >= 0; l4 -= a2) {
    i3.fill(o2);
    for (let w4 = 0; w4 < r2.length; w4++) {
      const h5 = r2[w4], g2 = Number(h5 >> BigInt(l4) & BigInt(u3));
      i3[g2] = i3[g2].add(n2[w4]);
    }
    let p4 = o2;
    for (let w4 = i3.length - 1, h5 = o2; w4 > 0; w4--) h5 = h5.add(i3[w4]), p4 = p4.add(h5);
    if (c3 = c3.add(p4), l4 !== 0) for (let w4 = 0; w4 < a2; w4++) c3 = c3.double();
  }
  return c3;
}
function pr(t) {
  return ar(t.Fp), Ot(t, { n: "bigint", h: "bigint", Gx: "field", Gy: "field" }, { nBitLength: "isSafeInteger", nByteLength: "isSafeInteger" }), Object.freeze({ ...me(t.n, t.nBitLength), ...t, p: t.Fp.ORDER });
}
var G = BigInt(0);
var j = BigInt(1);
var yt = BigInt(2);
var wr = BigInt(8);
var Er = { zip215: true };
function gr(t) {
  const e = pr(t);
  return Ot(t, { hash: "function", a: "bigint", d: "bigint", randomBytes: "function" }, { adjustScalarBytes: "function", domain: "function", uvRatio: "function", mapToCurve: "function" }), Object.freeze({ ...e });
}
function yr(t) {
  const e = gr(t), { Fp: n2, n: r2, prehash: o2, hash: s, randomBytes: a2, nByteLength: u3, h: i3 } = e, D3 = yt << BigInt(u3 * 8) - j, c3 = n2.create, l4 = _e(e.n, e.nBitLength), p4 = e.uvRatio || ((y5, f6) => {
    try {
      return { isValid: true, value: n2.sqrt(y5 * n2.inv(f6)) };
    } catch {
      return { isValid: false, value: G };
    }
  }), w4 = e.adjustScalarBytes || ((y5) => y5), h5 = e.domain || ((y5, f6, b6) => {
    if (Tt("phflag", b6), f6.length || b6) throw new Error("Contexts/pre-hash are not supported");
    return y5;
  });
  function g2(y5, f6) {
    ft("coordinate " + y5, f6, G, D3);
  }
  function S5(y5) {
    if (!(y5 instanceof d4)) throw new Error("ExtendedPoint expected");
  }
  const v6 = xe((y5, f6) => {
    const { ex: b6, ey: E6, ez: B4 } = y5, C6 = y5.is0();
    f6 == null && (f6 = C6 ? wr : n2.inv(B4));
    const A5 = c3(b6 * f6), U5 = c3(E6 * f6), _2 = c3(B4 * f6);
    if (C6) return { x: G, y: j };
    if (_2 !== j) throw new Error("invZ was invalid");
    return { x: A5, y: U5 };
  }), L4 = xe((y5) => {
    const { a: f6, d: b6 } = e;
    if (y5.is0()) throw new Error("bad point: ZERO");
    const { ex: E6, ey: B4, ez: C6, et: A5 } = y5, U5 = c3(E6 * E6), _2 = c3(B4 * B4), T3 = c3(C6 * C6), $5 = c3(T3 * T3), R5 = c3(U5 * f6), V6 = c3(T3 * c3(R5 + _2)), Y5 = c3($5 + c3(b6 * c3(U5 * _2)));
    if (V6 !== Y5) throw new Error("bad point: equation left != right (1)");
    const Z3 = c3(E6 * B4), X4 = c3(C6 * A5);
    if (Z3 !== X4) throw new Error("bad point: equation left != right (2)");
    return true;
  });
  class d4 {
    constructor(f6, b6, E6, B4) {
      this.ex = f6, this.ey = b6, this.ez = E6, this.et = B4, g2("x", f6), g2("y", b6), g2("z", E6), g2("t", B4), Object.freeze(this);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static fromAffine(f6) {
      if (f6 instanceof d4) throw new Error("extended point not allowed");
      const { x: b6, y: E6 } = f6 || {};
      return g2("x", b6), g2("y", E6), new d4(b6, E6, j, c3(b6 * E6));
    }
    static normalizeZ(f6) {
      const b6 = n2.invertBatch(f6.map((E6) => E6.ez));
      return f6.map((E6, B4) => E6.toAffine(b6[B4])).map(d4.fromAffine);
    }
    static msm(f6, b6) {
      return br(d4, l4, f6, b6);
    }
    _setWindowSize(f6) {
      q4.setWindowSize(this, f6);
    }
    assertValidity() {
      L4(this);
    }
    equals(f6) {
      S5(f6);
      const { ex: b6, ey: E6, ez: B4 } = this, { ex: C6, ey: A5, ez: U5 } = f6, _2 = c3(b6 * U5), T3 = c3(C6 * B4), $5 = c3(E6 * U5), R5 = c3(A5 * B4);
      return _2 === T3 && $5 === R5;
    }
    is0() {
      return this.equals(d4.ZERO);
    }
    negate() {
      return new d4(c3(-this.ex), this.ey, this.ez, c3(-this.et));
    }
    double() {
      const { a: f6 } = e, { ex: b6, ey: E6, ez: B4 } = this, C6 = c3(b6 * b6), A5 = c3(E6 * E6), U5 = c3(yt * c3(B4 * B4)), _2 = c3(f6 * C6), T3 = b6 + E6, $5 = c3(c3(T3 * T3) - C6 - A5), R5 = _2 + A5, V6 = R5 - U5, Y5 = _2 - A5, Z3 = c3($5 * V6), X4 = c3(R5 * Y5), et4 = c3($5 * Y5), pt4 = c3(V6 * R5);
      return new d4(Z3, X4, pt4, et4);
    }
    add(f6) {
      S5(f6);
      const { a: b6, d: E6 } = e, { ex: B4, ey: C6, ez: A5, et: U5 } = this, { ex: _2, ey: T3, ez: $5, et: R5 } = f6;
      if (b6 === BigInt(-1)) {
        const re4 = c3((C6 - B4) * (T3 + _2)), oe3 = c3((C6 + B4) * (T3 - _2)), mt4 = c3(oe3 - re4);
        if (mt4 === G) return this.double();
        const se4 = c3(A5 * yt * R5), ie4 = c3(U5 * yt * $5), ue4 = ie4 + se4, ce4 = oe3 + re4, ae4 = ie4 - se4, Dn2 = c3(ue4 * mt4), dn3 = c3(ce4 * ae4), hn3 = c3(ue4 * ae4), ln3 = c3(mt4 * ce4);
        return new d4(Dn2, dn3, ln3, hn3);
      }
      const V6 = c3(B4 * _2), Y5 = c3(C6 * T3), Z3 = c3(U5 * E6 * R5), X4 = c3(A5 * $5), et4 = c3((B4 + C6) * (_2 + T3) - V6 - Y5), pt4 = X4 - Z3, ee4 = X4 + Z3, ne4 = c3(Y5 - b6 * V6), un3 = c3(et4 * pt4), cn3 = c3(ee4 * ne4), an3 = c3(et4 * ne4), fn3 = c3(pt4 * ee4);
      return new d4(un3, cn3, fn3, an3);
    }
    subtract(f6) {
      return this.add(f6.negate());
    }
    wNAF(f6) {
      return q4.wNAFCached(this, f6, d4.normalizeZ);
    }
    multiply(f6) {
      const b6 = f6;
      ft("scalar", b6, j, r2);
      const { p: E6, f: B4 } = this.wNAF(b6);
      return d4.normalizeZ([E6, B4])[0];
    }
    multiplyUnsafe(f6, b6 = d4.ZERO) {
      const E6 = f6;
      return ft("scalar", E6, G, r2), E6 === G ? F5 : this.is0() || E6 === j ? this : q4.wNAFCachedUnsafe(this, E6, d4.normalizeZ, b6);
    }
    isSmallOrder() {
      return this.multiplyUnsafe(i3).is0();
    }
    isTorsionFree() {
      return q4.unsafeLadder(this, r2).is0();
    }
    toAffine(f6) {
      return v6(this, f6);
    }
    clearCofactor() {
      const { h: f6 } = e;
      return f6 === j ? this : this.multiplyUnsafe(f6);
    }
    static fromHex(f6, b6 = false) {
      const { d: E6, a: B4 } = e, C6 = n2.BYTES;
      f6 = W("pointHex", f6, C6), Tt("zip215", b6);
      const A5 = f6.slice(), U5 = f6[C6 - 1];
      A5[C6 - 1] = U5 & -129;
      const _2 = Et(A5), T3 = b6 ? D3 : n2.ORDER;
      ft("pointHex.y", _2, G, T3);
      const $5 = c3(_2 * _2), R5 = c3($5 - j), V6 = c3(E6 * $5 - B4);
      let { isValid: Y5, value: Z3 } = p4(R5, V6);
      if (!Y5) throw new Error("Point.fromHex: invalid y coordinate");
      const X4 = (Z3 & j) === j, et4 = (U5 & 128) !== 0;
      if (!b6 && Z3 === G && et4) throw new Error("Point.fromHex: x=0 and x_0=1");
      return et4 !== X4 && (Z3 = c3(-Z3)), d4.fromAffine({ x: Z3, y: _2 });
    }
    static fromPrivateKey(f6) {
      return O4(f6).point;
    }
    toRawBytes() {
      const { x: f6, y: b6 } = this.toAffine(), E6 = Nt(b6, n2.BYTES);
      return E6[E6.length - 1] |= f6 & j ? 128 : 0, E6;
    }
    toHex() {
      return Ft(this.toRawBytes());
    }
  }
  d4.BASE = new d4(e.Gx, e.Gy, j, c3(e.Gx * e.Gy)), d4.ZERO = new d4(G, j, j, G);
  const { BASE: m2, ZERO: F5 } = d4, q4 = lr(d4, u3 * 8);
  function z3(y5) {
    return H(y5, r2);
  }
  function I4(y5) {
    return z3(Et(y5));
  }
  function O4(y5) {
    const f6 = n2.BYTES;
    y5 = W("private key", y5, f6);
    const b6 = W("hashed private key", s(y5), 2 * f6), E6 = w4(b6.slice(0, f6)), B4 = b6.slice(f6, 2 * f6), C6 = I4(E6), A5 = m2.multiply(C6), U5 = A5.toRawBytes();
    return { head: E6, prefix: B4, scalar: C6, point: A5, pointBytes: U5 };
  }
  function ot3(y5) {
    return O4(y5).pointBytes;
  }
  function tt4(y5 = new Uint8Array(), ...f6) {
    const b6 = ye(...f6);
    return I4(s(h5(b6, W("context", y5), !!o2)));
  }
  function st3(y5, f6, b6 = {}) {
    y5 = W("message", y5), o2 && (y5 = o2(y5));
    const { prefix: E6, scalar: B4, pointBytes: C6 } = O4(f6), A5 = tt4(b6.context, E6, y5), U5 = m2.multiply(A5).toRawBytes(), _2 = tt4(b6.context, U5, C6, y5), T3 = z3(A5 + _2 * B4);
    ft("signature.s", T3, G, r2);
    const $5 = ye(U5, Nt(T3, n2.BYTES));
    return W("result", $5, n2.BYTES * 2);
  }
  const at3 = Er;
  function Ct3(y5, f6, b6, E6 = at3) {
    const { context: B4, zip215: C6 } = E6, A5 = n2.BYTES;
    y5 = W("signature", y5, 2 * A5), f6 = W("message", f6), b6 = W("publicKey", b6, A5), C6 !== void 0 && Tt("zip215", C6), o2 && (f6 = o2(f6));
    const U5 = Et(y5.slice(A5, 2 * A5));
    let _2, T3, $5;
    try {
      _2 = d4.fromHex(b6, C6), T3 = d4.fromHex(y5.slice(0, A5), C6), $5 = m2.multiplyUnsafe(U5);
    } catch {
      return false;
    }
    if (!C6 && _2.isSmallOrder()) return false;
    const R5 = tt4(B4, T3.toRawBytes(), _2.toRawBytes(), f6);
    return T3.add(_2.multiplyUnsafe(R5)).subtract($5).clearCofactor().equals(d4.ZERO);
  }
  return m2._setWindowSize(8), { CURVE: e, getPublicKey: ot3, sign: st3, verify: Ct3, ExtendedPoint: d4, utils: { getExtendedPublicKey: O4, randomPrivateKey: () => a2(n2.BYTES), precompute(y5 = 8, f6 = d4.BASE) {
    return f6._setWindowSize(y5), f6.multiply(BigInt(3)), f6;
  } } };
}
BigInt(0), BigInt(1);
var kt = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
var Ue = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
BigInt(0);
var xr = BigInt(1);
var Te = BigInt(2);
BigInt(3);
var Br = BigInt(5);
var Cr = BigInt(8);
function Ar(t) {
  const e = BigInt(10), n2 = BigInt(20), r2 = BigInt(40), o2 = BigInt(80), s = kt, u3 = t * t % s * t % s, i3 = J(u3, Te, s) * u3 % s, D3 = J(i3, xr, s) * t % s, c3 = J(D3, Br, s) * D3 % s, l4 = J(c3, e, s) * c3 % s, p4 = J(l4, n2, s) * l4 % s, w4 = J(p4, r2, s) * p4 % s, h5 = J(w4, o2, s) * w4 % s, g2 = J(h5, o2, s) * w4 % s, S5 = J(g2, e, s) * c3 % s;
  return { pow_p_5_8: J(S5, Te, s) * t % s, b2: u3 };
}
function mr(t) {
  return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;
}
function _r(t, e) {
  const n2 = kt, r2 = H(e * e * e, n2), o2 = H(r2 * r2 * e, n2), s = Ar(t * o2).pow_p_5_8;
  let a2 = H(t * r2 * s, n2);
  const u3 = H(e * a2 * a2, n2), i3 = a2, D3 = H(a2 * Ue, n2), c3 = u3 === t, l4 = u3 === H(-t, n2), p4 = u3 === H(-t * Ue, n2);
  return c3 && (a2 = i3), (l4 || p4) && (a2 = D3), ur(a2, n2) && (a2 = H(-a2, n2)), { isValid: c3 || l4, value: a2 };
}
var Sr = (() => _e(kt, void 0, true))();
var vr = (() => ({ a: BigInt(-1), d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"), Fp: Sr, n: BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"), h: Cr, Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"), Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"), hash: Kn, randomBytes: he, adjustScalarBytes: mr, uvRatio: _r }))();
var Rt = (() => yr(vr))();
var jt = "EdDSA";
var Zt = "JWT";
var ut = ".";
var Dt = "base64url";
var Gt = "utf8";
var xt = "utf8";
var Vt = ":";
var Yt = "did";
var Jt = "key";
var dt = "base58btc";
var Kt = "z";
var Wt = "K36";
var Ne = 32;
function Xt(t) {
  return globalThis.Buffer != null ? new Uint8Array(t.buffer, t.byteOffset, t.byteLength) : t;
}
function Le(t = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? Xt(globalThis.Buffer.allocUnsafe(t)) : new Uint8Array(t);
}
function Oe(t, e) {
  e || (e = t.reduce((o2, s) => o2 + s.length, 0));
  const n2 = Le(e);
  let r2 = 0;
  for (const o2 of t) n2.set(o2, r2), r2 += o2.length;
  return Xt(n2);
}
function Ir(t, e) {
  if (t.length >= 255) throw new TypeError("Alphabet too long");
  for (var n2 = new Uint8Array(256), r2 = 0; r2 < n2.length; r2++) n2[r2] = 255;
  for (var o2 = 0; o2 < t.length; o2++) {
    var s = t.charAt(o2), a2 = s.charCodeAt(0);
    if (n2[a2] !== 255) throw new TypeError(s + " is ambiguous");
    n2[a2] = o2;
  }
  var u3 = t.length, i3 = t.charAt(0), D3 = Math.log(u3) / Math.log(256), c3 = Math.log(256) / Math.log(u3);
  function l4(h5) {
    if (h5 instanceof Uint8Array || (ArrayBuffer.isView(h5) ? h5 = new Uint8Array(h5.buffer, h5.byteOffset, h5.byteLength) : Array.isArray(h5) && (h5 = Uint8Array.from(h5))), !(h5 instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (h5.length === 0) return "";
    for (var g2 = 0, S5 = 0, v6 = 0, L4 = h5.length; v6 !== L4 && h5[v6] === 0; ) v6++, g2++;
    for (var d4 = (L4 - v6) * c3 + 1 >>> 0, m2 = new Uint8Array(d4); v6 !== L4; ) {
      for (var F5 = h5[v6], q4 = 0, z3 = d4 - 1; (F5 !== 0 || q4 < S5) && z3 !== -1; z3--, q4++) F5 += 256 * m2[z3] >>> 0, m2[z3] = F5 % u3 >>> 0, F5 = F5 / u3 >>> 0;
      if (F5 !== 0) throw new Error("Non-zero carry");
      S5 = q4, v6++;
    }
    for (var I4 = d4 - S5; I4 !== d4 && m2[I4] === 0; ) I4++;
    for (var O4 = i3.repeat(g2); I4 < d4; ++I4) O4 += t.charAt(m2[I4]);
    return O4;
  }
  function p4(h5) {
    if (typeof h5 != "string") throw new TypeError("Expected String");
    if (h5.length === 0) return new Uint8Array();
    var g2 = 0;
    if (h5[g2] !== " ") {
      for (var S5 = 0, v6 = 0; h5[g2] === i3; ) S5++, g2++;
      for (var L4 = (h5.length - g2) * D3 + 1 >>> 0, d4 = new Uint8Array(L4); h5[g2]; ) {
        var m2 = n2[h5.charCodeAt(g2)];
        if (m2 === 255) return;
        for (var F5 = 0, q4 = L4 - 1; (m2 !== 0 || F5 < v6) && q4 !== -1; q4--, F5++) m2 += u3 * d4[q4] >>> 0, d4[q4] = m2 % 256 >>> 0, m2 = m2 / 256 >>> 0;
        if (m2 !== 0) throw new Error("Non-zero carry");
        v6 = F5, g2++;
      }
      if (h5[g2] !== " ") {
        for (var z3 = L4 - v6; z3 !== L4 && d4[z3] === 0; ) z3++;
        for (var I4 = new Uint8Array(S5 + (L4 - z3)), O4 = S5; z3 !== L4; ) I4[O4++] = d4[z3++];
        return I4;
      }
    }
  }
  function w4(h5) {
    var g2 = p4(h5);
    if (g2) return g2;
    throw new Error(`Non-${e} character`);
  }
  return { encode: l4, decodeUnsafe: p4, decode: w4 };
}
var Ur = Ir;
var Tr = Ur;
var He = (t) => {
  if (t instanceof Uint8Array && t.constructor.name === "Uint8Array") return t;
  if (t instanceof ArrayBuffer) return new Uint8Array(t);
  if (ArrayBuffer.isView(t)) return new Uint8Array(t.buffer, t.byteOffset, t.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var Fr = (t) => new TextEncoder().encode(t);
var Nr = (t) => new TextDecoder().decode(t);
var Lr = class {
  constructor(e, n2, r2) {
    this.name = e, this.prefix = n2, this.baseEncode = r2;
  }
  encode(e) {
    if (e instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var Or = class {
  constructor(e, n2, r2) {
    if (this.name = e, this.prefix = n2, n2.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
    this.prefixCodePoint = n2.codePointAt(0), this.baseDecode = r2;
  }
  decode(e) {
    if (typeof e == "string") {
      if (e.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e.slice(this.prefix.length));
    } else throw Error("Can only multibase decode strings");
  }
  or(e) {
    return ze(this, e);
  }
};
var Hr = class {
  constructor(e) {
    this.decoders = e;
  }
  or(e) {
    return ze(this, e);
  }
  decode(e) {
    const n2 = e[0], r2 = this.decoders[n2];
    if (r2) return r2.decode(e);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var ze = (t, e) => new Hr({ ...t.decoders || { [t.prefix]: t }, ...e.decoders || { [e.prefix]: e } });
var zr = class {
  constructor(e, n2, r2, o2) {
    this.name = e, this.prefix = n2, this.baseEncode = r2, this.baseDecode = o2, this.encoder = new Lr(e, n2, r2), this.decoder = new Or(e, n2, o2);
  }
  encode(e) {
    return this.encoder.encode(e);
  }
  decode(e) {
    return this.decoder.decode(e);
  }
};
var Bt = ({ name: t, prefix: e, encode: n2, decode: r2 }) => new zr(t, e, n2, r2);
var ht = ({ prefix: t, name: e, alphabet: n2 }) => {
  const { encode: r2, decode: o2 } = Tr(n2, e);
  return Bt({ prefix: t, name: e, encode: r2, decode: (s) => He(o2(s)) });
};
var Mr = (t, e, n2, r2) => {
  const o2 = {};
  for (let c3 = 0; c3 < e.length; ++c3) o2[e[c3]] = c3;
  let s = t.length;
  for (; t[s - 1] === "="; ) --s;
  const a2 = new Uint8Array(s * n2 / 8 | 0);
  let u3 = 0, i3 = 0, D3 = 0;
  for (let c3 = 0; c3 < s; ++c3) {
    const l4 = o2[t[c3]];
    if (l4 === void 0) throw new SyntaxError(`Non-${r2} character`);
    i3 = i3 << n2 | l4, u3 += n2, u3 >= 8 && (u3 -= 8, a2[D3++] = 255 & i3 >> u3);
  }
  if (u3 >= n2 || 255 & i3 << 8 - u3) throw new SyntaxError("Unexpected end of data");
  return a2;
};
var qr = (t, e, n2) => {
  const r2 = e[e.length - 1] === "=", o2 = (1 << n2) - 1;
  let s = "", a2 = 0, u3 = 0;
  for (let i3 = 0; i3 < t.length; ++i3) for (u3 = u3 << 8 | t[i3], a2 += 8; a2 > n2; ) a2 -= n2, s += e[o2 & u3 >> a2];
  if (a2 && (s += e[o2 & u3 << n2 - a2]), r2) for (; s.length * n2 & 7; ) s += "=";
  return s;
};
var k2 = ({ name: t, prefix: e, bitsPerChar: n2, alphabet: r2 }) => Bt({ prefix: e, name: t, encode(o2) {
  return qr(o2, r2, n2);
}, decode(o2) {
  return Mr(o2, r2, n2, t);
} });
var $r = Bt({ prefix: "\0", name: "identity", encode: (t) => Nr(t), decode: (t) => Fr(t) });
var kr = Object.freeze({ __proto__: null, identity: $r });
var Rr = k2({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var jr = Object.freeze({ __proto__: null, base2: Rr });
var Zr = k2({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var Gr = Object.freeze({ __proto__: null, base8: Zr });
var Vr = ht({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Yr = Object.freeze({ __proto__: null, base10: Vr });
var Jr = k2({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Kr = k2({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Wr = Object.freeze({ __proto__: null, base16: Jr, base16upper: Kr });
var Xr = k2({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Pr = k2({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var Qr = k2({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var to = k2({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var eo = k2({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var no = k2({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var ro = k2({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var oo = k2({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var so = k2({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var io = Object.freeze({ __proto__: null, base32: Xr, base32upper: Pr, base32pad: Qr, base32padupper: to, base32hex: eo, base32hexupper: no, base32hexpad: ro, base32hexpadupper: oo, base32z: so });
var uo = ht({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var co = ht({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var ao = Object.freeze({ __proto__: null, base36: uo, base36upper: co });
var fo = ht({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Do = ht({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var ho = Object.freeze({ __proto__: null, base58btc: fo, base58flickr: Do });
var lo = k2({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var bo = k2({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var po = k2({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var wo = k2({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Eo = Object.freeze({ __proto__: null, base64: lo, base64pad: bo, base64url: po, base64urlpad: wo });
var Me = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var go = Me.reduce((t, e, n2) => (t[n2] = e, t), []);
var yo = Me.reduce((t, e, n2) => (t[e.codePointAt(0)] = n2, t), []);
function xo(t) {
  return t.reduce((e, n2) => (e += go[n2], e), "");
}
function Bo(t) {
  const e = [];
  for (const n2 of t) {
    const r2 = yo[n2.codePointAt(0)];
    if (r2 === void 0) throw new Error(`Non-base256emoji character: ${n2}`);
    e.push(r2);
  }
  return new Uint8Array(e);
}
var Co = Bt({ prefix: "🚀", name: "base256emoji", encode: xo, decode: Bo });
var Ao = Object.freeze({ __proto__: null, base256emoji: Co });
var mo = $e;
var qe = 128;
var _o = 127;
var So = ~_o;
var vo = Math.pow(2, 31);
function $e(t, e, n2) {
  e = e || [], n2 = n2 || 0;
  for (var r2 = n2; t >= vo; ) e[n2++] = t & 255 | qe, t /= 128;
  for (; t & So; ) e[n2++] = t & 255 | qe, t >>>= 7;
  return e[n2] = t | 0, $e.bytes = n2 - r2 + 1, e;
}
var Io = Pt;
var Uo = 128;
var ke = 127;
function Pt(t, r2) {
  var n2 = 0, r2 = r2 || 0, o2 = 0, s = r2, a2, u3 = t.length;
  do {
    if (s >= u3) throw Pt.bytes = 0, new RangeError("Could not decode varint");
    a2 = t[s++], n2 += o2 < 28 ? (a2 & ke) << o2 : (a2 & ke) * Math.pow(2, o2), o2 += 7;
  } while (a2 >= Uo);
  return Pt.bytes = s - r2, n2;
}
var To = Math.pow(2, 7);
var Fo = Math.pow(2, 14);
var No = Math.pow(2, 21);
var Lo = Math.pow(2, 28);
var Oo = Math.pow(2, 35);
var Ho = Math.pow(2, 42);
var zo = Math.pow(2, 49);
var Mo = Math.pow(2, 56);
var qo = Math.pow(2, 63);
var $o = function(t) {
  return t < To ? 1 : t < Fo ? 2 : t < No ? 3 : t < Lo ? 4 : t < Oo ? 5 : t < Ho ? 6 : t < zo ? 7 : t < Mo ? 8 : t < qo ? 9 : 10;
};
var ko = { encode: mo, decode: Io, encodingLength: $o };
var Re = ko;
var je = (t, e, n2 = 0) => (Re.encode(t, e, n2), e);
var Ze = (t) => Re.encodingLength(t);
var Qt = (t, e) => {
  const n2 = e.byteLength, r2 = Ze(t), o2 = r2 + Ze(n2), s = new Uint8Array(o2 + n2);
  return je(t, s, 0), je(n2, s, r2), s.set(e, o2), new Ro(t, n2, e, s);
};
var Ro = class {
  constructor(e, n2, r2, o2) {
    this.code = e, this.size = n2, this.digest = r2, this.bytes = o2;
  }
};
var Ge = ({ name: t, code: e, encode: n2 }) => new jo(t, e, n2);
var jo = class {
  constructor(e, n2, r2) {
    this.name = e, this.code = n2, this.encode = r2;
  }
  digest(e) {
    if (e instanceof Uint8Array) {
      const n2 = this.encode(e);
      return n2 instanceof Uint8Array ? Qt(this.code, n2) : n2.then((r2) => Qt(this.code, r2));
    } else throw Error("Unknown type, must be binary type");
  }
};
var Ve = (t) => async (e) => new Uint8Array(await crypto.subtle.digest(t, e));
var Zo = Ge({ name: "sha2-256", code: 18, encode: Ve("SHA-256") });
var Go = Ge({ name: "sha2-512", code: 19, encode: Ve("SHA-512") });
var Vo = Object.freeze({ __proto__: null, sha256: Zo, sha512: Go });
var Ye = 0;
var Yo = "identity";
var Je = He;
var Jo = (t) => Qt(Ye, Je(t));
var Ko = { code: Ye, name: Yo, encode: Je, digest: Jo };
var Wo = Object.freeze({ __proto__: null, identity: Ko });
new TextEncoder(), new TextDecoder();
var Ke = { ...kr, ...jr, ...Gr, ...Yr, ...Wr, ...io, ...ao, ...ho, ...Eo, ...Ao };
({ ...Vo, ...Wo });
function We(t, e, n2, r2) {
  return { name: t, prefix: e, encoder: { name: t, prefix: e, encode: n2 }, decoder: { decode: r2 } };
}
var Xe = We("utf8", "u", (t) => "u" + new TextDecoder("utf8").decode(t), (t) => new TextEncoder().encode(t.substring(1)));
var te = We("ascii", "a", (t) => {
  let e = "a";
  for (let n2 = 0; n2 < t.length; n2++) e += String.fromCharCode(t[n2]);
  return e;
}, (t) => {
  t = t.substring(1);
  const e = Le(t.length);
  for (let n2 = 0; n2 < t.length; n2++) e[n2] = t.charCodeAt(n2);
  return e;
});
var Pe = { utf8: Xe, "utf-8": Xe, hex: Ke.base16, latin1: te, ascii: te, binary: te, ...Ke };
function ct(t, e = "utf8") {
  const n2 = Pe[e];
  if (!n2) throw new Error(`Unsupported encoding "${e}"`);
  return (e === "utf8" || e === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(t.buffer, t.byteOffset, t.byteLength).toString("utf8") : n2.encoder.encode(t).substring(1);
}
function rt(t, e = "utf8") {
  const n2 = Pe[e];
  if (!n2) throw new Error(`Unsupported encoding "${e}"`);
  return (e === "utf8" || e === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? Xt(globalThis.Buffer.from(t, "utf-8")) : n2.decoder.decode(`${n2.prefix}${t}`);
}
function lt(t) {
  return safeJsonParse(ct(rt(t, Dt), Gt));
}
function bt(t) {
  return ct(rt(safeJsonStringify(t), Gt), Dt);
}
function Qe(t) {
  const e = rt(Wt, dt), n2 = Kt + ct(Oe([e, t]), dt);
  return [Yt, Jt, n2].join(Vt);
}
function en(t) {
  return ct(t, Dt);
}
function nn(t) {
  return rt(t, Dt);
}
function rn(t) {
  return rt([bt(t.header), bt(t.payload)].join(ut), xt);
}
function on(t) {
  return [bt(t.header), bt(t.payload), en(t.signature)].join(ut);
}
function sn(t) {
  const e = t.split(ut), n2 = lt(e[0]), r2 = lt(e[1]), o2 = nn(e[2]), s = rt(e.slice(0, 2).join(ut), xt);
  return { header: n2, payload: r2, signature: o2, data: s };
}
function Po(t = he(Ne)) {
  const e = Rt.getPublicKey(t);
  return { secretKey: Oe([t, e]), publicKey: e };
}
async function Qo(t, e, n2, r2, o2 = (0, import_time.fromMiliseconds)(Date.now())) {
  const s = { alg: jt, typ: Zt }, a2 = Qe(r2.publicKey), u3 = o2 + n2, i3 = { iss: a2, sub: t, aud: e, iat: o2, exp: u3 }, D3 = rn({ header: s, payload: i3 }), c3 = Rt.sign(D3, r2.secretKey.slice(0, 32));
  return on({ header: s, payload: i3, signature: c3 });
}

// node_modules/@wagmi/connectors/node_modules/@walletconnect/relay-api/dist/index.es.js
var C = { waku: { publish: "waku_publish", batchPublish: "waku_batchPublish", subscribe: "waku_subscribe", batchSubscribe: "waku_batchSubscribe", subscription: "waku_subscription", unsubscribe: "waku_unsubscribe", batchUnsubscribe: "waku_batchUnsubscribe", batchFetchMessages: "waku_batchFetchMessages" }, irn: { publish: "irn_publish", batchPublish: "irn_batchPublish", subscribe: "irn_subscribe", batchSubscribe: "irn_batchSubscribe", subscription: "irn_subscription", unsubscribe: "irn_unsubscribe", batchUnsubscribe: "irn_batchUnsubscribe", batchFetchMessages: "irn_batchFetchMessages" }, iridium: { publish: "iridium_publish", batchPublish: "iridium_batchPublish", subscribe: "iridium_subscribe", batchSubscribe: "iridium_batchSubscribe", subscription: "iridium_subscription", unsubscribe: "iridium_unsubscribe", batchUnsubscribe: "iridium_batchUnsubscribe", batchFetchMessages: "iridium_batchFetchMessages" } };

// node_modules/@wagmi/connectors/node_modules/@walletconnect/utils/dist/index.es.js
var ae = ":";
function Ne2(t) {
  const [e, n2] = t.split(ae);
  return { namespace: e, reference: n2 };
}
function Ko2(t, e = []) {
  const n2 = [];
  return Object.keys(t).forEach((r2) => {
    if (e.length && !e.includes(r2)) return;
    const o2 = t[r2];
    n2.push(...o2.accounts);
  }), n2;
}
function ue(t, e) {
  return t.includes(":") ? [t] : e.chains || [];
}
var Zo2 = Object.defineProperty;
var Yo2 = Object.defineProperties;
var Go2 = Object.getOwnPropertyDescriptors;
var Tn2 = Object.getOwnPropertySymbols;
var Wo2 = Object.prototype.hasOwnProperty;
var Xo = Object.prototype.propertyIsEnumerable;
var Rn2 = (t, e, n2) => e in t ? Zo2(t, e, { enumerable: true, configurable: true, writable: true, value: n2 }) : t[e] = n2;
var _n2 = (t, e) => {
  for (var n2 in e || (e = {})) Wo2.call(e, n2) && Rn2(t, n2, e[n2]);
  if (Tn2) for (var n2 of Tn2(e)) Xo.call(e, n2) && Rn2(t, n2, e[n2]);
  return t;
};
var Jo2 = (t, e) => Yo2(t, Go2(e));
var $n2 = "ReactNative";
var Y = { reactNative: "react-native", node: "node", browser: "browser", unknown: "unknown" };
var jn2 = "js";
function _e2() {
  return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
}
function pt() {
  return !(0, import_window_getters.getDocument)() && !!(0, import_window_getters.getNavigator)() && navigator.product === $n2;
}
function ei() {
  return pt() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "android";
}
function ni() {
  return pt() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "ios";
}
function Tt2() {
  return !_e2() && !!(0, import_window_getters.getNavigator)() && !!(0, import_window_getters.getDocument)();
}
function xt2() {
  return pt() ? Y.reactNative : _e2() ? Y.node : Tt2() ? Y.browser : Y.unknown;
}
function ri() {
  var t;
  try {
    return pt() && typeof global < "u" && typeof (global == null ? void 0 : global.Application) < "u" ? (t = global.Application) == null ? void 0 : t.applicationId : void 0;
  } catch {
    return;
  }
}
function Cn2(t, e) {
  const n2 = new URLSearchParams(t);
  for (const r2 of Object.keys(e).sort()) if (e.hasOwnProperty(r2)) {
    const o2 = e[r2];
    o2 !== void 0 && n2.set(r2, o2);
  }
  return n2.toString();
}
function oi(t) {
  var e, n2;
  const r2 = Pn2();
  try {
    return t != null && t.url && r2.url && new URL(t.url).host !== new URL(r2.url).host && (console.warn(`The configured WalletConnect 'metadata.url':${t.url} differs from the actual page url:${r2.url}. This is probably unintended and can lead to issues.`), t.url = r2.url), (e = t?.icons) != null && e.length && t.icons.length > 0 && (t.icons = t.icons.filter((o2) => o2 !== "")), Jo2(_n2(_n2({}, r2), t), { url: t?.url || r2.url, name: t?.name || r2.name, description: t?.description || r2.description, icons: (n2 = t?.icons) != null && n2.length && t.icons.length > 0 ? t.icons : r2.icons });
  } catch (o2) {
    return console.warn("Error populating app metadata", o2), t || r2;
  }
}
function Pn2() {
  return (0, import_window_metadata.getWindowMetadata)() || { name: "", description: "", url: "", icons: [""] };
}
function kn2() {
  if (xt2() === Y.reactNative && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u") {
    const { OS: n2, Version: r2 } = global.Platform;
    return [n2, r2].join("-");
  }
  const t = detect();
  if (t === null) return "unknown";
  const e = t.os ? t.os.replace(" ", "").toLowerCase() : "unknown";
  return t.type === "browser" ? [e, t.name, t.version].join("-") : [e, t.version].join("-");
}
function Vn2() {
  var t;
  const e = xt2();
  return e === Y.browser ? [e, ((t = (0, import_window_getters.getLocation)()) == null ? void 0 : t.host) || "unknown"].join(":") : e;
}
function Mn2(t, e, n2) {
  const r2 = kn2(), o2 = Vn2();
  return [[t, e].join("-"), [jn2, n2].join("-"), r2, o2].join("/");
}
function si({ protocol: t, version: e, relayUrl: n2, sdkVersion: r2, auth: o2, projectId: i3, useOnCloseEvent: s, bundleId: c3, packageName: a2 }) {
  const u3 = n2.split("?"), l4 = Mn2(t, e, r2), f6 = { auth: o2, ua: l4, projectId: i3, useOnCloseEvent: s || void 0, packageName: a2 || void 0, bundleId: c3 || void 0 }, h5 = Cn2(u3[1] || "", f6);
  return u3[0] + "?" + h5;
}
function gt2(t, e) {
  return t.filter((n2) => e.includes(n2)).length === t.length;
}
function fi(t) {
  return Object.fromEntries(t.entries());
}
function li(t) {
  return new Map(Object.entries(t));
}
function gi(t = import_time2.FIVE_MINUTES, e) {
  const n2 = (0, import_time2.toMiliseconds)(t || import_time2.FIVE_MINUTES);
  let r2, o2, i3, s;
  return { resolve: (c3) => {
    i3 && r2 && (clearTimeout(i3), r2(c3), s = Promise.resolve(c3));
  }, reject: (c3) => {
    i3 && o2 && (clearTimeout(i3), o2(c3));
  }, done: () => new Promise((c3, a2) => {
    if (s) return c3(s);
    i3 = setTimeout(() => {
      const u3 = new Error(e);
      s = Promise.reject(u3), a2(u3);
    }, n2), r2 = c3, o2 = a2;
  }) };
}
function yi(t, e, n2) {
  return new Promise(async (r2, o2) => {
    const i3 = setTimeout(() => o2(new Error(n2)), e);
    try {
      const s = await t;
      r2(s);
    } catch (s) {
      o2(s);
    }
    clearTimeout(i3);
  });
}
function $e2(t, e) {
  if (typeof e == "string" && e.startsWith(`${t}:`)) return e;
  if (t.toLowerCase() === "topic") {
    if (typeof e != "string") throw new Error('Value must be "string" for expirer target type: topic');
    return `topic:${e}`;
  } else if (t.toLowerCase() === "id") {
    if (typeof e != "number") throw new Error('Value must be "number" for expirer target type: id');
    return `id:${e}`;
  }
  throw new Error(`Unknown expirer target type: ${t}`);
}
function mi(t) {
  return $e2("topic", t);
}
function wi(t) {
  return $e2("id", t);
}
function bi(t) {
  const [e, n2] = t.split(":"), r2 = { id: void 0, topic: void 0 };
  if (e === "topic" && typeof n2 == "string") r2.topic = n2;
  else if (e === "id" && Number.isInteger(Number(n2))) r2.id = Number(n2);
  else throw new Error(`Invalid target, expected id:number or topic:string, got ${e}:${n2}`);
  return r2;
}
function Ei(t, e) {
  return (0, import_time2.fromMiliseconds)((e || Date.now()) + (0, import_time2.toMiliseconds)(t));
}
function vi(t) {
  return Date.now() >= (0, import_time2.toMiliseconds)(t);
}
function xi(t, e) {
  return `${t}${e ? `:${e}` : ""}`;
}
function ot(t = [], e = []) {
  return [.../* @__PURE__ */ new Set([...t, ...e])];
}
async function Si({ id: t, topic: e, wcDeepLink: n2 }) {
  var r2;
  try {
    if (!n2) return;
    const o2 = typeof n2 == "string" ? JSON.parse(n2) : n2, i3 = o2?.href;
    if (typeof i3 != "string") return;
    const s = Kn2(i3, t, e), c3 = xt2();
    if (c3 === Y.browser) {
      if (!((r2 = (0, import_window_getters.getDocument)()) != null && r2.hasFocus())) {
        console.warn("Document does not have focus, skipping deeplink.");
        return;
      }
      Fn2(s);
    } else c3 === Y.reactNative && typeof (global == null ? void 0 : global.Linking) < "u" && await global.Linking.openURL(s);
  } catch (o2) {
    console.error(o2);
  }
}
function Kn2(t, e, n2) {
  const r2 = `requestId=${e}&sessionTopic=${n2}`;
  t.endsWith("/") && (t = t.slice(0, -1));
  let o2 = `${t}`;
  if (t.startsWith("https://t.me")) {
    const i3 = t.includes("?") ? "&startapp=" : "?startapp=";
    o2 = `${o2}${i3}${Yn2(r2, true)}`;
  } else o2 = `${o2}/wc?${r2}`;
  return o2;
}
function Fn2(t) {
  let e = "_self";
  Zn2() ? e = "_top" : (zn2() || t.startsWith("https://") || t.startsWith("http://")) && (e = "_blank"), window.open(t, e, "noreferrer noopener");
}
async function Oi(t, e) {
  let n2 = "";
  try {
    if (Tt2() && (n2 = localStorage.getItem(e), n2)) return n2;
    n2 = await t.getItem(e);
  } catch (r2) {
    console.error(r2);
  }
  return n2;
}
function Ai(t, e) {
  if (!t.includes(e)) return null;
  const n2 = t.split(/([&,?,=])/), r2 = n2.indexOf(e);
  return n2[r2 + 2];
}
function Bi() {
  return typeof crypto < "u" && crypto != null && crypto.randomUUID ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (t) => {
    const e = Math.random() * 16 | 0;
    return (t === "x" ? e : e & 3 | 8).toString(16);
  });
}
function Ii() {
  return typeof process < "u" && process.env.IS_VITEST === "true";
}
function zn2() {
  return typeof window < "u" && (!!window.TelegramWebviewProxy || !!window.Telegram || !!window.TelegramWebviewProxyProto);
}
function Zn2() {
  try {
    return window.self !== window.top;
  } catch {
    return false;
  }
}
function Yn2(t, e = false) {
  const n2 = Buffer.from(t).toString("base64");
  return e ? n2.replace(/[=]/g, "") : n2;
}
function je2(t) {
  return Buffer.from(t, "base64").toString("utf-8");
}
function Ni(t) {
  return new Promise((e) => setTimeout(e, t));
}
function Wt2(t) {
  if (!Number.isSafeInteger(t) || t < 0) throw new Error("positive integer expected, got " + t);
}
function Ui(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function Xt2(t, ...e) {
  if (!Ui(t)) throw new Error("Uint8Array expected");
  if (e.length > 0 && !e.includes(t.length)) throw new Error("Uint8Array expected of length " + e + ", got length=" + t.length);
}
function Ce2(t) {
  if (typeof t != "function" || typeof t.create != "function") throw new Error("Hash should be wrapped by utils.wrapConstructor");
  Wt2(t.outputLen), Wt2(t.blockLen);
}
function Rt2(t, e = true) {
  if (t.destroyed) throw new Error("Hash instance has been destroyed");
  if (e && t.finished) throw new Error("Hash#digest() has already been called");
}
function Gn2(t, e) {
  Xt2(t);
  const n2 = e.outputLen;
  if (t.length < n2) throw new Error("digestInto() expects output buffer of length at least " + n2);
}
var le2 = BigInt(2 ** 32 - 1);
var Wn2 = BigInt(32);
function Ti(t, e = false) {
  return e ? { h: Number(t & le2), l: Number(t >> Wn2 & le2) } : { h: Number(t >> Wn2 & le2) | 0, l: Number(t & le2) | 0 };
}
function Ri(t, e = false) {
  let n2 = new Uint32Array(t.length), r2 = new Uint32Array(t.length);
  for (let o2 = 0; o2 < t.length; o2++) {
    const { h: i3, l: s } = Ti(t[o2], e);
    [n2[o2], r2[o2]] = [i3, s];
  }
  return [n2, r2];
}
var _i = (t, e, n2) => t << n2 | e >>> 32 - n2;
var $i = (t, e, n2) => e << n2 | t >>> 32 - n2;
var Li = (t, e, n2) => e << n2 - 32 | t >>> 64 - n2;
var ji = (t, e, n2) => t << n2 - 32 | e >>> 64 - n2;
var _t2 = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
function Ci(t) {
  return new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4));
}
function Pe2(t) {
  return new DataView(t.buffer, t.byteOffset, t.byteLength);
}
function ct2(t, e) {
  return t << 32 - e | t >>> e;
}
var Xn2 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function Pi(t) {
  return t << 24 & 4278190080 | t << 8 & 16711680 | t >>> 8 & 65280 | t >>> 24 & 255;
}
function Jn2(t) {
  for (let e = 0; e < t.length; e++) t[e] = Pi(t[e]);
}
function ki(t) {
  if (typeof t != "string") throw new Error("utf8ToBytes expected string, got " + typeof t);
  return new Uint8Array(new TextEncoder().encode(t));
}
function $t2(t) {
  return typeof t == "string" && (t = ki(t)), Xt2(t), t;
}
function Vi(...t) {
  let e = 0;
  for (let r2 = 0; r2 < t.length; r2++) {
    const o2 = t[r2];
    Xt2(o2), e += o2.length;
  }
  const n2 = new Uint8Array(e);
  for (let r2 = 0, o2 = 0; r2 < t.length; r2++) {
    const i3 = t[r2];
    n2.set(i3, o2), o2 += i3.length;
  }
  return n2;
}
var ke2 = class {
  clone() {
    return this._cloneInto();
  }
};
function Qn2(t) {
  const e = (r2) => t().update($t2(r2)).digest(), n2 = t();
  return e.outputLen = n2.outputLen, e.blockLen = n2.blockLen, e.create = () => t(), e;
}
function Lt2(t = 32) {
  if (_t2 && typeof _t2.getRandomValues == "function") return _t2.getRandomValues(new Uint8Array(t));
  if (_t2 && typeof _t2.randomBytes == "function") return _t2.randomBytes(t);
  throw new Error("crypto.getRandomValues must be defined");
}
var tr2 = [];
var er2 = [];
var nr2 = [];
var Mi = BigInt(0);
var Jt2 = BigInt(1);
var Di = BigInt(2);
var Hi = BigInt(7);
var qi = BigInt(256);
var Ki = BigInt(113);
for (let t = 0, e = Jt2, n2 = 1, r2 = 0; t < 24; t++) {
  [n2, r2] = [r2, (2 * n2 + 3 * r2) % 5], tr2.push(2 * (5 * r2 + n2)), er2.push((t + 1) * (t + 2) / 2 % 64);
  let o2 = Mi;
  for (let i3 = 0; i3 < 7; i3++) e = (e << Jt2 ^ (e >> Hi) * Ki) % qi, e & Di && (o2 ^= Jt2 << (Jt2 << BigInt(i3)) - Jt2);
  nr2.push(o2);
}
var [Fi, zi] = Ri(nr2, true);
var rr2 = (t, e, n2) => n2 > 32 ? Li(t, e, n2) : _i(t, e, n2);
var or2 = (t, e, n2) => n2 > 32 ? ji(t, e, n2) : $i(t, e, n2);
function Zi(t, e = 24) {
  const n2 = new Uint32Array(10);
  for (let r2 = 24 - e; r2 < 24; r2++) {
    for (let s = 0; s < 10; s++) n2[s] = t[s] ^ t[s + 10] ^ t[s + 20] ^ t[s + 30] ^ t[s + 40];
    for (let s = 0; s < 10; s += 2) {
      const c3 = (s + 8) % 10, a2 = (s + 2) % 10, u3 = n2[a2], l4 = n2[a2 + 1], f6 = rr2(u3, l4, 1) ^ n2[c3], h5 = or2(u3, l4, 1) ^ n2[c3 + 1];
      for (let y5 = 0; y5 < 50; y5 += 10) t[s + y5] ^= f6, t[s + y5 + 1] ^= h5;
    }
    let o2 = t[2], i3 = t[3];
    for (let s = 0; s < 24; s++) {
      const c3 = er2[s], a2 = rr2(o2, i3, c3), u3 = or2(o2, i3, c3), l4 = tr2[s];
      o2 = t[l4], i3 = t[l4 + 1], t[l4] = a2, t[l4 + 1] = u3;
    }
    for (let s = 0; s < 50; s += 10) {
      for (let c3 = 0; c3 < 10; c3++) n2[c3] = t[s + c3];
      for (let c3 = 0; c3 < 10; c3++) t[s + c3] ^= ~n2[(c3 + 2) % 10] & n2[(c3 + 4) % 10];
    }
    t[0] ^= Fi[r2], t[1] ^= zi[r2];
  }
  n2.fill(0);
}
var En2 = class _En extends ke2 {
  constructor(e, n2, r2, o2 = false, i3 = 24) {
    if (super(), this.blockLen = e, this.suffix = n2, this.outputLen = r2, this.enableXOF = o2, this.rounds = i3, this.pos = 0, this.posOut = 0, this.finished = false, this.destroyed = false, Wt2(r2), 0 >= this.blockLen || this.blockLen >= 200) throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200), this.state32 = Ci(this.state);
  }
  keccak() {
    Xn2 || Jn2(this.state32), Zi(this.state32, this.rounds), Xn2 || Jn2(this.state32), this.posOut = 0, this.pos = 0;
  }
  update(e) {
    Rt2(this);
    const { blockLen: n2, state: r2 } = this;
    e = $t2(e);
    const o2 = e.length;
    for (let i3 = 0; i3 < o2; ) {
      const s = Math.min(n2 - this.pos, o2 - i3);
      for (let c3 = 0; c3 < s; c3++) r2[this.pos++] ^= e[i3++];
      this.pos === n2 && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished) return;
    this.finished = true;
    const { state: e, suffix: n2, pos: r2, blockLen: o2 } = this;
    e[r2] ^= n2, (n2 & 128) !== 0 && r2 === o2 - 1 && this.keccak(), e[o2 - 1] ^= 128, this.keccak();
  }
  writeInto(e) {
    Rt2(this, false), Xt2(e), this.finish();
    const n2 = this.state, { blockLen: r2 } = this;
    for (let o2 = 0, i3 = e.length; o2 < i3; ) {
      this.posOut >= r2 && this.keccak();
      const s = Math.min(r2 - this.posOut, i3 - o2);
      e.set(n2.subarray(this.posOut, this.posOut + s), o2), this.posOut += s, o2 += s;
    }
    return e;
  }
  xofInto(e) {
    if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
    return this.writeInto(e);
  }
  xof(e) {
    return Wt2(e), this.xofInto(new Uint8Array(e));
  }
  digestInto(e) {
    if (Gn2(e, this), this.finished) throw new Error("digest() was already called");
    return this.writeInto(e), this.destroy(), e;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true, this.state.fill(0);
  }
  _cloneInto(e) {
    const { blockLen: n2, suffix: r2, outputLen: o2, rounds: i3, enableXOF: s } = this;
    return e || (e = new _En(n2, r2, o2, s, i3)), e.state32.set(this.state32), e.pos = this.pos, e.posOut = this.posOut, e.finished = this.finished, e.rounds = i3, e.suffix = r2, e.outputLen = o2, e.enableXOF = s, e.destroyed = this.destroyed, e;
  }
};
var Yi = (t, e, n2) => Qn2(() => new En2(e, t, n2));
var Gi = Yi(1, 136, 256 / 8);
var Wi = "https://rpc.walletconnect.org/v1";
function Ve2(t) {
  const e = `Ethereum Signed Message:
${t.length}`, n2 = new TextEncoder().encode(e + t);
  return "0x" + Buffer.from(Gi(n2)).toString("hex");
}
async function ir2(t, e, n2, r2, o2, i3) {
  switch (n2.t) {
    case "eip191":
      return await sr2(t, e, n2.s);
    case "eip1271":
      return await cr2(t, e, n2.s, r2, o2, i3);
    default:
      throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${n2.t}`);
  }
}
async function sr2(t, e, n2) {
  return (await recoverAddress({ hash: Ve2(e), signature: n2 })).toLowerCase() === t.toLowerCase();
}
async function cr2(t, e, n2, r2, o2, i3) {
  const s = Ne2(r2);
  if (!s.namespace || !s.reference) throw new Error(`isValidEip1271Signature failed: chainId must be in CAIP-2 format, received: ${r2}`);
  try {
    const c3 = "0x1626ba7e", a2 = "0000000000000000000000000000000000000000000000000000000000000040", u3 = "0000000000000000000000000000000000000000000000000000000000000041", l4 = n2.substring(2), f6 = Ve2(e).substring(2), h5 = c3 + f6 + a2 + u3 + l4, y5 = await fetch(`${i3 || Wi}/?chainId=${r2}&projectId=${o2}`, { method: "POST", body: JSON.stringify({ id: Xi(), jsonrpc: "2.0", method: "eth_call", params: [{ to: t, data: h5 }, "latest"] }) }), { result: E6 } = await y5.json();
    return E6 ? E6.slice(0, c3.length).toLowerCase() === c3.toLowerCase() : false;
  } catch (c3) {
    return console.error("isValidEip1271Signature: ", c3), false;
  }
}
function Xi() {
  return Date.now() + Math.floor(Math.random() * 1e3);
}
function Ji(t) {
  const e = atob(t), n2 = new Uint8Array(e.length);
  for (let s = 0; s < e.length; s++) n2[s] = e.charCodeAt(s);
  const r2 = n2[0];
  if (r2 === 0) throw new Error("No signatures found");
  const o2 = 1 + r2 * 64;
  if (n2.length < o2) throw new Error("Transaction data too short for claimed signature count");
  if (n2.length < 100) throw new Error("Transaction too short");
  const i3 = Buffer.from(t, "base64").slice(1, 65);
  return esm_default.encode(i3);
}
var Qi = Object.defineProperty;
var ts = Object.defineProperties;
var es = Object.getOwnPropertyDescriptors;
var ar2 = Object.getOwnPropertySymbols;
var ns = Object.prototype.hasOwnProperty;
var rs = Object.prototype.propertyIsEnumerable;
var ur2 = (t, e, n2) => e in t ? Qi(t, e, { enumerable: true, configurable: true, writable: true, value: n2 }) : t[e] = n2;
var Me2 = (t, e) => {
  for (var n2 in e || (e = {})) ns.call(e, n2) && ur2(t, n2, e[n2]);
  if (ar2) for (var n2 of ar2(e)) rs.call(e, n2) && ur2(t, n2, e[n2]);
  return t;
};
var fr2 = (t, e) => ts(t, es(e));
var os = "did:pkh:";
var de2 = (t) => t?.split(":");
var lr2 = (t) => {
  const e = t && de2(t);
  if (e) return t.includes(os) ? e[3] : e[1];
};
var dr2 = (t) => {
  const e = t && de2(t);
  if (e) return e[2] + ":" + e[3];
};
var De2 = (t) => {
  const e = t && de2(t);
  if (e) return e.pop();
};
async function is(t) {
  const { cacao: e, projectId: n2 } = t, { s: r2, p: o2 } = e, i3 = hr2(o2, o2.iss), s = De2(o2.iss);
  return await ir2(s, i3, r2, dr2(o2.iss), n2);
}
var hr2 = (t, e) => {
  const n2 = `${t.domain} wants you to sign in with your Ethereum account:`, r2 = De2(e);
  if (!t.aud && !t.uri) throw new Error("Either `aud` or `uri` is required to construct the message");
  let o2 = t.statement || void 0;
  const i3 = `URI: ${t.aud || t.uri}`, s = `Version: ${t.version}`, c3 = `Chain ID: ${lr2(e)}`, a2 = `Nonce: ${t.nonce}`, u3 = `Issued At: ${t.iat}`, l4 = t.exp ? `Expiration Time: ${t.exp}` : void 0, f6 = t.nbf ? `Not Before: ${t.nbf}` : void 0, h5 = t.requestId ? `Request ID: ${t.requestId}` : void 0, y5 = t.resources ? `Resources:${t.resources.map((p4) => `
- ${p4}`).join("")}` : void 0, E6 = pe2(t.resources);
  if (E6) {
    const p4 = yt2(E6);
    o2 = Ke2(o2, p4);
  }
  return [n2, r2, "", o2, "", i3, s, c3, a2, u3, l4, f6, h5, y5].filter((p4) => p4 != null).join(`
`);
};
function mr2(t) {
  return Buffer.from(JSON.stringify(t)).toString("base64");
}
function wr2(t) {
  return JSON.parse(Buffer.from(t, "base64").toString("utf-8"));
}
function at(t) {
  if (!t) throw new Error("No recap provided, value is undefined");
  if (!t.att) throw new Error("No `att` property found");
  const e = Object.keys(t.att);
  if (!(e != null && e.length)) throw new Error("No resources found in `att` property");
  e.forEach((n2) => {
    const r2 = t.att[n2];
    if (Array.isArray(r2)) throw new Error(`Resource must be an object: ${n2}`);
    if (typeof r2 != "object") throw new Error(`Resource must be an object: ${n2}`);
    if (!Object.keys(r2).length) throw new Error(`Resource object is empty: ${n2}`);
    Object.keys(r2).forEach((o2) => {
      const i3 = r2[o2];
      if (!Array.isArray(i3)) throw new Error(`Ability limits ${o2} must be an array of objects, found: ${i3}`);
      if (!i3.length) throw new Error(`Value of ${o2} is empty array, must be an array with objects`);
      i3.forEach((s) => {
        if (typeof s != "object") throw new Error(`Ability limits (${o2}) must be an array of objects, found: ${s}`);
      });
    });
  });
}
function br2(t, e, n2, r2 = {}) {
  return n2?.sort((o2, i3) => o2.localeCompare(i3)), { att: { [t]: He2(e, n2, r2) } };
}
function He2(t, e, n2 = {}) {
  e = e?.sort((o2, i3) => o2.localeCompare(i3));
  const r2 = e.map((o2) => ({ [`${t}/${o2}`]: [n2] }));
  return Object.assign({}, ...r2);
}
function he2(t) {
  return at(t), `urn:recap:${mr2(t).replace(/=/g, "")}`;
}
function yt2(t) {
  const e = wr2(t.replace("urn:recap:", ""));
  return at(e), e;
}
function fs(t, e, n2) {
  const r2 = br2(t, e, n2);
  return he2(r2);
}
function qe2(t) {
  return t && t.includes("urn:recap:");
}
function ls(t, e) {
  const n2 = yt2(t), r2 = yt2(e), o2 = vr2(n2, r2);
  return he2(o2);
}
function vr2(t, e) {
  at(t), at(e);
  const n2 = Object.keys(t.att).concat(Object.keys(e.att)).sort((o2, i3) => o2.localeCompare(i3)), r2 = { att: {} };
  return n2.forEach((o2) => {
    var i3, s;
    Object.keys(((i3 = t.att) == null ? void 0 : i3[o2]) || {}).concat(Object.keys(((s = e.att) == null ? void 0 : s[o2]) || {})).sort((c3, a2) => c3.localeCompare(a2)).forEach((c3) => {
      var a2, u3;
      r2.att[o2] = fr2(Me2({}, r2.att[o2]), { [c3]: ((a2 = t.att[o2]) == null ? void 0 : a2[c3]) || ((u3 = e.att[o2]) == null ? void 0 : u3[c3]) });
    });
  }), r2;
}
function Ke2(t = "", e) {
  at(e);
  const n2 = "I further authorize the stated URI to perform the following actions on my behalf: ";
  if (t.includes(n2)) return t;
  const r2 = [];
  let o2 = 0;
  Object.keys(e.att).forEach((c3) => {
    const a2 = Object.keys(e.att[c3]).map((f6) => ({ ability: f6.split("/")[0], action: f6.split("/")[1] }));
    a2.sort((f6, h5) => f6.action.localeCompare(h5.action));
    const u3 = {};
    a2.forEach((f6) => {
      u3[f6.ability] || (u3[f6.ability] = []), u3[f6.ability].push(f6.action);
    });
    const l4 = Object.keys(u3).map((f6) => (o2++, `(${o2}) '${f6}': '${u3[f6].join("', '")}' for '${c3}'.`));
    r2.push(l4.join(", ").replace(".,", "."));
  });
  const i3 = r2.join(" "), s = `${n2}${i3}`;
  return `${t ? t + " " : ""}${s}`;
}
function ds(t) {
  var e;
  const n2 = yt2(t);
  at(n2);
  const r2 = (e = n2.att) == null ? void 0 : e.eip155;
  return r2 ? Object.keys(r2).map((o2) => o2.split("/")[1]) : [];
}
function hs(t) {
  const e = yt2(t);
  at(e);
  const n2 = [];
  return Object.values(e.att).forEach((r2) => {
    Object.values(r2).forEach((o2) => {
      var i3;
      (i3 = o2?.[0]) != null && i3.chains && n2.push(o2[0].chains);
    });
  }), [...new Set(n2.flat())];
}
function pe2(t) {
  if (!t) return;
  const e = t?.[t.length - 1];
  return qe2(e) ? e : void 0;
}
function Fe(t) {
  if (!Number.isSafeInteger(t) || t < 0) throw new Error("positive integer expected, got " + t);
}
function Sr2(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function tt(t, ...e) {
  if (!Sr2(t)) throw new Error("Uint8Array expected");
  if (e.length > 0 && !e.includes(t.length)) throw new Error("Uint8Array expected of length " + e + ", got length=" + t.length);
}
function Or2(t, e = true) {
  if (t.destroyed) throw new Error("Hash instance has been destroyed");
  if (e && t.finished) throw new Error("Hash#digest() has already been called");
}
function ps(t, e) {
  tt(t);
  const n2 = e.outputLen;
  if (t.length < n2) throw new Error("digestInto() expects output buffer of length at least " + n2);
}
function Ar2(t) {
  if (typeof t != "boolean") throw new Error(`boolean expected, not ${t}`);
}
var mt = (t) => new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4));
var gs = (t) => new DataView(t.buffer, t.byteOffset, t.byteLength);
var ys = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!ys) throw new Error("Non little-endian hardware is not supported");
function ms(t) {
  if (typeof t != "string") throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t));
}
function ze2(t) {
  if (typeof t == "string") t = ms(t);
  else if (Sr2(t)) t = Ze2(t);
  else throw new Error("Uint8Array expected, got " + typeof t);
  return t;
}
function ws(t, e) {
  if (e == null || typeof e != "object") throw new Error("options must be defined");
  return Object.assign(t, e);
}
function bs(t, e) {
  if (t.length !== e.length) return false;
  let n2 = 0;
  for (let r2 = 0; r2 < t.length; r2++) n2 |= t[r2] ^ e[r2];
  return n2 === 0;
}
var Es = (t, e) => {
  function n2(r2, ...o2) {
    if (tt(r2), t.nonceLength !== void 0) {
      const l4 = o2[0];
      if (!l4) throw new Error("nonce / iv required");
      t.varSizeNonce ? tt(l4) : tt(l4, t.nonceLength);
    }
    const i3 = t.tagLength;
    i3 && o2[1] !== void 0 && tt(o2[1]);
    const s = e(r2, ...o2), c3 = (l4, f6) => {
      if (f6 !== void 0) {
        if (l4 !== 2) throw new Error("cipher output not supported");
        tt(f6);
      }
    };
    let a2 = false;
    return { encrypt(l4, f6) {
      if (a2) throw new Error("cannot encrypt() twice with same key + nonce");
      return a2 = true, tt(l4), c3(s.encrypt.length, f6), s.encrypt(l4, f6);
    }, decrypt(l4, f6) {
      if (tt(l4), i3 && l4.length < i3) throw new Error("invalid ciphertext length: smaller than tagLength=" + i3);
      return c3(s.decrypt.length, f6), s.decrypt(l4, f6);
    } };
  }
  return Object.assign(n2, t), n2;
};
function Br2(t, e, n2 = true) {
  if (e === void 0) return new Uint8Array(t);
  if (e.length !== t) throw new Error("invalid output length, expected " + t + ", got: " + e.length);
  if (n2 && !vs(e)) throw new Error("invalid output, must be aligned");
  return e;
}
function Ir2(t, e, n2, r2) {
  if (typeof t.setBigUint64 == "function") return t.setBigUint64(e, n2, r2);
  const o2 = BigInt(32), i3 = BigInt(4294967295), s = Number(n2 >> o2 & i3), c3 = Number(n2 & i3), a2 = r2 ? 4 : 0, u3 = r2 ? 0 : 4;
  t.setUint32(e + a2, s, r2), t.setUint32(e + u3, c3, r2);
}
function vs(t) {
  return t.byteOffset % 4 === 0;
}
function Ze2(t) {
  return Uint8Array.from(t);
}
function jt2(...t) {
  for (let e = 0; e < t.length; e++) t[e].fill(0);
}
var Nr2 = (t) => Uint8Array.from(t.split("").map((e) => e.charCodeAt(0)));
var xs = Nr2("expand 16-byte k");
var Ss = Nr2("expand 32-byte k");
var Os = mt(xs);
var As = mt(Ss);
function V(t, e) {
  return t << e | t >>> 32 - e;
}
function Ye2(t) {
  return t.byteOffset % 4 === 0;
}
var ge2 = 64;
var Bs = 16;
var Ur2 = 2 ** 32 - 1;
var Tr2 = new Uint32Array();
function Is(t, e, n2, r2, o2, i3, s, c3) {
  const a2 = o2.length, u3 = new Uint8Array(ge2), l4 = mt(u3), f6 = Ye2(o2) && Ye2(i3), h5 = f6 ? mt(o2) : Tr2, y5 = f6 ? mt(i3) : Tr2;
  for (let E6 = 0; E6 < a2; s++) {
    if (t(e, n2, r2, l4, s, c3), s >= Ur2) throw new Error("arx: counter overflow");
    const p4 = Math.min(ge2, a2 - E6);
    if (f6 && p4 === ge2) {
      const d4 = E6 / 4;
      if (E6 % 4 !== 0) throw new Error("arx: invalid block position");
      for (let v6 = 0, m2; v6 < Bs; v6++) m2 = d4 + v6, y5[m2] = h5[m2] ^ l4[v6];
      E6 += ge2;
      continue;
    }
    for (let d4 = 0, v6; d4 < p4; d4++) v6 = E6 + d4, i3[v6] = o2[v6] ^ u3[d4];
    E6 += p4;
  }
}
function Ns(t, e) {
  const { allowShortKeys: n2, extendNonceFn: r2, counterLength: o2, counterRight: i3, rounds: s } = ws({ allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 }, e);
  if (typeof t != "function") throw new Error("core must be a function");
  return Fe(o2), Fe(s), Ar2(i3), Ar2(n2), (c3, a2, u3, l4, f6 = 0) => {
    tt(c3), tt(a2), tt(u3);
    const h5 = u3.length;
    if (l4 === void 0 && (l4 = new Uint8Array(h5)), tt(l4), Fe(f6), f6 < 0 || f6 >= Ur2) throw new Error("arx: counter overflow");
    if (l4.length < h5) throw new Error(`arx: output (${l4.length}) is shorter than data (${h5})`);
    const y5 = [];
    let E6 = c3.length, p4, d4;
    if (E6 === 32) y5.push(p4 = Ze2(c3)), d4 = As;
    else if (E6 === 16 && n2) p4 = new Uint8Array(32), p4.set(c3), p4.set(c3, 16), d4 = Os, y5.push(p4);
    else throw new Error(`arx: invalid 32-byte key, got length=${E6}`);
    Ye2(a2) || y5.push(a2 = Ze2(a2));
    const v6 = mt(p4);
    if (r2) {
      if (a2.length !== 24) throw new Error("arx: extended nonce must be 24 bytes");
      r2(d4, v6, mt(a2.subarray(0, 16)), v6), a2 = a2.subarray(16);
    }
    const m2 = 16 - o2;
    if (m2 !== a2.length) throw new Error(`arx: nonce must be ${m2} or 16 bytes`);
    if (m2 !== 12) {
      const N4 = new Uint8Array(12);
      N4.set(a2, i3 ? 0 : 12 - a2.length), a2 = N4, y5.push(a2);
    }
    const O4 = mt(a2);
    return Is(t, d4, v6, O4, u3, l4, f6, s), jt2(...y5), l4;
  };
}
var F = (t, e) => t[e++] & 255 | (t[e++] & 255) << 8;
var Us = class {
  constructor(e) {
    this.blockLen = 16, this.outputLen = 16, this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.pos = 0, this.finished = false, e = ze2(e), tt(e, 32);
    const n2 = F(e, 0), r2 = F(e, 2), o2 = F(e, 4), i3 = F(e, 6), s = F(e, 8), c3 = F(e, 10), a2 = F(e, 12), u3 = F(e, 14);
    this.r[0] = n2 & 8191, this.r[1] = (n2 >>> 13 | r2 << 3) & 8191, this.r[2] = (r2 >>> 10 | o2 << 6) & 7939, this.r[3] = (o2 >>> 7 | i3 << 9) & 8191, this.r[4] = (i3 >>> 4 | s << 12) & 255, this.r[5] = s >>> 1 & 8190, this.r[6] = (s >>> 14 | c3 << 2) & 8191, this.r[7] = (c3 >>> 11 | a2 << 5) & 8065, this.r[8] = (a2 >>> 8 | u3 << 8) & 8191, this.r[9] = u3 >>> 5 & 127;
    for (let l4 = 0; l4 < 8; l4++) this.pad[l4] = F(e, 16 + 2 * l4);
  }
  process(e, n2, r2 = false) {
    const o2 = r2 ? 0 : 2048, { h: i3, r: s } = this, c3 = s[0], a2 = s[1], u3 = s[2], l4 = s[3], f6 = s[4], h5 = s[5], y5 = s[6], E6 = s[7], p4 = s[8], d4 = s[9], v6 = F(e, n2 + 0), m2 = F(e, n2 + 2), O4 = F(e, n2 + 4), N4 = F(e, n2 + 6), $5 = F(e, n2 + 8), B4 = F(e, n2 + 10), A5 = F(e, n2 + 12), T3 = F(e, n2 + 14);
    let S5 = i3[0] + (v6 & 8191), L4 = i3[1] + ((v6 >>> 13 | m2 << 3) & 8191), U5 = i3[2] + ((m2 >>> 10 | O4 << 6) & 8191), _2 = i3[3] + ((O4 >>> 7 | N4 << 9) & 8191), j4 = i3[4] + ((N4 >>> 4 | $5 << 12) & 8191), g2 = i3[5] + ($5 >>> 1 & 8191), w4 = i3[6] + (($5 >>> 14 | B4 << 2) & 8191), b6 = i3[7] + ((B4 >>> 11 | A5 << 5) & 8191), I4 = i3[8] + ((A5 >>> 8 | T3 << 8) & 8191), R5 = i3[9] + (T3 >>> 5 | o2), x3 = 0, C6 = x3 + S5 * c3 + L4 * (5 * d4) + U5 * (5 * p4) + _2 * (5 * E6) + j4 * (5 * y5);
    x3 = C6 >>> 13, C6 &= 8191, C6 += g2 * (5 * h5) + w4 * (5 * f6) + b6 * (5 * l4) + I4 * (5 * u3) + R5 * (5 * a2), x3 += C6 >>> 13, C6 &= 8191;
    let P5 = x3 + S5 * a2 + L4 * c3 + U5 * (5 * d4) + _2 * (5 * p4) + j4 * (5 * E6);
    x3 = P5 >>> 13, P5 &= 8191, P5 += g2 * (5 * y5) + w4 * (5 * h5) + b6 * (5 * f6) + I4 * (5 * l4) + R5 * (5 * u3), x3 += P5 >>> 13, P5 &= 8191;
    let k7 = x3 + S5 * u3 + L4 * a2 + U5 * c3 + _2 * (5 * d4) + j4 * (5 * p4);
    x3 = k7 >>> 13, k7 &= 8191, k7 += g2 * (5 * E6) + w4 * (5 * y5) + b6 * (5 * h5) + I4 * (5 * f6) + R5 * (5 * l4), x3 += k7 >>> 13, k7 &= 8191;
    let M6 = x3 + S5 * l4 + L4 * u3 + U5 * a2 + _2 * c3 + j4 * (5 * d4);
    x3 = M6 >>> 13, M6 &= 8191, M6 += g2 * (5 * p4) + w4 * (5 * E6) + b6 * (5 * y5) + I4 * (5 * h5) + R5 * (5 * f6), x3 += M6 >>> 13, M6 &= 8191;
    let D3 = x3 + S5 * f6 + L4 * l4 + U5 * u3 + _2 * a2 + j4 * c3;
    x3 = D3 >>> 13, D3 &= 8191, D3 += g2 * (5 * d4) + w4 * (5 * p4) + b6 * (5 * E6) + I4 * (5 * y5) + R5 * (5 * h5), x3 += D3 >>> 13, D3 &= 8191;
    let z3 = x3 + S5 * h5 + L4 * f6 + U5 * l4 + _2 * u3 + j4 * a2;
    x3 = z3 >>> 13, z3 &= 8191, z3 += g2 * c3 + w4 * (5 * d4) + b6 * (5 * p4) + I4 * (5 * E6) + R5 * (5 * y5), x3 += z3 >>> 13, z3 &= 8191;
    let Z3 = x3 + S5 * y5 + L4 * h5 + U5 * f6 + _2 * l4 + j4 * u3;
    x3 = Z3 >>> 13, Z3 &= 8191, Z3 += g2 * a2 + w4 * c3 + b6 * (5 * d4) + I4 * (5 * p4) + R5 * (5 * E6), x3 += Z3 >>> 13, Z3 &= 8191;
    let st3 = x3 + S5 * E6 + L4 * y5 + U5 * h5 + _2 * f6 + j4 * l4;
    x3 = st3 >>> 13, st3 &= 8191, st3 += g2 * u3 + w4 * a2 + b6 * c3 + I4 * (5 * d4) + R5 * (5 * p4), x3 += st3 >>> 13, st3 &= 8191;
    let W5 = x3 + S5 * p4 + L4 * E6 + U5 * y5 + _2 * h5 + j4 * f6;
    x3 = W5 >>> 13, W5 &= 8191, W5 += g2 * l4 + w4 * u3 + b6 * a2 + I4 * c3 + R5 * (5 * d4), x3 += W5 >>> 13, W5 &= 8191;
    let J5 = x3 + S5 * d4 + L4 * p4 + U5 * E6 + _2 * y5 + j4 * h5;
    x3 = J5 >>> 13, J5 &= 8191, J5 += g2 * f6 + w4 * l4 + b6 * u3 + I4 * a2 + R5 * c3, x3 += J5 >>> 13, J5 &= 8191, x3 = (x3 << 2) + x3 | 0, x3 = x3 + C6 | 0, C6 = x3 & 8191, x3 = x3 >>> 13, P5 += x3, i3[0] = C6, i3[1] = P5, i3[2] = k7, i3[3] = M6, i3[4] = D3, i3[5] = z3, i3[6] = Z3, i3[7] = st3, i3[8] = W5, i3[9] = J5;
  }
  finalize() {
    const { h: e, pad: n2 } = this, r2 = new Uint16Array(10);
    let o2 = e[1] >>> 13;
    e[1] &= 8191;
    for (let c3 = 2; c3 < 10; c3++) e[c3] += o2, o2 = e[c3] >>> 13, e[c3] &= 8191;
    e[0] += o2 * 5, o2 = e[0] >>> 13, e[0] &= 8191, e[1] += o2, o2 = e[1] >>> 13, e[1] &= 8191, e[2] += o2, r2[0] = e[0] + 5, o2 = r2[0] >>> 13, r2[0] &= 8191;
    for (let c3 = 1; c3 < 10; c3++) r2[c3] = e[c3] + o2, o2 = r2[c3] >>> 13, r2[c3] &= 8191;
    r2[9] -= 8192;
    let i3 = (o2 ^ 1) - 1;
    for (let c3 = 0; c3 < 10; c3++) r2[c3] &= i3;
    i3 = ~i3;
    for (let c3 = 0; c3 < 10; c3++) e[c3] = e[c3] & i3 | r2[c3];
    e[0] = (e[0] | e[1] << 13) & 65535, e[1] = (e[1] >>> 3 | e[2] << 10) & 65535, e[2] = (e[2] >>> 6 | e[3] << 7) & 65535, e[3] = (e[3] >>> 9 | e[4] << 4) & 65535, e[4] = (e[4] >>> 12 | e[5] << 1 | e[6] << 14) & 65535, e[5] = (e[6] >>> 2 | e[7] << 11) & 65535, e[6] = (e[7] >>> 5 | e[8] << 8) & 65535, e[7] = (e[8] >>> 8 | e[9] << 5) & 65535;
    let s = e[0] + n2[0];
    e[0] = s & 65535;
    for (let c3 = 1; c3 < 8; c3++) s = (e[c3] + n2[c3] | 0) + (s >>> 16) | 0, e[c3] = s & 65535;
    jt2(r2);
  }
  update(e) {
    Or2(this);
    const { buffer: n2, blockLen: r2 } = this;
    e = ze2(e);
    const o2 = e.length;
    for (let i3 = 0; i3 < o2; ) {
      const s = Math.min(r2 - this.pos, o2 - i3);
      if (s === r2) {
        for (; r2 <= o2 - i3; i3 += r2) this.process(e, i3);
        continue;
      }
      n2.set(e.subarray(i3, i3 + s), this.pos), this.pos += s, i3 += s, this.pos === r2 && (this.process(n2, 0, false), this.pos = 0);
    }
    return this;
  }
  destroy() {
    jt2(this.h, this.r, this.buffer, this.pad);
  }
  digestInto(e) {
    Or2(this), ps(e, this), this.finished = true;
    const { buffer: n2, h: r2 } = this;
    let { pos: o2 } = this;
    if (o2) {
      for (n2[o2++] = 1; o2 < 16; o2++) n2[o2] = 0;
      this.process(n2, 0, true);
    }
    this.finalize();
    let i3 = 0;
    for (let s = 0; s < 8; s++) e[i3++] = r2[s] >>> 0, e[i3++] = r2[s] >>> 8;
    return e;
  }
  digest() {
    const { buffer: e, outputLen: n2 } = this;
    this.digestInto(e);
    const r2 = e.slice(0, n2);
    return this.destroy(), r2;
  }
};
function Ts(t) {
  const e = (r2, o2) => t(o2).update(ze2(r2)).digest(), n2 = t(new Uint8Array(32));
  return e.outputLen = n2.outputLen, e.blockLen = n2.blockLen, e.create = (r2) => t(r2), e;
}
var Rs = Ts((t) => new Us(t));
function _s(t, e, n2, r2, o2, i3 = 20) {
  let s = t[0], c3 = t[1], a2 = t[2], u3 = t[3], l4 = e[0], f6 = e[1], h5 = e[2], y5 = e[3], E6 = e[4], p4 = e[5], d4 = e[6], v6 = e[7], m2 = o2, O4 = n2[0], N4 = n2[1], $5 = n2[2], B4 = s, A5 = c3, T3 = a2, S5 = u3, L4 = l4, U5 = f6, _2 = h5, j4 = y5, g2 = E6, w4 = p4, b6 = d4, I4 = v6, R5 = m2, x3 = O4, C6 = N4, P5 = $5;
  for (let M6 = 0; M6 < i3; M6 += 2) B4 = B4 + L4 | 0, R5 = V(R5 ^ B4, 16), g2 = g2 + R5 | 0, L4 = V(L4 ^ g2, 12), B4 = B4 + L4 | 0, R5 = V(R5 ^ B4, 8), g2 = g2 + R5 | 0, L4 = V(L4 ^ g2, 7), A5 = A5 + U5 | 0, x3 = V(x3 ^ A5, 16), w4 = w4 + x3 | 0, U5 = V(U5 ^ w4, 12), A5 = A5 + U5 | 0, x3 = V(x3 ^ A5, 8), w4 = w4 + x3 | 0, U5 = V(U5 ^ w4, 7), T3 = T3 + _2 | 0, C6 = V(C6 ^ T3, 16), b6 = b6 + C6 | 0, _2 = V(_2 ^ b6, 12), T3 = T3 + _2 | 0, C6 = V(C6 ^ T3, 8), b6 = b6 + C6 | 0, _2 = V(_2 ^ b6, 7), S5 = S5 + j4 | 0, P5 = V(P5 ^ S5, 16), I4 = I4 + P5 | 0, j4 = V(j4 ^ I4, 12), S5 = S5 + j4 | 0, P5 = V(P5 ^ S5, 8), I4 = I4 + P5 | 0, j4 = V(j4 ^ I4, 7), B4 = B4 + U5 | 0, P5 = V(P5 ^ B4, 16), b6 = b6 + P5 | 0, U5 = V(U5 ^ b6, 12), B4 = B4 + U5 | 0, P5 = V(P5 ^ B4, 8), b6 = b6 + P5 | 0, U5 = V(U5 ^ b6, 7), A5 = A5 + _2 | 0, R5 = V(R5 ^ A5, 16), I4 = I4 + R5 | 0, _2 = V(_2 ^ I4, 12), A5 = A5 + _2 | 0, R5 = V(R5 ^ A5, 8), I4 = I4 + R5 | 0, _2 = V(_2 ^ I4, 7), T3 = T3 + j4 | 0, x3 = V(x3 ^ T3, 16), g2 = g2 + x3 | 0, j4 = V(j4 ^ g2, 12), T3 = T3 + j4 | 0, x3 = V(x3 ^ T3, 8), g2 = g2 + x3 | 0, j4 = V(j4 ^ g2, 7), S5 = S5 + L4 | 0, C6 = V(C6 ^ S5, 16), w4 = w4 + C6 | 0, L4 = V(L4 ^ w4, 12), S5 = S5 + L4 | 0, C6 = V(C6 ^ S5, 8), w4 = w4 + C6 | 0, L4 = V(L4 ^ w4, 7);
  let k7 = 0;
  r2[k7++] = s + B4 | 0, r2[k7++] = c3 + A5 | 0, r2[k7++] = a2 + T3 | 0, r2[k7++] = u3 + S5 | 0, r2[k7++] = l4 + L4 | 0, r2[k7++] = f6 + U5 | 0, r2[k7++] = h5 + _2 | 0, r2[k7++] = y5 + j4 | 0, r2[k7++] = E6 + g2 | 0, r2[k7++] = p4 + w4 | 0, r2[k7++] = d4 + b6 | 0, r2[k7++] = v6 + I4 | 0, r2[k7++] = m2 + R5 | 0, r2[k7++] = O4 + x3 | 0, r2[k7++] = N4 + C6 | 0, r2[k7++] = $5 + P5 | 0;
}
var $s = Ns(_s, { counterRight: false, counterLength: 4, allowShortKeys: false });
var Ls = new Uint8Array(16);
var Rr2 = (t, e) => {
  t.update(e);
  const n2 = e.length % 16;
  n2 && t.update(Ls.subarray(n2));
};
var js = new Uint8Array(32);
function _r2(t, e, n2, r2, o2) {
  const i3 = t(e, n2, js), s = Rs.create(i3);
  o2 && Rr2(s, o2), Rr2(s, r2);
  const c3 = new Uint8Array(16), a2 = gs(c3);
  Ir2(a2, 0, BigInt(o2 ? o2.length : 0), true), Ir2(a2, 8, BigInt(r2.length), true), s.update(c3);
  const u3 = s.digest();
  return jt2(i3, c3), u3;
}
var Cs = (t) => (e, n2, r2) => ({ encrypt(i3, s) {
  const c3 = i3.length;
  s = Br2(c3 + 16, s, false), s.set(i3);
  const a2 = s.subarray(0, -16);
  t(e, n2, a2, a2, 1);
  const u3 = _r2(t, e, n2, a2, r2);
  return s.set(u3, c3), jt2(u3), s;
}, decrypt(i3, s) {
  s = Br2(i3.length - 16, s, false);
  const c3 = i3.subarray(0, -16), a2 = i3.subarray(-16), u3 = _r2(t, e, n2, c3, r2);
  if (!bs(a2, u3)) throw new Error("invalid tag");
  return s.set(i3.subarray(0, -16)), t(e, n2, s, s, 1), jt2(u3), s;
} });
var $r2 = Es({ blockSize: 64, nonceLength: 12, tagLength: 16 }, Cs($s));
var Lr2 = class extends ke2 {
  constructor(e, n2) {
    super(), this.finished = false, this.destroyed = false, Ce2(e);
    const r2 = $t2(n2);
    if (this.iHash = e.create(), typeof this.iHash.update != "function") throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o2 = this.blockLen, i3 = new Uint8Array(o2);
    i3.set(r2.length > o2 ? e.create().update(r2).digest() : r2);
    for (let s = 0; s < i3.length; s++) i3[s] ^= 54;
    this.iHash.update(i3), this.oHash = e.create();
    for (let s = 0; s < i3.length; s++) i3[s] ^= 106;
    this.oHash.update(i3), i3.fill(0);
  }
  update(e) {
    return Rt2(this), this.iHash.update(e), this;
  }
  digestInto(e) {
    Rt2(this), Xt2(e, this.outputLen), this.finished = true, this.iHash.digestInto(e), this.oHash.update(e), this.oHash.digestInto(e), this.destroy();
  }
  digest() {
    const e = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e), e;
  }
  _cloneInto(e) {
    e || (e = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n2, iHash: r2, finished: o2, destroyed: i3, blockLen: s, outputLen: c3 } = this;
    return e = e, e.finished = o2, e.destroyed = i3, e.blockLen = s, e.outputLen = c3, e.oHash = n2._cloneInto(e.oHash), e.iHash = r2._cloneInto(e.iHash), e;
  }
  destroy() {
    this.destroyed = true, this.oHash.destroy(), this.iHash.destroy();
  }
};
var ye2 = (t, e, n2) => new Lr2(t, e).update(n2).digest();
ye2.create = (t, e) => new Lr2(t, e);
function Ps(t, e, n2) {
  return Ce2(t), n2 === void 0 && (n2 = new Uint8Array(t.outputLen)), ye2(t, $t2(n2), $t2(e));
}
var Ge2 = new Uint8Array([0]);
var jr2 = new Uint8Array();
function ks(t, e, n2, r2 = 32) {
  if (Ce2(t), Wt2(r2), r2 > 255 * t.outputLen) throw new Error("Length should be <= 255*HashLen");
  const o2 = Math.ceil(r2 / t.outputLen);
  n2 === void 0 && (n2 = jr2);
  const i3 = new Uint8Array(o2 * t.outputLen), s = ye2.create(t, e), c3 = s._cloneInto(), a2 = new Uint8Array(s.outputLen);
  for (let u3 = 0; u3 < o2; u3++) Ge2[0] = u3 + 1, c3.update(u3 === 0 ? jr2 : a2).update(n2).update(Ge2).digestInto(a2), i3.set(a2, t.outputLen * u3), s._cloneInto(c3);
  return s.destroy(), c3.destroy(), a2.fill(0), Ge2.fill(0), i3.slice(0, r2);
}
var Vs = (t, e, n2, r2, o2) => ks(t, Ps(t, e, n2), r2, o2);
function Ms(t, e, n2, r2) {
  if (typeof t.setBigUint64 == "function") return t.setBigUint64(e, n2, r2);
  const o2 = BigInt(32), i3 = BigInt(4294967295), s = Number(n2 >> o2 & i3), c3 = Number(n2 & i3), a2 = r2 ? 4 : 0, u3 = r2 ? 0 : 4;
  t.setUint32(e + a2, s, r2), t.setUint32(e + u3, c3, r2);
}
function Ds(t, e, n2) {
  return t & e ^ ~t & n2;
}
function Hs(t, e, n2) {
  return t & e ^ t & n2 ^ e & n2;
}
var qs = class extends ke2 {
  constructor(e, n2, r2, o2) {
    super(), this.blockLen = e, this.outputLen = n2, this.padOffset = r2, this.isLE = o2, this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.buffer = new Uint8Array(e), this.view = Pe2(this.buffer);
  }
  update(e) {
    Rt2(this);
    const { view: n2, buffer: r2, blockLen: o2 } = this;
    e = $t2(e);
    const i3 = e.length;
    for (let s = 0; s < i3; ) {
      const c3 = Math.min(o2 - this.pos, i3 - s);
      if (c3 === o2) {
        const a2 = Pe2(e);
        for (; o2 <= i3 - s; s += o2) this.process(a2, s);
        continue;
      }
      r2.set(e.subarray(s, s + c3), this.pos), this.pos += c3, s += c3, this.pos === o2 && (this.process(n2, 0), this.pos = 0);
    }
    return this.length += e.length, this.roundClean(), this;
  }
  digestInto(e) {
    Rt2(this), Gn2(e, this), this.finished = true;
    const { buffer: n2, view: r2, blockLen: o2, isLE: i3 } = this;
    let { pos: s } = this;
    n2[s++] = 128, this.buffer.subarray(s).fill(0), this.padOffset > o2 - s && (this.process(r2, 0), s = 0);
    for (let f6 = s; f6 < o2; f6++) n2[f6] = 0;
    Ms(r2, o2 - 8, BigInt(this.length * 8), i3), this.process(r2, 0);
    const c3 = Pe2(e), a2 = this.outputLen;
    if (a2 % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u3 = a2 / 4, l4 = this.get();
    if (u3 > l4.length) throw new Error("_sha2: outputLen bigger than state");
    for (let f6 = 0; f6 < u3; f6++) c3.setUint32(4 * f6, l4[f6], i3);
  }
  digest() {
    const { buffer: e, outputLen: n2 } = this;
    this.digestInto(e);
    const r2 = e.slice(0, n2);
    return this.destroy(), r2;
  }
  _cloneInto(e) {
    e || (e = new this.constructor()), e.set(...this.get());
    const { blockLen: n2, buffer: r2, length: o2, finished: i3, destroyed: s, pos: c3 } = this;
    return e.length = o2, e.pos = c3, e.finished = i3, e.destroyed = s, o2 % n2 && e.buffer.set(r2), e;
  }
};
var Ks = new Uint32Array([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
var wt2 = new Uint32Array([1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]);
var bt2 = new Uint32Array(64);
var Fs = class extends qs {
  constructor() {
    super(64, 32, 8, false), this.A = wt2[0] | 0, this.B = wt2[1] | 0, this.C = wt2[2] | 0, this.D = wt2[3] | 0, this.E = wt2[4] | 0, this.F = wt2[5] | 0, this.G = wt2[6] | 0, this.H = wt2[7] | 0;
  }
  get() {
    const { A: e, B: n2, C: r2, D: o2, E: i3, F: s, G: c3, H: a2 } = this;
    return [e, n2, r2, o2, i3, s, c3, a2];
  }
  set(e, n2, r2, o2, i3, s, c3, a2) {
    this.A = e | 0, this.B = n2 | 0, this.C = r2 | 0, this.D = o2 | 0, this.E = i3 | 0, this.F = s | 0, this.G = c3 | 0, this.H = a2 | 0;
  }
  process(e, n2) {
    for (let f6 = 0; f6 < 16; f6++, n2 += 4) bt2[f6] = e.getUint32(n2, false);
    for (let f6 = 16; f6 < 64; f6++) {
      const h5 = bt2[f6 - 15], y5 = bt2[f6 - 2], E6 = ct2(h5, 7) ^ ct2(h5, 18) ^ h5 >>> 3, p4 = ct2(y5, 17) ^ ct2(y5, 19) ^ y5 >>> 10;
      bt2[f6] = p4 + bt2[f6 - 7] + E6 + bt2[f6 - 16] | 0;
    }
    let { A: r2, B: o2, C: i3, D: s, E: c3, F: a2, G: u3, H: l4 } = this;
    for (let f6 = 0; f6 < 64; f6++) {
      const h5 = ct2(c3, 6) ^ ct2(c3, 11) ^ ct2(c3, 25), y5 = l4 + h5 + Ds(c3, a2, u3) + Ks[f6] + bt2[f6] | 0, p4 = (ct2(r2, 2) ^ ct2(r2, 13) ^ ct2(r2, 22)) + Hs(r2, o2, i3) | 0;
      l4 = u3, u3 = a2, a2 = c3, c3 = s + y5 | 0, s = i3, i3 = o2, o2 = r2, r2 = y5 + p4 | 0;
    }
    r2 = r2 + this.A | 0, o2 = o2 + this.B | 0, i3 = i3 + this.C | 0, s = s + this.D | 0, c3 = c3 + this.E | 0, a2 = a2 + this.F | 0, u3 = u3 + this.G | 0, l4 = l4 + this.H | 0, this.set(r2, o2, i3, s, c3, a2, u3, l4);
  }
  roundClean() {
    bt2.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
};
var Qt2 = Qn2(() => new Fs());
var me2 = BigInt(0);
var we2 = BigInt(1);
var zs = BigInt(2);
function St2(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function te2(t) {
  if (!St2(t)) throw new Error("Uint8Array expected");
}
function Ct(t, e) {
  if (typeof e != "boolean") throw new Error(t + " boolean expected, got " + e);
}
var Zs = Array.from({ length: 256 }, (t, e) => e.toString(16).padStart(2, "0"));
function Pt2(t) {
  te2(t);
  let e = "";
  for (let n2 = 0; n2 < t.length; n2++) e += Zs[t[n2]];
  return e;
}
function kt2(t) {
  const e = t.toString(16);
  return e.length & 1 ? "0" + e : e;
}
function We2(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  return t === "" ? me2 : BigInt("0x" + t);
}
var ut2 = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function Cr2(t) {
  if (t >= ut2._0 && t <= ut2._9) return t - ut2._0;
  if (t >= ut2.A && t <= ut2.F) return t - (ut2.A - 10);
  if (t >= ut2.a && t <= ut2.f) return t - (ut2.a - 10);
}
function Vt2(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  const e = t.length, n2 = e / 2;
  if (e % 2) throw new Error("hex string expected, got unpadded hex of length " + e);
  const r2 = new Uint8Array(n2);
  for (let o2 = 0, i3 = 0; o2 < n2; o2++, i3 += 2) {
    const s = Cr2(t.charCodeAt(i3)), c3 = Cr2(t.charCodeAt(i3 + 1));
    if (s === void 0 || c3 === void 0) {
      const a2 = t[i3] + t[i3 + 1];
      throw new Error('hex string expected, got non-hex character "' + a2 + '" at index ' + i3);
    }
    r2[o2] = s * 16 + c3;
  }
  return r2;
}
function Ot2(t) {
  return We2(Pt2(t));
}
function ee(t) {
  return te2(t), We2(Pt2(Uint8Array.from(t).reverse()));
}
function Mt2(t, e) {
  return Vt2(t.toString(16).padStart(e * 2, "0"));
}
function be2(t, e) {
  return Mt2(t, e).reverse();
}
function Ys(t) {
  return Vt2(kt2(t));
}
function et(t, e, n2) {
  let r2;
  if (typeof e == "string") try {
    r2 = Vt2(e);
  } catch (i3) {
    throw new Error(t + " must be hex string or Uint8Array, cause: " + i3);
  }
  else if (St2(e)) r2 = Uint8Array.from(e);
  else throw new Error(t + " must be hex string or Uint8Array");
  const o2 = r2.length;
  if (typeof n2 == "number" && o2 !== n2) throw new Error(t + " of length " + n2 + " expected, got " + o2);
  return r2;
}
function ne(...t) {
  let e = 0;
  for (let r2 = 0; r2 < t.length; r2++) {
    const o2 = t[r2];
    te2(o2), e += o2.length;
  }
  const n2 = new Uint8Array(e);
  for (let r2 = 0, o2 = 0; r2 < t.length; r2++) {
    const i3 = t[r2];
    n2.set(i3, o2), o2 += i3.length;
  }
  return n2;
}
function Gs(t, e) {
  if (t.length !== e.length) return false;
  let n2 = 0;
  for (let r2 = 0; r2 < t.length; r2++) n2 |= t[r2] ^ e[r2];
  return n2 === 0;
}
function Ws(t) {
  if (typeof t != "string") throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t));
}
var Xe2 = (t) => typeof t == "bigint" && me2 <= t;
function Ee2(t, e, n2) {
  return Xe2(t) && Xe2(e) && Xe2(n2) && e <= t && t < n2;
}
function ft2(t, e, n2, r2) {
  if (!Ee2(e, n2, r2)) throw new Error("expected valid " + t + ": " + n2 + " <= n < " + r2 + ", got " + e);
}
function Pr2(t) {
  let e;
  for (e = 0; t > me2; t >>= we2, e += 1) ;
  return e;
}
function Xs(t, e) {
  return t >> BigInt(e) & we2;
}
function Js(t, e, n2) {
  return t | (n2 ? we2 : me2) << BigInt(e);
}
var Je2 = (t) => (zs << BigInt(t - 1)) - we2;
var Qe2 = (t) => new Uint8Array(t);
var kr2 = (t) => Uint8Array.from(t);
function Vr2(t, e, n2) {
  if (typeof t != "number" || t < 2) throw new Error("hashLen must be a number");
  if (typeof e != "number" || e < 2) throw new Error("qByteLen must be a number");
  if (typeof n2 != "function") throw new Error("hmacFn must be a function");
  let r2 = Qe2(t), o2 = Qe2(t), i3 = 0;
  const s = () => {
    r2.fill(1), o2.fill(0), i3 = 0;
  }, c3 = (...f6) => n2(o2, r2, ...f6), a2 = (f6 = Qe2()) => {
    o2 = c3(kr2([0]), f6), r2 = c3(), f6.length !== 0 && (o2 = c3(kr2([1]), f6), r2 = c3());
  }, u3 = () => {
    if (i3++ >= 1e3) throw new Error("drbg: tried 1000 values");
    let f6 = 0;
    const h5 = [];
    for (; f6 < e; ) {
      r2 = c3();
      const y5 = r2.slice();
      h5.push(y5), f6 += r2.length;
    }
    return ne(...h5);
  };
  return (f6, h5) => {
    s(), a2(f6);
    let y5;
    for (; !(y5 = h5(u3())); ) a2();
    return s(), y5;
  };
}
var Qs = { bigint: (t) => typeof t == "bigint", function: (t) => typeof t == "function", boolean: (t) => typeof t == "boolean", string: (t) => typeof t == "string", stringOrUint8Array: (t) => typeof t == "string" || St2(t), isSafeInteger: (t) => Number.isSafeInteger(t), array: (t) => Array.isArray(t), field: (t, e) => e.Fp.isValid(t), hash: (t) => typeof t == "function" && Number.isSafeInteger(t.outputLen) };
function Dt2(t, e, n2 = {}) {
  const r2 = (o2, i3, s) => {
    const c3 = Qs[i3];
    if (typeof c3 != "function") throw new Error("invalid validator function");
    const a2 = t[o2];
    if (!(s && a2 === void 0) && !c3(a2, t)) throw new Error("param " + String(o2) + " is invalid. Expected " + i3 + ", got " + a2);
  };
  for (const [o2, i3] of Object.entries(e)) r2(o2, i3, false);
  for (const [o2, i3] of Object.entries(n2)) r2(o2, i3, true);
  return t;
}
var tc = () => {
  throw new Error("not implemented");
};
function tn(t) {
  const e = /* @__PURE__ */ new WeakMap();
  return (n2, ...r2) => {
    const o2 = e.get(n2);
    if (o2 !== void 0) return o2;
    const i3 = t(n2, ...r2);
    return e.set(n2, i3), i3;
  };
}
var ec = Object.freeze({ __proto__: null, isBytes: St2, abytes: te2, abool: Ct, bytesToHex: Pt2, numberToHexUnpadded: kt2, hexToNumber: We2, hexToBytes: Vt2, bytesToNumberBE: Ot2, bytesToNumberLE: ee, numberToBytesBE: Mt2, numberToBytesLE: be2, numberToVarBytesBE: Ys, ensureBytes: et, concatBytes: ne, equalBytes: Gs, utf8ToBytes: Ws, inRange: Ee2, aInRange: ft2, bitLen: Pr2, bitGet: Xs, bitSet: Js, bitMask: Je2, createHmacDrbg: Vr2, validateObject: Dt2, notImplemented: tc, memoized: tn });
var q = BigInt(0);
var H2 = BigInt(1);
var At = BigInt(2);
var nc = BigInt(3);
var en2 = BigInt(4);
var Mr2 = BigInt(5);
var Dr2 = BigInt(8);
function X(t, e) {
  const n2 = t % e;
  return n2 >= q ? n2 : e + n2;
}
function Hr2(t, e, n2) {
  if (e < q) throw new Error("invalid exponent, negatives unsupported");
  if (n2 <= q) throw new Error("invalid modulus");
  if (n2 === H2) return q;
  let r2 = H2;
  for (; e > q; ) e & H2 && (r2 = r2 * t % n2), t = t * t % n2, e >>= H2;
  return r2;
}
function it2(t, e, n2) {
  let r2 = t;
  for (; e-- > q; ) r2 *= r2, r2 %= n2;
  return r2;
}
function nn2(t, e) {
  if (t === q) throw new Error("invert: expected non-zero number");
  if (e <= q) throw new Error("invert: expected positive modulus, got " + e);
  let n2 = X(t, e), r2 = e, o2 = q, i3 = H2;
  for (; n2 !== q; ) {
    const c3 = r2 / n2, a2 = r2 % n2, u3 = o2 - i3 * c3;
    r2 = n2, n2 = a2, o2 = i3, i3 = u3;
  }
  if (r2 !== H2) throw new Error("invert: does not exist");
  return X(o2, e);
}
function rc(t) {
  const e = (t - H2) / At;
  let n2, r2, o2;
  for (n2 = t - H2, r2 = 0; n2 % At === q; n2 /= At, r2++) ;
  for (o2 = At; o2 < t && Hr2(o2, e, t) !== t - H2; o2++) if (o2 > 1e3) throw new Error("Cannot find square root: likely non-prime P");
  if (r2 === 1) {
    const s = (t + H2) / en2;
    return function(a2, u3) {
      const l4 = a2.pow(u3, s);
      if (!a2.eql(a2.sqr(l4), u3)) throw new Error("Cannot find square root");
      return l4;
    };
  }
  const i3 = (n2 + H2) / At;
  return function(c3, a2) {
    if (c3.pow(a2, e) === c3.neg(c3.ONE)) throw new Error("Cannot find square root");
    let u3 = r2, l4 = c3.pow(c3.mul(c3.ONE, o2), n2), f6 = c3.pow(a2, i3), h5 = c3.pow(a2, n2);
    for (; !c3.eql(h5, c3.ONE); ) {
      if (c3.eql(h5, c3.ZERO)) return c3.ZERO;
      let y5 = 1;
      for (let p4 = c3.sqr(h5); y5 < u3 && !c3.eql(p4, c3.ONE); y5++) p4 = c3.sqr(p4);
      const E6 = c3.pow(l4, H2 << BigInt(u3 - y5 - 1));
      l4 = c3.sqr(E6), f6 = c3.mul(f6, E6), h5 = c3.mul(h5, l4), u3 = y5;
    }
    return f6;
  };
}
function oc(t) {
  if (t % en2 === nc) {
    const e = (t + H2) / en2;
    return function(r2, o2) {
      const i3 = r2.pow(o2, e);
      if (!r2.eql(r2.sqr(i3), o2)) throw new Error("Cannot find square root");
      return i3;
    };
  }
  if (t % Dr2 === Mr2) {
    const e = (t - Mr2) / Dr2;
    return function(r2, o2) {
      const i3 = r2.mul(o2, At), s = r2.pow(i3, e), c3 = r2.mul(o2, s), a2 = r2.mul(r2.mul(c3, At), s), u3 = r2.mul(c3, r2.sub(a2, r2.ONE));
      if (!r2.eql(r2.sqr(u3), o2)) throw new Error("Cannot find square root");
      return u3;
    };
  }
  return rc(t);
}
var ic = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function sc(t) {
  const e = { ORDER: "bigint", MASK: "bigint", BYTES: "isSafeInteger", BITS: "isSafeInteger" }, n2 = ic.reduce((r2, o2) => (r2[o2] = "function", r2), e);
  return Dt2(t, n2);
}
function cc(t, e, n2) {
  if (n2 < q) throw new Error("invalid exponent, negatives unsupported");
  if (n2 === q) return t.ONE;
  if (n2 === H2) return e;
  let r2 = t.ONE, o2 = e;
  for (; n2 > q; ) n2 & H2 && (r2 = t.mul(r2, o2)), o2 = t.sqr(o2), n2 >>= H2;
  return r2;
}
function ac(t, e) {
  const n2 = new Array(e.length), r2 = e.reduce((i3, s, c3) => t.is0(s) ? i3 : (n2[c3] = i3, t.mul(i3, s)), t.ONE), o2 = t.inv(r2);
  return e.reduceRight((i3, s, c3) => t.is0(s) ? i3 : (n2[c3] = t.mul(i3, n2[c3]), t.mul(i3, s)), o2), n2;
}
function qr2(t, e) {
  const n2 = e !== void 0 ? e : t.toString(2).length, r2 = Math.ceil(n2 / 8);
  return { nBitLength: n2, nByteLength: r2 };
}
function Kr2(t, e, n2 = false, r2 = {}) {
  if (t <= q) throw new Error("invalid field: expected ORDER > 0, got " + t);
  const { nBitLength: o2, nByteLength: i3 } = qr2(t, e);
  if (i3 > 2048) throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let s;
  const c3 = Object.freeze({ ORDER: t, isLE: n2, BITS: o2, BYTES: i3, MASK: Je2(o2), ZERO: q, ONE: H2, create: (a2) => X(a2, t), isValid: (a2) => {
    if (typeof a2 != "bigint") throw new Error("invalid field element: expected bigint, got " + typeof a2);
    return q <= a2 && a2 < t;
  }, is0: (a2) => a2 === q, isOdd: (a2) => (a2 & H2) === H2, neg: (a2) => X(-a2, t), eql: (a2, u3) => a2 === u3, sqr: (a2) => X(a2 * a2, t), add: (a2, u3) => X(a2 + u3, t), sub: (a2, u3) => X(a2 - u3, t), mul: (a2, u3) => X(a2 * u3, t), pow: (a2, u3) => cc(c3, a2, u3), div: (a2, u3) => X(a2 * nn2(u3, t), t), sqrN: (a2) => a2 * a2, addN: (a2, u3) => a2 + u3, subN: (a2, u3) => a2 - u3, mulN: (a2, u3) => a2 * u3, inv: (a2) => nn2(a2, t), sqrt: r2.sqrt || ((a2) => (s || (s = oc(t)), s(c3, a2))), invertBatch: (a2) => ac(c3, a2), cmov: (a2, u3, l4) => l4 ? u3 : a2, toBytes: (a2) => n2 ? be2(a2, i3) : Mt2(a2, i3), fromBytes: (a2) => {
    if (a2.length !== i3) throw new Error("Field.fromBytes: expected " + i3 + " bytes, got " + a2.length);
    return n2 ? ee(a2) : Ot2(a2);
  } });
  return Object.freeze(c3);
}
function Fr2(t) {
  if (typeof t != "bigint") throw new Error("field order must be bigint");
  const e = t.toString(2).length;
  return Math.ceil(e / 8);
}
function zr2(t) {
  const e = Fr2(t);
  return e + Math.ceil(e / 2);
}
function uc(t, e, n2 = false) {
  const r2 = t.length, o2 = Fr2(e), i3 = zr2(e);
  if (r2 < 16 || r2 < i3 || r2 > 1024) throw new Error("expected " + i3 + "-1024 bytes of input, got " + r2);
  const s = n2 ? ee(t) : Ot2(t), c3 = X(s, e - H2) + H2;
  return n2 ? be2(c3, o2) : Mt2(c3, o2);
}
var Zr2 = BigInt(0);
var ve2 = BigInt(1);
function rn2(t, e) {
  const n2 = e.negate();
  return t ? n2 : e;
}
function Yr2(t, e) {
  if (!Number.isSafeInteger(t) || t <= 0 || t > e) throw new Error("invalid window size, expected [1.." + e + "], got W=" + t);
}
function on2(t, e) {
  Yr2(t, e);
  const n2 = Math.ceil(e / t) + 1, r2 = 2 ** (t - 1);
  return { windows: n2, windowSize: r2 };
}
function fc(t, e) {
  if (!Array.isArray(t)) throw new Error("array expected");
  t.forEach((n2, r2) => {
    if (!(n2 instanceof e)) throw new Error("invalid point at index " + r2);
  });
}
function lc(t, e) {
  if (!Array.isArray(t)) throw new Error("array of scalars expected");
  t.forEach((n2, r2) => {
    if (!e.isValid(n2)) throw new Error("invalid scalar at index " + r2);
  });
}
var sn2 = /* @__PURE__ */ new WeakMap();
var Gr2 = /* @__PURE__ */ new WeakMap();
function cn(t) {
  return Gr2.get(t) || 1;
}
function dc(t, e) {
  return { constTimeNegate: rn2, hasPrecomputes(n2) {
    return cn(n2) !== 1;
  }, unsafeLadder(n2, r2, o2 = t.ZERO) {
    let i3 = n2;
    for (; r2 > Zr2; ) r2 & ve2 && (o2 = o2.add(i3)), i3 = i3.double(), r2 >>= ve2;
    return o2;
  }, precomputeWindow(n2, r2) {
    const { windows: o2, windowSize: i3 } = on2(r2, e), s = [];
    let c3 = n2, a2 = c3;
    for (let u3 = 0; u3 < o2; u3++) {
      a2 = c3, s.push(a2);
      for (let l4 = 1; l4 < i3; l4++) a2 = a2.add(c3), s.push(a2);
      c3 = a2.double();
    }
    return s;
  }, wNAF(n2, r2, o2) {
    const { windows: i3, windowSize: s } = on2(n2, e);
    let c3 = t.ZERO, a2 = t.BASE;
    const u3 = BigInt(2 ** n2 - 1), l4 = 2 ** n2, f6 = BigInt(n2);
    for (let h5 = 0; h5 < i3; h5++) {
      const y5 = h5 * s;
      let E6 = Number(o2 & u3);
      o2 >>= f6, E6 > s && (E6 -= l4, o2 += ve2);
      const p4 = y5, d4 = y5 + Math.abs(E6) - 1, v6 = h5 % 2 !== 0, m2 = E6 < 0;
      E6 === 0 ? a2 = a2.add(rn2(v6, r2[p4])) : c3 = c3.add(rn2(m2, r2[d4]));
    }
    return { p: c3, f: a2 };
  }, wNAFUnsafe(n2, r2, o2, i3 = t.ZERO) {
    const { windows: s, windowSize: c3 } = on2(n2, e), a2 = BigInt(2 ** n2 - 1), u3 = 2 ** n2, l4 = BigInt(n2);
    for (let f6 = 0; f6 < s; f6++) {
      const h5 = f6 * c3;
      if (o2 === Zr2) break;
      let y5 = Number(o2 & a2);
      if (o2 >>= l4, y5 > c3 && (y5 -= u3, o2 += ve2), y5 === 0) continue;
      let E6 = r2[h5 + Math.abs(y5) - 1];
      y5 < 0 && (E6 = E6.negate()), i3 = i3.add(E6);
    }
    return i3;
  }, getPrecomputes(n2, r2, o2) {
    let i3 = sn2.get(r2);
    return i3 || (i3 = this.precomputeWindow(r2, n2), n2 !== 1 && sn2.set(r2, o2(i3))), i3;
  }, wNAFCached(n2, r2, o2) {
    const i3 = cn(n2);
    return this.wNAF(i3, this.getPrecomputes(i3, n2, o2), r2);
  }, wNAFCachedUnsafe(n2, r2, o2, i3) {
    const s = cn(n2);
    return s === 1 ? this.unsafeLadder(n2, r2, i3) : this.wNAFUnsafe(s, this.getPrecomputes(s, n2, o2), r2, i3);
  }, setWindowSize(n2, r2) {
    Yr2(r2, e), Gr2.set(n2, r2), sn2.delete(n2);
  } };
}
function hc(t, e, n2, r2) {
  if (fc(n2, t), lc(r2, e), n2.length !== r2.length) throw new Error("arrays of points and scalars must have equal length");
  const o2 = t.ZERO, i3 = Pr2(BigInt(n2.length)), s = i3 > 12 ? i3 - 3 : i3 > 4 ? i3 - 2 : i3 ? 2 : 1, c3 = (1 << s) - 1, a2 = new Array(c3 + 1).fill(o2), u3 = Math.floor((e.BITS - 1) / s) * s;
  let l4 = o2;
  for (let f6 = u3; f6 >= 0; f6 -= s) {
    a2.fill(o2);
    for (let y5 = 0; y5 < r2.length; y5++) {
      const E6 = r2[y5], p4 = Number(E6 >> BigInt(f6) & BigInt(c3));
      a2[p4] = a2[p4].add(n2[y5]);
    }
    let h5 = o2;
    for (let y5 = a2.length - 1, E6 = o2; y5 > 0; y5--) E6 = E6.add(a2[y5]), h5 = h5.add(E6);
    if (l4 = l4.add(h5), f6 !== 0) for (let y5 = 0; y5 < s; y5++) l4 = l4.double();
  }
  return l4;
}
function Wr2(t) {
  return sc(t.Fp), Dt2(t, { n: "bigint", h: "bigint", Gx: "field", Gy: "field" }, { nBitLength: "isSafeInteger", nByteLength: "isSafeInteger" }), Object.freeze({ ...qr2(t.n, t.nBitLength), ...t, p: t.Fp.ORDER });
}
BigInt(0), BigInt(1), BigInt(2), BigInt(8);
var Ht2 = BigInt(0);
var an = BigInt(1);
function pc(t) {
  return Dt2(t, { a: "bigint" }, { montgomeryBits: "isSafeInteger", nByteLength: "isSafeInteger", adjustScalarBytes: "function", domain: "function", powPminus2: "function", Gu: "bigint" }), Object.freeze({ ...t });
}
function gc(t) {
  const e = pc(t), { P: n2 } = e, r2 = (m2) => X(m2, n2), o2 = e.montgomeryBits, i3 = Math.ceil(o2 / 8), s = e.nByteLength, c3 = e.adjustScalarBytes || ((m2) => m2), a2 = e.powPminus2 || ((m2) => Hr2(m2, n2 - BigInt(2), n2));
  function u3(m2, O4, N4) {
    const $5 = r2(m2 * (O4 - N4));
    return O4 = r2(O4 - $5), N4 = r2(N4 + $5), [O4, N4];
  }
  const l4 = (e.a - BigInt(2)) / BigInt(4);
  function f6(m2, O4) {
    ft2("u", m2, Ht2, n2), ft2("scalar", O4, Ht2, n2);
    const N4 = O4, $5 = m2;
    let B4 = an, A5 = Ht2, T3 = m2, S5 = an, L4 = Ht2, U5;
    for (let j4 = BigInt(o2 - 1); j4 >= Ht2; j4--) {
      const g2 = N4 >> j4 & an;
      L4 ^= g2, U5 = u3(L4, B4, T3), B4 = U5[0], T3 = U5[1], U5 = u3(L4, A5, S5), A5 = U5[0], S5 = U5[1], L4 = g2;
      const w4 = B4 + A5, b6 = r2(w4 * w4), I4 = B4 - A5, R5 = r2(I4 * I4), x3 = b6 - R5, C6 = T3 + S5, P5 = T3 - S5, k7 = r2(P5 * w4), M6 = r2(C6 * I4), D3 = k7 + M6, z3 = k7 - M6;
      T3 = r2(D3 * D3), S5 = r2($5 * r2(z3 * z3)), B4 = r2(b6 * R5), A5 = r2(x3 * (b6 + r2(l4 * x3)));
    }
    U5 = u3(L4, B4, T3), B4 = U5[0], T3 = U5[1], U5 = u3(L4, A5, S5), A5 = U5[0], S5 = U5[1];
    const _2 = a2(A5);
    return r2(B4 * _2);
  }
  function h5(m2) {
    return be2(r2(m2), i3);
  }
  function y5(m2) {
    const O4 = et("u coordinate", m2, i3);
    return s === 32 && (O4[31] &= 127), ee(O4);
  }
  function E6(m2) {
    const O4 = et("scalar", m2), N4 = O4.length;
    if (N4 !== i3 && N4 !== s) {
      let $5 = "" + i3 + " or " + s;
      throw new Error("invalid scalar, expected " + $5 + " bytes, got " + N4);
    }
    return ee(c3(O4));
  }
  function p4(m2, O4) {
    const N4 = y5(O4), $5 = E6(m2), B4 = f6(N4, $5);
    if (B4 === Ht2) throw new Error("invalid private or public key received");
    return h5(B4);
  }
  const d4 = h5(e.Gu);
  function v6(m2) {
    return p4(m2, d4);
  }
  return { scalarMult: p4, scalarMultBase: v6, getSharedSecret: (m2, O4) => p4(m2, O4), getPublicKey: (m2) => v6(m2), utils: { randomPrivateKey: () => e.randomBytes(e.nByteLength) }, GuBytes: d4 };
}
var un = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
BigInt(0);
var yc = BigInt(1);
var Xr2 = BigInt(2);
var mc = BigInt(3);
var wc = BigInt(5);
BigInt(8);
function bc(t) {
  const e = BigInt(10), n2 = BigInt(20), r2 = BigInt(40), o2 = BigInt(80), i3 = un, c3 = t * t % i3 * t % i3, a2 = it2(c3, Xr2, i3) * c3 % i3, u3 = it2(a2, yc, i3) * t % i3, l4 = it2(u3, wc, i3) * u3 % i3, f6 = it2(l4, e, i3) * l4 % i3, h5 = it2(f6, n2, i3) * f6 % i3, y5 = it2(h5, r2, i3) * h5 % i3, E6 = it2(y5, o2, i3) * y5 % i3, p4 = it2(E6, o2, i3) * y5 % i3, d4 = it2(p4, e, i3) * l4 % i3;
  return { pow_p_5_8: it2(d4, Xr2, i3) * t % i3, b2: c3 };
}
function Ec(t) {
  return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;
}
var fn = gc({ P: un, a: BigInt(486662), montgomeryBits: 255, nByteLength: 32, Gu: BigInt(9), powPminus2: (t) => {
  const e = un, { pow_p_5_8: n2, b2: r2 } = bc(t);
  return X(it2(n2, mc, e) * r2, e);
}, adjustScalarBytes: Ec, randomBytes: Lt2 });
function Jr2(t) {
  t.lowS !== void 0 && Ct("lowS", t.lowS), t.prehash !== void 0 && Ct("prehash", t.prehash);
}
function vc(t) {
  const e = Wr2(t);
  Dt2(e, { a: "field", b: "field" }, { allowedPrivateKeyLengths: "array", wrapPrivateKey: "boolean", isTorsionFree: "function", clearCofactor: "function", allowInfinityPoint: "boolean", fromBytes: "function", toBytes: "function" });
  const { endo: n2, Fp: r2, a: o2 } = e;
  if (n2) {
    if (!r2.eql(o2, r2.ZERO)) throw new Error("invalid endomorphism, can only be defined for Koblitz curves that have a=0");
    if (typeof n2 != "object" || typeof n2.beta != "bigint" || typeof n2.splitScalar != "function") throw new Error("invalid endomorphism, expected beta: bigint and splitScalar: function");
  }
  return Object.freeze({ ...e });
}
var { bytesToNumberBE: xc, hexToBytes: Sc } = ec;
var Oc = class extends Error {
  constructor(e = "") {
    super(e);
  }
};
var lt2 = { Err: Oc, _tlv: { encode: (t, e) => {
  const { Err: n2 } = lt2;
  if (t < 0 || t > 256) throw new n2("tlv.encode: wrong tag");
  if (e.length & 1) throw new n2("tlv.encode: unpadded data");
  const r2 = e.length / 2, o2 = kt2(r2);
  if (o2.length / 2 & 128) throw new n2("tlv.encode: long form length too big");
  const i3 = r2 > 127 ? kt2(o2.length / 2 | 128) : "";
  return kt2(t) + i3 + o2 + e;
}, decode(t, e) {
  const { Err: n2 } = lt2;
  let r2 = 0;
  if (t < 0 || t > 256) throw new n2("tlv.encode: wrong tag");
  if (e.length < 2 || e[r2++] !== t) throw new n2("tlv.decode: wrong tlv");
  const o2 = e[r2++], i3 = !!(o2 & 128);
  let s = 0;
  if (!i3) s = o2;
  else {
    const a2 = o2 & 127;
    if (!a2) throw new n2("tlv.decode(long): indefinite length not supported");
    if (a2 > 4) throw new n2("tlv.decode(long): byte length is too big");
    const u3 = e.subarray(r2, r2 + a2);
    if (u3.length !== a2) throw new n2("tlv.decode: length bytes not complete");
    if (u3[0] === 0) throw new n2("tlv.decode(long): zero leftmost byte");
    for (const l4 of u3) s = s << 8 | l4;
    if (r2 += a2, s < 128) throw new n2("tlv.decode(long): not minimal encoding");
  }
  const c3 = e.subarray(r2, r2 + s);
  if (c3.length !== s) throw new n2("tlv.decode: wrong value length");
  return { v: c3, l: e.subarray(r2 + s) };
} }, _int: { encode(t) {
  const { Err: e } = lt2;
  if (t < dt2) throw new e("integer: negative integers are not allowed");
  let n2 = kt2(t);
  if (Number.parseInt(n2[0], 16) & 8 && (n2 = "00" + n2), n2.length & 1) throw new e("unexpected DER parsing assertion: unpadded hex");
  return n2;
}, decode(t) {
  const { Err: e } = lt2;
  if (t[0] & 128) throw new e("invalid signature integer: negative");
  if (t[0] === 0 && !(t[1] & 128)) throw new e("invalid signature integer: unnecessary leading zero");
  return xc(t);
} }, toSig(t) {
  const { Err: e, _int: n2, _tlv: r2 } = lt2, o2 = typeof t == "string" ? Sc(t) : t;
  te2(o2);
  const { v: i3, l: s } = r2.decode(48, o2);
  if (s.length) throw new e("invalid signature: left bytes after parsing");
  const { v: c3, l: a2 } = r2.decode(2, i3), { v: u3, l: l4 } = r2.decode(2, a2);
  if (l4.length) throw new e("invalid signature: left bytes after parsing");
  return { r: n2.decode(c3), s: n2.decode(u3) };
}, hexFromSig(t) {
  const { _tlv: e, _int: n2 } = lt2, r2 = e.encode(2, n2.encode(t.r)), o2 = e.encode(2, n2.encode(t.s)), i3 = r2 + o2;
  return e.encode(48, i3);
} };
var dt2 = BigInt(0);
var K2 = BigInt(1);
BigInt(2);
var Qr2 = BigInt(3);
BigInt(4);
function Ac(t) {
  const e = vc(t), { Fp: n2 } = e, r2 = Kr2(e.n, e.nBitLength), o2 = e.toBytes || ((p4, d4, v6) => {
    const m2 = d4.toAffine();
    return ne(Uint8Array.from([4]), n2.toBytes(m2.x), n2.toBytes(m2.y));
  }), i3 = e.fromBytes || ((p4) => {
    const d4 = p4.subarray(1), v6 = n2.fromBytes(d4.subarray(0, n2.BYTES)), m2 = n2.fromBytes(d4.subarray(n2.BYTES, 2 * n2.BYTES));
    return { x: v6, y: m2 };
  });
  function s(p4) {
    const { a: d4, b: v6 } = e, m2 = n2.sqr(p4), O4 = n2.mul(m2, p4);
    return n2.add(n2.add(O4, n2.mul(p4, d4)), v6);
  }
  if (!n2.eql(n2.sqr(e.Gy), s(e.Gx))) throw new Error("bad generator point: equation left != right");
  function c3(p4) {
    return Ee2(p4, K2, e.n);
  }
  function a2(p4) {
    const { allowedPrivateKeyLengths: d4, nByteLength: v6, wrapPrivateKey: m2, n: O4 } = e;
    if (d4 && typeof p4 != "bigint") {
      if (St2(p4) && (p4 = Pt2(p4)), typeof p4 != "string" || !d4.includes(p4.length)) throw new Error("invalid private key");
      p4 = p4.padStart(v6 * 2, "0");
    }
    let N4;
    try {
      N4 = typeof p4 == "bigint" ? p4 : Ot2(et("private key", p4, v6));
    } catch {
      throw new Error("invalid private key, expected hex or " + v6 + " bytes, got " + typeof p4);
    }
    return m2 && (N4 = X(N4, O4)), ft2("private key", N4, K2, O4), N4;
  }
  function u3(p4) {
    if (!(p4 instanceof h5)) throw new Error("ProjectivePoint expected");
  }
  const l4 = tn((p4, d4) => {
    const { px: v6, py: m2, pz: O4 } = p4;
    if (n2.eql(O4, n2.ONE)) return { x: v6, y: m2 };
    const N4 = p4.is0();
    d4 == null && (d4 = N4 ? n2.ONE : n2.inv(O4));
    const $5 = n2.mul(v6, d4), B4 = n2.mul(m2, d4), A5 = n2.mul(O4, d4);
    if (N4) return { x: n2.ZERO, y: n2.ZERO };
    if (!n2.eql(A5, n2.ONE)) throw new Error("invZ was invalid");
    return { x: $5, y: B4 };
  }), f6 = tn((p4) => {
    if (p4.is0()) {
      if (e.allowInfinityPoint && !n2.is0(p4.py)) return;
      throw new Error("bad point: ZERO");
    }
    const { x: d4, y: v6 } = p4.toAffine();
    if (!n2.isValid(d4) || !n2.isValid(v6)) throw new Error("bad point: x or y not FE");
    const m2 = n2.sqr(v6), O4 = s(d4);
    if (!n2.eql(m2, O4)) throw new Error("bad point: equation left != right");
    if (!p4.isTorsionFree()) throw new Error("bad point: not in prime-order subgroup");
    return true;
  });
  class h5 {
    constructor(d4, v6, m2) {
      if (this.px = d4, this.py = v6, this.pz = m2, d4 == null || !n2.isValid(d4)) throw new Error("x required");
      if (v6 == null || !n2.isValid(v6)) throw new Error("y required");
      if (m2 == null || !n2.isValid(m2)) throw new Error("z required");
      Object.freeze(this);
    }
    static fromAffine(d4) {
      const { x: v6, y: m2 } = d4 || {};
      if (!d4 || !n2.isValid(v6) || !n2.isValid(m2)) throw new Error("invalid affine point");
      if (d4 instanceof h5) throw new Error("projective point not allowed");
      const O4 = (N4) => n2.eql(N4, n2.ZERO);
      return O4(v6) && O4(m2) ? h5.ZERO : new h5(v6, m2, n2.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static normalizeZ(d4) {
      const v6 = n2.invertBatch(d4.map((m2) => m2.pz));
      return d4.map((m2, O4) => m2.toAffine(v6[O4])).map(h5.fromAffine);
    }
    static fromHex(d4) {
      const v6 = h5.fromAffine(i3(et("pointHex", d4)));
      return v6.assertValidity(), v6;
    }
    static fromPrivateKey(d4) {
      return h5.BASE.multiply(a2(d4));
    }
    static msm(d4, v6) {
      return hc(h5, r2, d4, v6);
    }
    _setWindowSize(d4) {
      E6.setWindowSize(this, d4);
    }
    assertValidity() {
      f6(this);
    }
    hasEvenY() {
      const { y: d4 } = this.toAffine();
      if (n2.isOdd) return !n2.isOdd(d4);
      throw new Error("Field doesn't support isOdd");
    }
    equals(d4) {
      u3(d4);
      const { px: v6, py: m2, pz: O4 } = this, { px: N4, py: $5, pz: B4 } = d4, A5 = n2.eql(n2.mul(v6, B4), n2.mul(N4, O4)), T3 = n2.eql(n2.mul(m2, B4), n2.mul($5, O4));
      return A5 && T3;
    }
    negate() {
      return new h5(this.px, n2.neg(this.py), this.pz);
    }
    double() {
      const { a: d4, b: v6 } = e, m2 = n2.mul(v6, Qr2), { px: O4, py: N4, pz: $5 } = this;
      let B4 = n2.ZERO, A5 = n2.ZERO, T3 = n2.ZERO, S5 = n2.mul(O4, O4), L4 = n2.mul(N4, N4), U5 = n2.mul($5, $5), _2 = n2.mul(O4, N4);
      return _2 = n2.add(_2, _2), T3 = n2.mul(O4, $5), T3 = n2.add(T3, T3), B4 = n2.mul(d4, T3), A5 = n2.mul(m2, U5), A5 = n2.add(B4, A5), B4 = n2.sub(L4, A5), A5 = n2.add(L4, A5), A5 = n2.mul(B4, A5), B4 = n2.mul(_2, B4), T3 = n2.mul(m2, T3), U5 = n2.mul(d4, U5), _2 = n2.sub(S5, U5), _2 = n2.mul(d4, _2), _2 = n2.add(_2, T3), T3 = n2.add(S5, S5), S5 = n2.add(T3, S5), S5 = n2.add(S5, U5), S5 = n2.mul(S5, _2), A5 = n2.add(A5, S5), U5 = n2.mul(N4, $5), U5 = n2.add(U5, U5), S5 = n2.mul(U5, _2), B4 = n2.sub(B4, S5), T3 = n2.mul(U5, L4), T3 = n2.add(T3, T3), T3 = n2.add(T3, T3), new h5(B4, A5, T3);
    }
    add(d4) {
      u3(d4);
      const { px: v6, py: m2, pz: O4 } = this, { px: N4, py: $5, pz: B4 } = d4;
      let A5 = n2.ZERO, T3 = n2.ZERO, S5 = n2.ZERO;
      const L4 = e.a, U5 = n2.mul(e.b, Qr2);
      let _2 = n2.mul(v6, N4), j4 = n2.mul(m2, $5), g2 = n2.mul(O4, B4), w4 = n2.add(v6, m2), b6 = n2.add(N4, $5);
      w4 = n2.mul(w4, b6), b6 = n2.add(_2, j4), w4 = n2.sub(w4, b6), b6 = n2.add(v6, O4);
      let I4 = n2.add(N4, B4);
      return b6 = n2.mul(b6, I4), I4 = n2.add(_2, g2), b6 = n2.sub(b6, I4), I4 = n2.add(m2, O4), A5 = n2.add($5, B4), I4 = n2.mul(I4, A5), A5 = n2.add(j4, g2), I4 = n2.sub(I4, A5), S5 = n2.mul(L4, b6), A5 = n2.mul(U5, g2), S5 = n2.add(A5, S5), A5 = n2.sub(j4, S5), S5 = n2.add(j4, S5), T3 = n2.mul(A5, S5), j4 = n2.add(_2, _2), j4 = n2.add(j4, _2), g2 = n2.mul(L4, g2), b6 = n2.mul(U5, b6), j4 = n2.add(j4, g2), g2 = n2.sub(_2, g2), g2 = n2.mul(L4, g2), b6 = n2.add(b6, g2), _2 = n2.mul(j4, b6), T3 = n2.add(T3, _2), _2 = n2.mul(I4, b6), A5 = n2.mul(w4, A5), A5 = n2.sub(A5, _2), _2 = n2.mul(w4, j4), S5 = n2.mul(I4, S5), S5 = n2.add(S5, _2), new h5(A5, T3, S5);
    }
    subtract(d4) {
      return this.add(d4.negate());
    }
    is0() {
      return this.equals(h5.ZERO);
    }
    wNAF(d4) {
      return E6.wNAFCached(this, d4, h5.normalizeZ);
    }
    multiplyUnsafe(d4) {
      const { endo: v6, n: m2 } = e;
      ft2("scalar", d4, dt2, m2);
      const O4 = h5.ZERO;
      if (d4 === dt2) return O4;
      if (this.is0() || d4 === K2) return this;
      if (!v6 || E6.hasPrecomputes(this)) return E6.wNAFCachedUnsafe(this, d4, h5.normalizeZ);
      let { k1neg: N4, k1: $5, k2neg: B4, k2: A5 } = v6.splitScalar(d4), T3 = O4, S5 = O4, L4 = this;
      for (; $5 > dt2 || A5 > dt2; ) $5 & K2 && (T3 = T3.add(L4)), A5 & K2 && (S5 = S5.add(L4)), L4 = L4.double(), $5 >>= K2, A5 >>= K2;
      return N4 && (T3 = T3.negate()), B4 && (S5 = S5.negate()), S5 = new h5(n2.mul(S5.px, v6.beta), S5.py, S5.pz), T3.add(S5);
    }
    multiply(d4) {
      const { endo: v6, n: m2 } = e;
      ft2("scalar", d4, K2, m2);
      let O4, N4;
      if (v6) {
        const { k1neg: $5, k1: B4, k2neg: A5, k2: T3 } = v6.splitScalar(d4);
        let { p: S5, f: L4 } = this.wNAF(B4), { p: U5, f: _2 } = this.wNAF(T3);
        S5 = E6.constTimeNegate($5, S5), U5 = E6.constTimeNegate(A5, U5), U5 = new h5(n2.mul(U5.px, v6.beta), U5.py, U5.pz), O4 = S5.add(U5), N4 = L4.add(_2);
      } else {
        const { p: $5, f: B4 } = this.wNAF(d4);
        O4 = $5, N4 = B4;
      }
      return h5.normalizeZ([O4, N4])[0];
    }
    multiplyAndAddUnsafe(d4, v6, m2) {
      const O4 = h5.BASE, N4 = (B4, A5) => A5 === dt2 || A5 === K2 || !B4.equals(O4) ? B4.multiplyUnsafe(A5) : B4.multiply(A5), $5 = N4(this, v6).add(N4(d4, m2));
      return $5.is0() ? void 0 : $5;
    }
    toAffine(d4) {
      return l4(this, d4);
    }
    isTorsionFree() {
      const { h: d4, isTorsionFree: v6 } = e;
      if (d4 === K2) return true;
      if (v6) return v6(h5, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: d4, clearCofactor: v6 } = e;
      return d4 === K2 ? this : v6 ? v6(h5, this) : this.multiplyUnsafe(e.h);
    }
    toRawBytes(d4 = true) {
      return Ct("isCompressed", d4), this.assertValidity(), o2(h5, this, d4);
    }
    toHex(d4 = true) {
      return Ct("isCompressed", d4), Pt2(this.toRawBytes(d4));
    }
  }
  h5.BASE = new h5(e.Gx, e.Gy, n2.ONE), h5.ZERO = new h5(n2.ZERO, n2.ONE, n2.ZERO);
  const y5 = e.nBitLength, E6 = dc(h5, e.endo ? Math.ceil(y5 / 2) : y5);
  return { CURVE: e, ProjectivePoint: h5, normPrivateKeyToScalar: a2, weierstrassEquation: s, isWithinCurveOrder: c3 };
}
function Bc(t) {
  const e = Wr2(t);
  return Dt2(e, { hash: "hash", hmac: "function", randomBytes: "function" }, { bits2int: "function", bits2int_modN: "function", lowS: "boolean" }), Object.freeze({ lowS: true, ...e });
}
function Ic(t) {
  const e = Bc(t), { Fp: n2, n: r2 } = e, o2 = n2.BYTES + 1, i3 = 2 * n2.BYTES + 1;
  function s(g2) {
    return X(g2, r2);
  }
  function c3(g2) {
    return nn2(g2, r2);
  }
  const { ProjectivePoint: a2, normPrivateKeyToScalar: u3, weierstrassEquation: l4, isWithinCurveOrder: f6 } = Ac({ ...e, toBytes(g2, w4, b6) {
    const I4 = w4.toAffine(), R5 = n2.toBytes(I4.x), x3 = ne;
    return Ct("isCompressed", b6), b6 ? x3(Uint8Array.from([w4.hasEvenY() ? 2 : 3]), R5) : x3(Uint8Array.from([4]), R5, n2.toBytes(I4.y));
  }, fromBytes(g2) {
    const w4 = g2.length, b6 = g2[0], I4 = g2.subarray(1);
    if (w4 === o2 && (b6 === 2 || b6 === 3)) {
      const R5 = Ot2(I4);
      if (!Ee2(R5, K2, n2.ORDER)) throw new Error("Point is not on curve");
      const x3 = l4(R5);
      let C6;
      try {
        C6 = n2.sqrt(x3);
      } catch (M6) {
        const D3 = M6 instanceof Error ? ": " + M6.message : "";
        throw new Error("Point is not on curve" + D3);
      }
      const P5 = (C6 & K2) === K2;
      return (b6 & 1) === 1 !== P5 && (C6 = n2.neg(C6)), { x: R5, y: C6 };
    } else if (w4 === i3 && b6 === 4) {
      const R5 = n2.fromBytes(I4.subarray(0, n2.BYTES)), x3 = n2.fromBytes(I4.subarray(n2.BYTES, 2 * n2.BYTES));
      return { x: R5, y: x3 };
    } else {
      const R5 = o2, x3 = i3;
      throw new Error("invalid Point, expected length of " + R5 + ", or uncompressed " + x3 + ", got " + w4);
    }
  } }), h5 = (g2) => Pt2(Mt2(g2, e.nByteLength));
  function y5(g2) {
    const w4 = r2 >> K2;
    return g2 > w4;
  }
  function E6(g2) {
    return y5(g2) ? s(-g2) : g2;
  }
  const p4 = (g2, w4, b6) => Ot2(g2.slice(w4, b6));
  class d4 {
    constructor(w4, b6, I4) {
      this.r = w4, this.s = b6, this.recovery = I4, this.assertValidity();
    }
    static fromCompact(w4) {
      const b6 = e.nByteLength;
      return w4 = et("compactSignature", w4, b6 * 2), new d4(p4(w4, 0, b6), p4(w4, b6, 2 * b6));
    }
    static fromDER(w4) {
      const { r: b6, s: I4 } = lt2.toSig(et("DER", w4));
      return new d4(b6, I4);
    }
    assertValidity() {
      ft2("r", this.r, K2, r2), ft2("s", this.s, K2, r2);
    }
    addRecoveryBit(w4) {
      return new d4(this.r, this.s, w4);
    }
    recoverPublicKey(w4) {
      const { r: b6, s: I4, recovery: R5 } = this, x3 = B4(et("msgHash", w4));
      if (R5 == null || ![0, 1, 2, 3].includes(R5)) throw new Error("recovery id invalid");
      const C6 = R5 === 2 || R5 === 3 ? b6 + e.n : b6;
      if (C6 >= n2.ORDER) throw new Error("recovery id 2 or 3 invalid");
      const P5 = (R5 & 1) === 0 ? "02" : "03", k7 = a2.fromHex(P5 + h5(C6)), M6 = c3(C6), D3 = s(-x3 * M6), z3 = s(I4 * M6), Z3 = a2.BASE.multiplyAndAddUnsafe(k7, D3, z3);
      if (!Z3) throw new Error("point at infinify");
      return Z3.assertValidity(), Z3;
    }
    hasHighS() {
      return y5(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new d4(this.r, s(-this.s), this.recovery) : this;
    }
    toDERRawBytes() {
      return Vt2(this.toDERHex());
    }
    toDERHex() {
      return lt2.hexFromSig({ r: this.r, s: this.s });
    }
    toCompactRawBytes() {
      return Vt2(this.toCompactHex());
    }
    toCompactHex() {
      return h5(this.r) + h5(this.s);
    }
  }
  const v6 = { isValidPrivateKey(g2) {
    try {
      return u3(g2), true;
    } catch {
      return false;
    }
  }, normPrivateKeyToScalar: u3, randomPrivateKey: () => {
    const g2 = zr2(e.n);
    return uc(e.randomBytes(g2), e.n);
  }, precompute(g2 = 8, w4 = a2.BASE) {
    return w4._setWindowSize(g2), w4.multiply(BigInt(3)), w4;
  } };
  function m2(g2, w4 = true) {
    return a2.fromPrivateKey(g2).toRawBytes(w4);
  }
  function O4(g2) {
    const w4 = St2(g2), b6 = typeof g2 == "string", I4 = (w4 || b6) && g2.length;
    return w4 ? I4 === o2 || I4 === i3 : b6 ? I4 === 2 * o2 || I4 === 2 * i3 : g2 instanceof a2;
  }
  function N4(g2, w4, b6 = true) {
    if (O4(g2)) throw new Error("first arg must be private key");
    if (!O4(w4)) throw new Error("second arg must be public key");
    return a2.fromHex(w4).multiply(u3(g2)).toRawBytes(b6);
  }
  const $5 = e.bits2int || function(g2) {
    if (g2.length > 8192) throw new Error("input is too large");
    const w4 = Ot2(g2), b6 = g2.length * 8 - e.nBitLength;
    return b6 > 0 ? w4 >> BigInt(b6) : w4;
  }, B4 = e.bits2int_modN || function(g2) {
    return s($5(g2));
  }, A5 = Je2(e.nBitLength);
  function T3(g2) {
    return ft2("num < 2^" + e.nBitLength, g2, dt2, A5), Mt2(g2, e.nByteLength);
  }
  function S5(g2, w4, b6 = L4) {
    if (["recovered", "canonical"].some((W5) => W5 in b6)) throw new Error("sign() legacy options not supported");
    const { hash: I4, randomBytes: R5 } = e;
    let { lowS: x3, prehash: C6, extraEntropy: P5 } = b6;
    x3 == null && (x3 = true), g2 = et("msgHash", g2), Jr2(b6), C6 && (g2 = et("prehashed msgHash", I4(g2)));
    const k7 = B4(g2), M6 = u3(w4), D3 = [T3(M6), T3(k7)];
    if (P5 != null && P5 !== false) {
      const W5 = P5 === true ? R5(n2.BYTES) : P5;
      D3.push(et("extraEntropy", W5));
    }
    const z3 = ne(...D3), Z3 = k7;
    function st3(W5) {
      const J5 = $5(W5);
      if (!f6(J5)) return;
      const Be5 = c3(J5), zt4 = a2.BASE.multiply(J5).toAffine(), vt3 = s(zt4.x);
      if (vt3 === dt2) return;
      const Zt4 = s(Be5 * s(Z3 + vt3 * M6));
      if (Zt4 === dt2) return;
      let Ut4 = (zt4.x === vt3 ? 0 : 2) | Number(zt4.y & K2), vn3 = Zt4;
      return x3 && y5(Zt4) && (vn3 = E6(Zt4), Ut4 ^= 1), new d4(vt3, vn3, Ut4);
    }
    return { seed: z3, k2sig: st3 };
  }
  const L4 = { lowS: e.lowS, prehash: false }, U5 = { lowS: e.lowS, prehash: false };
  function _2(g2, w4, b6 = L4) {
    const { seed: I4, k2sig: R5 } = S5(g2, w4, b6), x3 = e;
    return Vr2(x3.hash.outputLen, x3.nByteLength, x3.hmac)(I4, R5);
  }
  a2.BASE._setWindowSize(8);
  function j4(g2, w4, b6, I4 = U5) {
    const R5 = g2;
    w4 = et("msgHash", w4), b6 = et("publicKey", b6);
    const { lowS: x3, prehash: C6, format: P5 } = I4;
    if (Jr2(I4), "strict" in I4) throw new Error("options.strict was renamed to lowS");
    if (P5 !== void 0 && P5 !== "compact" && P5 !== "der") throw new Error("format must be compact or der");
    const k7 = typeof R5 == "string" || St2(R5), M6 = !k7 && !P5 && typeof R5 == "object" && R5 !== null && typeof R5.r == "bigint" && typeof R5.s == "bigint";
    if (!k7 && !M6) throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
    let D3, z3;
    try {
      if (M6 && (D3 = new d4(R5.r, R5.s)), k7) {
        try {
          P5 !== "compact" && (D3 = d4.fromDER(R5));
        } catch (Ut4) {
          if (!(Ut4 instanceof lt2.Err)) throw Ut4;
        }
        !D3 && P5 !== "der" && (D3 = d4.fromCompact(R5));
      }
      z3 = a2.fromHex(b6);
    } catch {
      return false;
    }
    if (!D3 || x3 && D3.hasHighS()) return false;
    C6 && (w4 = e.hash(w4));
    const { r: Z3, s: st3 } = D3, W5 = B4(w4), J5 = c3(st3), Be5 = s(W5 * J5), zt4 = s(Z3 * J5), vt3 = a2.BASE.multiplyAndAddUnsafe(z3, Be5, zt4)?.toAffine();
    return vt3 ? s(vt3.x) === Z3 : false;
  }
  return { CURVE: e, getPublicKey: m2, getSharedSecret: N4, sign: _2, verify: j4, ProjectivePoint: a2, Signature: d4, utils: v6 };
}
function Nc(t) {
  return { hash: t, hmac: (e, ...n2) => ye2(t, e, Vi(...n2)), randomBytes: Lt2 };
}
function Uc(t, e) {
  const n2 = (r2) => Ic({ ...t, ...Nc(r2) });
  return { ...n2(e), create: n2 };
}
var to2 = Kr2(BigInt("0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff"));
var Tc = to2.create(BigInt("-3"));
var Rc = BigInt("0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b");
var _c = Uc({ a: Tc, b: Rc, Fp: to2, n: BigInt("0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551"), Gx: BigInt("0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296"), Gy: BigInt("0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"), h: BigInt(1), lowS: false }, Qt2);
var ln = "base10";
var G2 = "base16";
var qt2 = "base64pad";
var xe2 = "base64url";
var Kt2 = "utf8";
var dn = 0;
var Ft2 = 1;
var re = 2;
var $c = 0;
var eo2 = 1;
var oe = 12;
var hn = 32;
function Lc() {
  const t = fn.utils.randomPrivateKey(), e = fn.getPublicKey(t);
  return { privateKey: toString(t, G2), publicKey: toString(e, G2) };
}
function jc() {
  const t = Lt2(hn);
  return toString(t, G2);
}
function Cc(t, e) {
  const n2 = fn.getSharedSecret(fromString(t, G2), fromString(e, G2)), r2 = Vs(Qt2, n2, void 0, void 0, hn);
  return toString(r2, G2);
}
function Pc(t) {
  const e = Qt2(fromString(t, G2));
  return toString(e, G2);
}
function kc(t) {
  const e = Qt2(fromString(t, Kt2));
  return toString(e, G2);
}
function pn(t) {
  return fromString(`${t}`, ln);
}
function Bt2(t) {
  return Number(toString(t, ln));
}
function no2(t) {
  return t.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
}
function ro2(t) {
  const e = t.replace(/-/g, "+").replace(/_/g, "/"), n2 = (4 - e.length % 4) % 4;
  return e + "=".repeat(n2);
}
function Vc(t) {
  const e = pn(typeof t.type < "u" ? t.type : dn);
  if (Bt2(e) === Ft2 && typeof t.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
  const n2 = typeof t.senderPublicKey < "u" ? fromString(t.senderPublicKey, G2) : void 0, r2 = typeof t.iv < "u" ? fromString(t.iv, G2) : Lt2(oe), o2 = fromString(t.symKey, G2), i3 = $r2(o2, r2).encrypt(fromString(t.message, Kt2)), s = gn2({ type: e, sealed: i3, iv: r2, senderPublicKey: n2 });
  return t.encoding === xe2 ? no2(s) : s;
}
function Mc(t) {
  const e = fromString(t.symKey, G2), { sealed: n2, iv: r2 } = Se2({ encoded: t.encoded, encoding: t.encoding }), o2 = $r2(e, r2).decrypt(n2);
  if (o2 === null) throw new Error("Failed to decrypt");
  return toString(o2, Kt2);
}
function Dc(t, e) {
  const n2 = pn(re), r2 = Lt2(oe), o2 = fromString(t, Kt2), i3 = gn2({ type: n2, sealed: o2, iv: r2 });
  return e === xe2 ? no2(i3) : i3;
}
function Hc(t, e) {
  const { sealed: n2 } = Se2({ encoded: t, encoding: e });
  return toString(n2, Kt2);
}
function gn2(t) {
  if (Bt2(t.type) === re) return toString(concat([t.type, t.sealed]), qt2);
  if (Bt2(t.type) === Ft2) {
    if (typeof t.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
    return toString(concat([t.type, t.senderPublicKey, t.iv, t.sealed]), qt2);
  }
  return toString(concat([t.type, t.iv, t.sealed]), qt2);
}
function Se2(t) {
  const e = (t.encoding || qt2) === xe2 ? ro2(t.encoded) : t.encoded, n2 = fromString(e, qt2), r2 = n2.slice($c, eo2), o2 = eo2;
  if (Bt2(r2) === Ft2) {
    const a2 = o2 + hn, u3 = a2 + oe, l4 = n2.slice(o2, a2), f6 = n2.slice(a2, u3), h5 = n2.slice(u3);
    return { type: r2, sealed: h5, iv: f6, senderPublicKey: l4 };
  }
  if (Bt2(r2) === re) {
    const a2 = n2.slice(o2), u3 = Lt2(oe);
    return { type: r2, sealed: a2, iv: u3 };
  }
  const i3 = o2 + oe, s = n2.slice(o2, i3), c3 = n2.slice(i3);
  return { type: r2, sealed: c3, iv: s };
}
function qc(t, e) {
  const n2 = Se2({ encoded: t, encoding: e?.encoding });
  return oo2({ type: Bt2(n2.type), senderPublicKey: typeof n2.senderPublicKey < "u" ? toString(n2.senderPublicKey, G2) : void 0, receiverPublicKey: e?.receiverPublicKey });
}
function oo2(t) {
  const e = t?.type || dn;
  if (e === Ft2) {
    if (typeof t?.senderPublicKey > "u") throw new Error("missing sender public key");
    if (typeof t?.receiverPublicKey > "u") throw new Error("missing receiver public key");
  }
  return { type: e, senderPublicKey: t?.senderPublicKey, receiverPublicKey: t?.receiverPublicKey };
}
function Kc(t) {
  return t.type === Ft2 && typeof t.senderPublicKey == "string" && typeof t.receiverPublicKey == "string";
}
function Fc(t) {
  return t.type === re;
}
function io2(t) {
  const e = Buffer.from(t.x, "base64"), n2 = Buffer.from(t.y, "base64");
  return concat([new Uint8Array([4]), e, n2]);
}
function zc(t, e) {
  const [n2, r2, o2] = t.split("."), i3 = Buffer.from(ro2(o2), "base64");
  if (i3.length !== 64) throw new Error("Invalid signature length");
  const s = i3.slice(0, 32), c3 = i3.slice(32, 64), a2 = `${n2}.${r2}`, u3 = Qt2(a2), l4 = io2(e);
  if (!_c.verify(concat([s, c3]), u3, l4)) throw new Error("Invalid signature");
  return sn(t).payload;
}
var so2 = "irn";
function Zc(t) {
  return t?.relay || { protocol: so2 };
}
function Yc(t) {
  const e = C[t];
  if (typeof e > "u") throw new Error(`Relay Protocol not supported: ${t}`);
  return e;
}
function co2(t, e = "-") {
  const n2 = {}, r2 = "relay" + e;
  return Object.keys(t).forEach((o2) => {
    if (o2.startsWith(r2)) {
      const i3 = o2.replace(r2, ""), s = t[o2];
      n2[i3] = s;
    }
  }), n2;
}
function Gc(t) {
  if (!t.includes("wc:")) {
    const u3 = je2(t);
    u3 != null && u3.includes("wc:") && (t = u3);
  }
  t = t.includes("wc://") ? t.replace("wc://", "") : t, t = t.includes("wc:") ? t.replace("wc:", "") : t;
  const e = t.indexOf(":"), n2 = t.indexOf("?") !== -1 ? t.indexOf("?") : void 0, r2 = t.substring(0, e), o2 = t.substring(e + 1, n2).split("@"), i3 = typeof n2 < "u" ? t.substring(n2) : "", s = new URLSearchParams(i3), c3 = {};
  s.forEach((u3, l4) => {
    c3[l4] = u3;
  });
  const a2 = typeof c3.methods == "string" ? c3.methods.split(",") : void 0;
  return { protocol: r2, topic: ao2(o2[0]), version: parseInt(o2[1], 10), symKey: c3.symKey, relay: co2(c3), methods: a2, expiryTimestamp: c3.expiryTimestamp ? parseInt(c3.expiryTimestamp, 10) : void 0 };
}
function ao2(t) {
  return t.startsWith("//") ? t.substring(2) : t;
}
function uo2(t, e = "-") {
  const n2 = "relay", r2 = {};
  return Object.keys(t).forEach((o2) => {
    const i3 = o2, s = n2 + e + i3;
    t[i3] && (r2[s] = t[i3]);
  }), r2;
}
function Wc(t) {
  const e = new URLSearchParams(), n2 = uo2(t.relay);
  Object.keys(n2).sort().forEach((o2) => {
    e.set(o2, n2[o2]);
  }), e.set("symKey", t.symKey), t.expiryTimestamp && e.set("expiryTimestamp", t.expiryTimestamp.toString()), t.methods && e.set("methods", t.methods.join(","));
  const r2 = e.toString();
  return `${t.protocol}:${t.topic}@${t.version}?${r2}`;
}
function Xc(t, e, n2) {
  return `${t}?wc_ev=${n2}&topic=${e}`;
}
var Jc = Object.defineProperty;
var Qc = Object.defineProperties;
var ta = Object.getOwnPropertyDescriptors;
var fo2 = Object.getOwnPropertySymbols;
var ea = Object.prototype.hasOwnProperty;
var na = Object.prototype.propertyIsEnumerable;
var lo2 = (t, e, n2) => e in t ? Jc(t, e, { enumerable: true, configurable: true, writable: true, value: n2 }) : t[e] = n2;
var ra = (t, e) => {
  for (var n2 in e || (e = {})) ea.call(e, n2) && lo2(t, n2, e[n2]);
  if (fo2) for (var n2 of fo2(e)) na.call(e, n2) && lo2(t, n2, e[n2]);
  return t;
};
var oa = (t, e) => Qc(t, ta(e));
function It2(t) {
  const e = [];
  return t.forEach((n2) => {
    const [r2, o2] = n2.split(":");
    e.push(`${r2}:${o2}`);
  }), e;
}
function ho2(t) {
  const e = [];
  return Object.values(t).forEach((n2) => {
    e.push(...It2(n2.accounts));
  }), e;
}
function po2(t, e) {
  const n2 = [];
  return Object.values(t).forEach((r2) => {
    It2(r2.accounts).includes(e) && n2.push(...r2.methods);
  }), n2;
}
function go2(t, e) {
  const n2 = [];
  return Object.values(t).forEach((r2) => {
    It2(r2.accounts).includes(e) && n2.push(...r2.events);
  }), n2;
}
function yn2(t) {
  return t.includes(":");
}
function yo2(t) {
  return yn2(t) ? t.split(":")[0] : t;
}
function ie(t) {
  var e, n2, r2;
  const o2 = {};
  if (!Oe2(t)) return o2;
  for (const [i3, s] of Object.entries(t)) {
    const c3 = yn2(i3) ? [i3] : s.chains, a2 = s.methods || [], u3 = s.events || [], l4 = yo2(i3);
    o2[l4] = oa(ra({}, o2[l4]), { chains: ot(c3, (e = o2[l4]) == null ? void 0 : e.chains), methods: ot(a2, (n2 = o2[l4]) == null ? void 0 : n2.methods), events: ot(u3, (r2 = o2[l4]) == null ? void 0 : r2.events) });
  }
  return o2;
}
function mo2(t) {
  const e = {};
  return t?.forEach((n2) => {
    var r2;
    const [o2, i3] = n2.split(":");
    e[o2] || (e[o2] = { accounts: [], chains: [], events: [], methods: [] }), e[o2].accounts.push(n2), (r2 = e[o2].chains) == null || r2.push(`${o2}:${i3}`);
  }), e;
}
function ca(t, e) {
  e = e.map((r2) => r2.replace("did:pkh:", ""));
  const n2 = mo2(e);
  for (const [r2, o2] of Object.entries(n2)) o2.methods ? o2.methods = ot(o2.methods, t) : o2.methods = t, o2.events = ["chainChanged", "accountsChanged"];
  return n2;
}
function aa(t, e) {
  var n2, r2, o2, i3, s, c3;
  const a2 = ie(t), u3 = ie(e), l4 = {}, f6 = Object.keys(a2).concat(Object.keys(u3));
  for (const h5 of f6) l4[h5] = { chains: ot((n2 = a2[h5]) == null ? void 0 : n2.chains, (r2 = u3[h5]) == null ? void 0 : r2.chains), methods: ot((o2 = a2[h5]) == null ? void 0 : o2.methods, (i3 = u3[h5]) == null ? void 0 : i3.methods), events: ot((s = a2[h5]) == null ? void 0 : s.events, (c3 = u3[h5]) == null ? void 0 : c3.events) };
  return l4;
}
var wo2 = { INVALID_METHOD: { message: "Invalid method.", code: 1001 }, INVALID_EVENT: { message: "Invalid event.", code: 1002 }, INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 }, INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 }, UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 }, UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 }, USER_REJECTED: { message: "User rejected.", code: 5e3 }, USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 }, USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 }, USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 }, UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 }, UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 }, UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 }, USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 } };
var bo2 = { NOT_INITIALIZED: { message: "Not initialized.", code: 1 }, NO_MATCHING_KEY: { message: "No matching key.", code: 2 }, RESTORE_WILL_OVERRIDE: { message: "Restore will override.", code: 3 }, RESUBSCRIBED: { message: "Resubscribed.", code: 4 }, MISSING_OR_INVALID: { message: "Missing or invalid.", code: 5 }, EXPIRED: { message: "Expired.", code: 6 }, UNKNOWN_TYPE: { message: "Unknown type.", code: 7 }, MISMATCHED_TOPIC: { message: "Mismatched topic.", code: 8 }, NON_CONFORMING_NAMESPACES: { message: "Non conforming namespaces.", code: 9 } };
function ht2(t, e) {
  const { message: n2, code: r2 } = bo2[t];
  return { message: e ? `${n2} ${e}` : n2, code: r2 };
}
function Nt2(t, e) {
  const { message: n2, code: r2 } = wo2[t];
  return { message: e ? `${n2} ${e}` : n2, code: r2 };
}
function se(t, e) {
  return Array.isArray(t) ? typeof e < "u" && t.length ? t.every(e) : true : false;
}
function Oe2(t) {
  return Object.getPrototypeOf(t) === Object.prototype && Object.keys(t).length;
}
function Et2(t) {
  return typeof t > "u";
}
function nt2(t, e) {
  return e && Et2(t) ? true : typeof t == "string" && !!t.trim().length;
}
function Ae2(t, e) {
  return e && Et2(t) ? true : typeof t == "number" && !isNaN(t);
}
function ua(t, e) {
  const { requiredNamespaces: n2 } = e, r2 = Object.keys(t.namespaces), o2 = Object.keys(n2);
  let i3 = true;
  return gt2(o2, r2) ? (r2.forEach((s) => {
    const { accounts: c3, methods: a2, events: u3 } = t.namespaces[s], l4 = It2(c3), f6 = n2[s];
    (!gt2(ue(s, f6), l4) || !gt2(f6.methods, a2) || !gt2(f6.events, u3)) && (i3 = false);
  }), i3) : false;
}
function ce(t) {
  return nt2(t, false) && t.includes(":") ? t.split(":").length === 2 : false;
}
function Eo2(t) {
  if (nt2(t, false) && t.includes(":")) {
    const e = t.split(":");
    if (e.length === 3) {
      const n2 = e[0] + ":" + e[1];
      return !!e[2] && ce(n2);
    }
  }
  return false;
}
function fa(t) {
  function e(n2) {
    try {
      return typeof new URL(n2) < "u";
    } catch {
      return false;
    }
  }
  try {
    if (nt2(t, false)) {
      if (e(t)) return true;
      const n2 = je2(t);
      return e(n2);
    }
  } catch {
  }
  return false;
}
function la(t) {
  var e;
  return (e = t?.proposer) == null ? void 0 : e.publicKey;
}
function da(t) {
  return t?.topic;
}
function ha(t, e) {
  let n2 = null;
  return nt2(t?.publicKey, false) || (n2 = ht2("MISSING_OR_INVALID", `${e} controller public key should be a string`)), n2;
}
function mn2(t) {
  let e = true;
  return se(t) ? t.length && (e = t.every((n2) => nt2(n2, false))) : e = false, e;
}
function vo2(t, e, n2) {
  let r2 = null;
  return se(e) && e.length ? e.forEach((o2) => {
    r2 || ce(o2) || (r2 = Nt2("UNSUPPORTED_CHAINS", `${n2}, chain ${o2} should be a string and conform to "namespace:chainId" format`));
  }) : ce(t) || (r2 = Nt2("UNSUPPORTED_CHAINS", `${n2}, chains must be defined as "namespace:chainId" e.g. "eip155:1": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: ["eip155:1", "eip155:5"] }`)), r2;
}
function xo2(t, e, n2) {
  let r2 = null;
  return Object.entries(t).forEach(([o2, i3]) => {
    if (r2) return;
    const s = vo2(o2, ue(o2, i3), `${e} ${n2}`);
    s && (r2 = s);
  }), r2;
}
function So2(t, e) {
  let n2 = null;
  return se(t) ? t.forEach((r2) => {
    n2 || Eo2(r2) || (n2 = Nt2("UNSUPPORTED_ACCOUNTS", `${e}, account ${r2} should be a string and conform to "namespace:chainId:address" format`));
  }) : n2 = Nt2("UNSUPPORTED_ACCOUNTS", `${e}, accounts should be an array of strings conforming to "namespace:chainId:address" format`), n2;
}
function Oo2(t, e) {
  let n2 = null;
  return Object.values(t).forEach((r2) => {
    if (n2) return;
    const o2 = So2(r2?.accounts, `${e} namespace`);
    o2 && (n2 = o2);
  }), n2;
}
function Ao2(t, e) {
  let n2 = null;
  return mn2(t?.methods) ? mn2(t?.events) || (n2 = Nt2("UNSUPPORTED_EVENTS", `${e}, events should be an array of strings or empty array for no events`)) : n2 = Nt2("UNSUPPORTED_METHODS", `${e}, methods should be an array of strings or empty array for no methods`), n2;
}
function wn(t, e) {
  let n2 = null;
  return Object.values(t).forEach((r2) => {
    if (n2) return;
    const o2 = Ao2(r2, `${e}, namespace`);
    o2 && (n2 = o2);
  }), n2;
}
function pa(t, e, n2) {
  let r2 = null;
  if (t && Oe2(t)) {
    const o2 = wn(t, e);
    o2 && (r2 = o2);
    const i3 = xo2(t, e, n2);
    i3 && (r2 = i3);
  } else r2 = ht2("MISSING_OR_INVALID", `${e}, ${n2} should be an object with data`);
  return r2;
}
function Bo2(t, e) {
  let n2 = null;
  if (t && Oe2(t)) {
    const r2 = wn(t, e);
    r2 && (n2 = r2);
    const o2 = Oo2(t, e);
    o2 && (n2 = o2);
  } else n2 = ht2("MISSING_OR_INVALID", `${e}, namespaces should be an object with data`);
  return n2;
}
function Io2(t) {
  return nt2(t.protocol, true);
}
function ga(t, e) {
  let n2 = false;
  return e && !t ? n2 = true : t && se(t) && t.length && t.forEach((r2) => {
    n2 = Io2(r2);
  }), n2;
}
function ya(t) {
  return typeof t == "number";
}
function ma(t) {
  return typeof t < "u" && typeof t !== null;
}
function wa(t) {
  return !(!t || typeof t != "object" || !t.code || !Ae2(t.code, false) || !t.message || !nt2(t.message, false));
}
function ba(t) {
  return !(Et2(t) || !nt2(t.method, false));
}
function Ea(t) {
  return !(Et2(t) || Et2(t.result) && Et2(t.error) || !Ae2(t.id, false) || !nt2(t.jsonrpc, false));
}
function va(t) {
  return !(Et2(t) || !nt2(t.name, false));
}
function xa(t, e) {
  return !(!ce(e) || !ho2(t).includes(e));
}
function Sa(t, e, n2) {
  return nt2(n2, false) ? po2(t, e).includes(n2) : false;
}
function Oa(t, e, n2) {
  return nt2(n2, false) ? go2(t, e).includes(n2) : false;
}
function No2(t, e, n2) {
  let r2 = null;
  const o2 = Aa(t), i3 = Ba(e), s = Object.keys(o2), c3 = Object.keys(i3), a2 = Uo2(Object.keys(t)), u3 = Uo2(Object.keys(e)), l4 = a2.filter((f6) => !u3.includes(f6));
  return l4.length && (r2 = ht2("NON_CONFORMING_NAMESPACES", `${n2} namespaces keys don't satisfy requiredNamespaces.
      Required: ${l4.toString()}
      Received: ${Object.keys(e).toString()}`)), gt2(s, c3) || (r2 = ht2("NON_CONFORMING_NAMESPACES", `${n2} namespaces chains don't satisfy required namespaces.
      Required: ${s.toString()}
      Approved: ${c3.toString()}`)), Object.keys(e).forEach((f6) => {
    if (!f6.includes(":") || r2) return;
    const h5 = It2(e[f6].accounts);
    h5.includes(f6) || (r2 = ht2("NON_CONFORMING_NAMESPACES", `${n2} namespaces accounts don't satisfy namespace accounts for ${f6}
        Required: ${f6}
        Approved: ${h5.toString()}`));
  }), s.forEach((f6) => {
    r2 || (gt2(o2[f6].methods, i3[f6].methods) ? gt2(o2[f6].events, i3[f6].events) || (r2 = ht2("NON_CONFORMING_NAMESPACES", `${n2} namespaces events don't satisfy namespace events for ${f6}`)) : r2 = ht2("NON_CONFORMING_NAMESPACES", `${n2} namespaces methods don't satisfy namespace methods for ${f6}`));
  }), r2;
}
function Aa(t) {
  const e = {};
  return Object.keys(t).forEach((n2) => {
    var r2;
    n2.includes(":") ? e[n2] = t[n2] : (r2 = t[n2].chains) == null || r2.forEach((o2) => {
      e[o2] = { methods: t[n2].methods, events: t[n2].events };
    });
  }), e;
}
function Uo2(t) {
  return [...new Set(t.map((e) => e.includes(":") ? e.split(":")[0] : e))];
}
function Ba(t) {
  const e = {};
  return Object.keys(t).forEach((n2) => {
    if (n2.includes(":")) e[n2] = t[n2];
    else {
      const r2 = It2(t[n2].accounts);
      r2?.forEach((o2) => {
        e[o2] = { accounts: t[n2].accounts.filter((i3) => i3.includes(`${o2}:`)), methods: t[n2].methods, events: t[n2].events };
      });
    }
  }), e;
}
function Ia(t, e) {
  return Ae2(t, false) && t <= e.max && t >= e.min;
}
function Na() {
  const t = xt2();
  return new Promise((e) => {
    switch (t) {
      case Y.browser:
        e(To2());
        break;
      case Y.reactNative:
        e(Ro2());
        break;
      case Y.node:
        e(_o2());
        break;
      default:
        e(true);
    }
  });
}
function To2() {
  return Tt2() && navigator?.onLine;
}
async function Ro2() {
  if (pt() && typeof global < "u" && global != null && global.NetInfo) {
    const t = await (global == null ? void 0 : global.NetInfo.fetch());
    return t?.isConnected;
  }
  return true;
}
function _o2() {
  return true;
}
function Ua(t) {
  switch (xt2()) {
    case Y.browser:
      $o2(t);
      break;
    case Y.reactNative:
      Lo2(t);
      break;
    case Y.node:
      break;
  }
}
function $o2(t) {
  !pt() && Tt2() && (window.addEventListener("online", () => t(true)), window.addEventListener("offline", () => t(false)));
}
function Lo2(t) {
  pt() && typeof global < "u" && global != null && global.NetInfo && global?.NetInfo.addEventListener((e) => t(e?.isConnected));
}
function Ta() {
  var t;
  return Tt2() && (0, import_window_getters.getDocument)() ? ((t = (0, import_window_getters.getDocument)()) == null ? void 0 : t.visibilityState) === "visible" : true;
}
var bn2 = {};
var Ra = class {
  static get(e) {
    return bn2[e];
  }
  static set(e, n2) {
    bn2[e] = n2;
  }
  static delete(e) {
    delete bn2[e];
  }
};

// node_modules/@wagmi/connectors/node_modules/@walletconnect/core/dist/index.es.js
var import_events4 = __toESM(require_events());

// node_modules/@wagmi/connectors/node_modules/@walletconnect/types/dist/index.es.js
var import_events2 = __toESM(require_events());
var a = Object.defineProperty;
var u = (e, s, r2) => s in e ? a(e, s, { enumerable: true, configurable: true, writable: true, value: r2 }) : e[s] = r2;
var c = (e, s, r2) => u(e, typeof s != "symbol" ? s + "" : s, r2);
var h2 = class extends IEvents {
  constructor(s) {
    super(), this.opts = s, c(this, "protocol", "wc"), c(this, "version", 2);
  }
};
var p = Object.defineProperty;
var b = (e, s, r2) => s in e ? p(e, s, { enumerable: true, configurable: true, writable: true, value: r2 }) : e[s] = r2;
var v = (e, s, r2) => b(e, typeof s != "symbol" ? s + "" : s, r2);
var I = class extends IEvents {
  constructor(s, r2) {
    super(), this.core = s, this.logger = r2, v(this, "records", /* @__PURE__ */ new Map());
  }
};
var y2 = class {
  constructor(s, r2) {
    this.logger = s, this.core = r2;
  }
};
var m = class extends IEvents {
  constructor(s, r2) {
    super(), this.relayer = s, this.logger = r2;
  }
};
var d = class extends IEvents {
  constructor(s) {
    super();
  }
};
var f2 = class {
  constructor(s, r2, t, q4) {
    this.core = s, this.logger = r2, this.name = t;
  }
};
var P2 = class extends IEvents {
  constructor(s, r2) {
    super(), this.relayer = s, this.logger = r2;
  }
};
var S = class extends IEvents {
  constructor(s, r2) {
    super(), this.core = s, this.logger = r2;
  }
};
var M2 = class {
  constructor(s, r2, t) {
    this.core = s, this.logger = r2, this.store = t;
  }
};
var O = class {
  constructor(s, r2) {
    this.projectId = s, this.logger = r2;
  }
};
var R = class {
  constructor(s, r2, t) {
    this.core = s, this.logger = r2, this.telemetryEnabled = t;
  }
};
var T = Object.defineProperty;
var k3 = (e, s, r2) => s in e ? T(e, s, { enumerable: true, configurable: true, writable: true, value: r2 }) : e[s] = r2;
var i2 = (e, s, r2) => k3(e, typeof s != "symbol" ? s + "" : s, r2);
var J2 = class {
  constructor(s) {
    this.opts = s, i2(this, "protocol", "wc"), i2(this, "version", 2);
  }
};
var V2 = class {
  constructor(s) {
    this.client = s;
  }
};

// node_modules/@wagmi/connectors/node_modules/@walletconnect/core/dist/index.es.js
var import_time3 = __toESM(require_cjs());

// node_modules/@wagmi/connectors/node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js
var import_events3 = __toESM(require_events());
var v2 = () => typeof WebSocket < "u" ? WebSocket : typeof global < "u" && typeof global.WebSocket < "u" ? global.WebSocket : typeof window < "u" && typeof window.WebSocket < "u" ? window.WebSocket : typeof self < "u" && typeof self.WebSocket < "u" ? self.WebSocket : require_browser();
var w = () => typeof WebSocket < "u" || typeof global < "u" && typeof global.WebSocket < "u" || typeof window < "u" && typeof window.WebSocket < "u" || typeof self < "u" && typeof self.WebSocket < "u";
var d2 = (r2) => r2.split("?")[0];
var h3 = 10;
var b2 = v2();
var f3 = class {
  constructor(e) {
    if (this.url = e, this.events = new import_events3.EventEmitter(), this.registering = false, !isWsUrl(e)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e}`);
    this.url = e;
  }
  get connected() {
    return typeof this.socket < "u";
  }
  get connecting() {
    return this.registering;
  }
  on(e, t) {
    this.events.on(e, t);
  }
  once(e, t) {
    this.events.once(e, t);
  }
  off(e, t) {
    this.events.off(e, t);
  }
  removeListener(e, t) {
    this.events.removeListener(e, t);
  }
  async open(e = this.url) {
    await this.register(e);
  }
  async close() {
    return new Promise((e, t) => {
      if (typeof this.socket > "u") {
        t(new Error("Connection already closed"));
        return;
      }
      this.socket.onclose = (n2) => {
        this.onClose(n2), e();
      }, this.socket.close();
    });
  }
  async send(e) {
    typeof this.socket > "u" && (this.socket = await this.register());
    try {
      this.socket.send(safeJsonStringify(e));
    } catch (t) {
      this.onError(e.id, t);
    }
  }
  register(e = this.url) {
    if (!isWsUrl(e)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e}`);
    if (this.registering) {
      const t = this.events.getMaxListeners();
      return (this.events.listenerCount("register_error") >= t || this.events.listenerCount("open") >= t) && this.events.setMaxListeners(t + 1), new Promise((n2, s) => {
        this.events.once("register_error", (o2) => {
          this.resetMaxListeners(), s(o2);
        }), this.events.once("open", () => {
          if (this.resetMaxListeners(), typeof this.socket > "u") return s(new Error("WebSocket connection is missing or invalid"));
          n2(this.socket);
        });
      });
    }
    return this.url = e, this.registering = true, new Promise((t, n2) => {
      const s = (0, esm_exports.isReactNative)() ? void 0 : { rejectUnauthorized: !isLocalhostUrl(e) }, o2 = new b2(e, [], s);
      w() ? o2.onerror = (i3) => {
        const a2 = i3;
        n2(this.emitError(a2.error));
      } : o2.on("error", (i3) => {
        n2(this.emitError(i3));
      }), o2.onopen = () => {
        this.onOpen(o2), t(o2);
      };
    });
  }
  onOpen(e) {
    e.onmessage = (t) => this.onPayload(t), e.onclose = (t) => this.onClose(t), this.socket = e, this.registering = false, this.events.emit("open");
  }
  onClose(e) {
    this.socket = void 0, this.registering = false, this.events.emit("close", e);
  }
  onPayload(e) {
    if (typeof e.data > "u") return;
    const t = typeof e.data == "string" ? safeJsonParse(e.data) : e.data;
    this.events.emit("payload", t);
  }
  onError(e, t) {
    const n2 = this.parseError(t), s = n2.message || n2.toString(), o2 = formatJsonRpcError(e, s);
    this.events.emit("payload", o2);
  }
  parseError(e, t = this.url) {
    return parseConnectionError(e, d2(t), "WS");
  }
  resetMaxListeners() {
    this.events.getMaxListeners() > h3 && this.events.setMaxListeners(h3);
  }
  emitError(e) {
    const t = this.parseError(new Error(e?.message || `WebSocket connection failed for host: ${d2(this.url)}`));
    return this.events.emit("register_error", t), t;
  }
};

// node_modules/@wagmi/connectors/node_modules/@walletconnect/core/dist/index.es.js
var import_window_getters2 = __toESM(require_cjs2());
var ze3 = "wc";
var Le2 = 2;
var he3 = "core";
var B = `${ze3}@2:${he3}:`;
var Et3 = { name: he3, logger: "error" };
var It3 = { database: ":memory:" };
var Tt3 = "crypto";
var ke3 = "client_ed25519_seed";
var Ct2 = import_time3.ONE_DAY;
var Pt3 = "keychain";
var St3 = "0.3";
var Ot3 = "messages";
var Rt3 = "0.3";
var je3 = import_time3.SIX_HOURS;
var At2 = "publisher";
var xt3 = "irn";
var Nt3 = "error";
var Ue2 = "wss://relay.walletconnect.org";
var $t3 = "relayer";
var C2 = { message: "relayer_message", message_ack: "relayer_message_ack", connect: "relayer_connect", disconnect: "relayer_disconnect", error: "relayer_error", connection_stalled: "relayer_connection_stalled", transport_closed: "relayer_transport_closed", publish: "relayer_publish" };
var zt2 = "_subscription";
var L = { payload: "payload", connect: "connect", disconnect: "disconnect", error: "error" };
var Lt3 = 0.1;
var _e3 = "2.21.1";
var Q2 = { link_mode: "link_mode", relay: "relay" };
var le3 = { inbound: "inbound", outbound: "outbound" };
var kt3 = "0.3";
var jt3 = "WALLETCONNECT_CLIENT_ID";
var Fe2 = "WALLETCONNECT_LINK_MODE_APPS";
var $ = { created: "subscription_created", deleted: "subscription_deleted", expired: "subscription_expired", disabled: "subscription_disabled", sync: "subscription_sync", resubscribed: "subscription_resubscribed" };
var Ut2 = "subscription";
var Ft3 = "0.3";
var Ys2 = import_time3.FIVE_SECONDS * 1e3;
var Mt3 = "pairing";
var Kt3 = "0.3";
var se2 = { wc_pairingDelete: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1e3 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1001 } }, wc_pairingPing: { req: { ttl: import_time3.THIRTY_SECONDS, prompt: false, tag: 1002 }, res: { ttl: import_time3.THIRTY_SECONDS, prompt: false, tag: 1003 } }, unregistered_method: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 0 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 0 } } };
var re2 = { create: "pairing_create", expire: "pairing_expire", delete: "pairing_delete", ping: "pairing_ping" };
var F2 = { created: "history_created", updated: "history_updated", deleted: "history_deleted", sync: "history_sync" };
var Bt3 = "history";
var Vt3 = "0.3";
var qt3 = "expirer";
var M3 = { created: "expirer_created", deleted: "expirer_deleted", expired: "expirer_expired", sync: "expirer_sync" };
var Gt2 = "0.3";
var Wt3 = "verify-api";
var Zs2 = "https://verify.walletconnect.com";
var Ht3 = "https://verify.walletconnect.org";
var ue2 = Ht3;
var Yt3 = `${ue2}/v3`;
var Jt3 = [Zs2, Ht3];
var Xt3 = "echo";
var Zt2 = "https://echo.walletconnect.com";
var G3 = { pairing_started: "pairing_started", pairing_uri_validation_success: "pairing_uri_validation_success", pairing_uri_not_expired: "pairing_uri_not_expired", store_new_pairing: "store_new_pairing", subscribing_pairing_topic: "subscribing_pairing_topic", subscribe_pairing_topic_success: "subscribe_pairing_topic_success", existing_pairing: "existing_pairing", pairing_not_expired: "pairing_not_expired", emit_inactive_pairing: "emit_inactive_pairing", emit_session_proposal: "emit_session_proposal", subscribing_to_pairing_topic: "subscribing_to_pairing_topic" };
var Y2 = { no_wss_connection: "no_wss_connection", no_internet_connection: "no_internet_connection", malformed_pairing_uri: "malformed_pairing_uri", active_pairing_already_exists: "active_pairing_already_exists", subscribe_pairing_topic_failure: "subscribe_pairing_topic_failure", pairing_expired: "pairing_expired", proposal_expired: "proposal_expired", proposal_listener_not_found: "proposal_listener_not_found" };
var er3 = { session_approve_started: "session_approve_started", proposal_not_expired: "proposal_not_expired", session_namespaces_validation_success: "session_namespaces_validation_success", create_session_topic: "create_session_topic", subscribing_session_topic: "subscribing_session_topic", subscribe_session_topic_success: "subscribe_session_topic_success", publishing_session_approve: "publishing_session_approve", session_approve_publish_success: "session_approve_publish_success", store_session: "store_session", publishing_session_settle: "publishing_session_settle", session_settle_publish_success: "session_settle_publish_success" };
var tr3 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", proposal_expired: "proposal_expired", subscribe_session_topic_failure: "subscribe_session_topic_failure", session_approve_publish_failure: "session_approve_publish_failure", session_settle_publish_failure: "session_settle_publish_failure", session_approve_namespace_validation_failure: "session_approve_namespace_validation_failure", proposal_not_found: "proposal_not_found" };
var ir3 = { authenticated_session_approve_started: "authenticated_session_approve_started", authenticated_session_not_expired: "authenticated_session_not_expired", chains_caip2_compliant: "chains_caip2_compliant", chains_evm_compliant: "chains_evm_compliant", create_authenticated_session_topic: "create_authenticated_session_topic", cacaos_verified: "cacaos_verified", store_authenticated_session: "store_authenticated_session", subscribing_authenticated_session_topic: "subscribing_authenticated_session_topic", subscribe_authenticated_session_topic_success: "subscribe_authenticated_session_topic_success", publishing_authenticated_session_approve: "publishing_authenticated_session_approve", authenticated_session_approve_publish_success: "authenticated_session_approve_publish_success" };
var sr3 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", missing_session_authenticate_request: "missing_session_authenticate_request", session_authenticate_request_expired: "session_authenticate_request_expired", chains_caip2_compliant_failure: "chains_caip2_compliant_failure", chains_evm_compliant_failure: "chains_evm_compliant_failure", invalid_cacao: "invalid_cacao", subscribe_authenticated_session_topic_failure: "subscribe_authenticated_session_topic_failure", authenticated_session_approve_publish_failure: "authenticated_session_approve_publish_failure", authenticated_session_pending_request_not_found: "authenticated_session_pending_request_not_found" };
var Qt3 = 0.1;
var ei2 = "event-client";
var ti = 86400;
var ii = "https://pulse.walletconnect.org/batch";
function rr3(r2, e) {
  if (r2.length >= 255) throw new TypeError("Alphabet too long");
  for (var t = new Uint8Array(256), i3 = 0; i3 < t.length; i3++) t[i3] = 255;
  for (var s = 0; s < r2.length; s++) {
    var n2 = r2.charAt(s), o2 = n2.charCodeAt(0);
    if (t[o2] !== 255) throw new TypeError(n2 + " is ambiguous");
    t[o2] = s;
  }
  var a2 = r2.length, c3 = r2.charAt(0), h5 = Math.log(a2) / Math.log(256), l4 = Math.log(256) / Math.log(a2);
  function d4(u3) {
    if (u3 instanceof Uint8Array || (ArrayBuffer.isView(u3) ? u3 = new Uint8Array(u3.buffer, u3.byteOffset, u3.byteLength) : Array.isArray(u3) && (u3 = Uint8Array.from(u3))), !(u3 instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (u3.length === 0) return "";
    for (var b6 = 0, x3 = 0, I4 = 0, D3 = u3.length; I4 !== D3 && u3[I4] === 0; ) I4++, b6++;
    for (var j4 = (D3 - I4) * l4 + 1 >>> 0, T3 = new Uint8Array(j4); I4 !== D3; ) {
      for (var q4 = u3[I4], J5 = 0, K5 = j4 - 1; (q4 !== 0 || J5 < x3) && K5 !== -1; K5--, J5++) q4 += 256 * T3[K5] >>> 0, T3[K5] = q4 % a2 >>> 0, q4 = q4 / a2 >>> 0;
      if (q4 !== 0) throw new Error("Non-zero carry");
      x3 = J5, I4++;
    }
    for (var H5 = j4 - x3; H5 !== j4 && T3[H5] === 0; ) H5++;
    for (var me5 = c3.repeat(b6); H5 < j4; ++H5) me5 += r2.charAt(T3[H5]);
    return me5;
  }
  function g2(u3) {
    if (typeof u3 != "string") throw new TypeError("Expected String");
    if (u3.length === 0) return new Uint8Array();
    var b6 = 0;
    if (u3[b6] !== " ") {
      for (var x3 = 0, I4 = 0; u3[b6] === c3; ) x3++, b6++;
      for (var D3 = (u3.length - b6) * h5 + 1 >>> 0, j4 = new Uint8Array(D3); u3[b6]; ) {
        var T3 = t[u3.charCodeAt(b6)];
        if (T3 === 255) return;
        for (var q4 = 0, J5 = D3 - 1; (T3 !== 0 || q4 < I4) && J5 !== -1; J5--, q4++) T3 += a2 * j4[J5] >>> 0, j4[J5] = T3 % 256 >>> 0, T3 = T3 / 256 >>> 0;
        if (T3 !== 0) throw new Error("Non-zero carry");
        I4 = q4, b6++;
      }
      if (u3[b6] !== " ") {
        for (var K5 = D3 - I4; K5 !== D3 && j4[K5] === 0; ) K5++;
        for (var H5 = new Uint8Array(x3 + (D3 - K5)), me5 = x3; K5 !== D3; ) H5[me5++] = j4[K5++];
        return H5;
      }
    }
  }
  function _2(u3) {
    var b6 = g2(u3);
    if (b6) return b6;
    throw new Error(`Non-${e} character`);
  }
  return { encode: d4, decodeUnsafe: g2, decode: _2 };
}
var nr3 = rr3;
var or3 = nr3;
var si2 = (r2) => {
  if (r2 instanceof Uint8Array && r2.constructor.name === "Uint8Array") return r2;
  if (r2 instanceof ArrayBuffer) return new Uint8Array(r2);
  if (ArrayBuffer.isView(r2)) return new Uint8Array(r2.buffer, r2.byteOffset, r2.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var ar3 = (r2) => new TextEncoder().encode(r2);
var cr3 = (r2) => new TextDecoder().decode(r2);
var hr3 = class {
  constructor(e, t, i3) {
    this.name = e, this.prefix = t, this.baseEncode = i3;
  }
  encode(e) {
    if (e instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var lr3 = class {
  constructor(e, t, i3) {
    if (this.name = e, this.prefix = t, t.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
    this.prefixCodePoint = t.codePointAt(0), this.baseDecode = i3;
  }
  decode(e) {
    if (typeof e == "string") {
      if (e.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e.slice(this.prefix.length));
    } else throw Error("Can only multibase decode strings");
  }
  or(e) {
    return ri2(this, e);
  }
};
var ur3 = class {
  constructor(e) {
    this.decoders = e;
  }
  or(e) {
    return ri2(this, e);
  }
  decode(e) {
    const t = e[0], i3 = this.decoders[t];
    if (i3) return i3.decode(e);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var ri2 = (r2, e) => new ur3({ ...r2.decoders || { [r2.prefix]: r2 }, ...e.decoders || { [e.prefix]: e } });
var dr3 = class {
  constructor(e, t, i3, s) {
    this.name = e, this.prefix = t, this.baseEncode = i3, this.baseDecode = s, this.encoder = new hr3(e, t, i3), this.decoder = new lr3(e, t, s);
  }
  encode(e) {
    return this.encoder.encode(e);
  }
  decode(e) {
    return this.decoder.decode(e);
  }
};
var Ee3 = ({ name: r2, prefix: e, encode: t, decode: i3 }) => new dr3(r2, e, t, i3);
var de3 = ({ prefix: r2, name: e, alphabet: t }) => {
  const { encode: i3, decode: s } = or3(t, e);
  return Ee3({ prefix: r2, name: e, encode: i3, decode: (n2) => si2(s(n2)) });
};
var gr2 = (r2, e, t, i3) => {
  const s = {};
  for (let l4 = 0; l4 < e.length; ++l4) s[e[l4]] = l4;
  let n2 = r2.length;
  for (; r2[n2 - 1] === "="; ) --n2;
  const o2 = new Uint8Array(n2 * t / 8 | 0);
  let a2 = 0, c3 = 0, h5 = 0;
  for (let l4 = 0; l4 < n2; ++l4) {
    const d4 = s[r2[l4]];
    if (d4 === void 0) throw new SyntaxError(`Non-${i3} character`);
    c3 = c3 << t | d4, a2 += t, a2 >= 8 && (a2 -= 8, o2[h5++] = 255 & c3 >> a2);
  }
  if (a2 >= t || 255 & c3 << 8 - a2) throw new SyntaxError("Unexpected end of data");
  return o2;
};
var pr2 = (r2, e, t) => {
  const i3 = e[e.length - 1] === "=", s = (1 << t) - 1;
  let n2 = "", o2 = 0, a2 = 0;
  for (let c3 = 0; c3 < r2.length; ++c3) for (a2 = a2 << 8 | r2[c3], o2 += 8; o2 > t; ) o2 -= t, n2 += e[s & a2 >> o2];
  if (o2 && (n2 += e[s & a2 << t - o2]), i3) for (; n2.length * t & 7; ) n2 += "=";
  return n2;
};
var P3 = ({ name: r2, prefix: e, bitsPerChar: t, alphabet: i3 }) => Ee3({ prefix: e, name: r2, encode(s) {
  return pr2(s, i3, t);
}, decode(s) {
  return gr2(s, i3, t, r2);
} });
var yr2 = Ee3({ prefix: "\0", name: "identity", encode: (r2) => cr3(r2), decode: (r2) => ar3(r2) });
var br3 = Object.freeze({ __proto__: null, identity: yr2 });
var mr3 = P3({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var fr3 = Object.freeze({ __proto__: null, base2: mr3 });
var Dr3 = P3({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var vr3 = Object.freeze({ __proto__: null, base8: Dr3 });
var wr3 = de3({ prefix: "9", name: "base10", alphabet: "0123456789" });
var _r3 = Object.freeze({ __proto__: null, base10: wr3 });
var Er2 = P3({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Ir3 = P3({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Tr3 = Object.freeze({ __proto__: null, base16: Er2, base16upper: Ir3 });
var Cr3 = P3({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Pr3 = P3({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var Sr3 = P3({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var Or3 = P3({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var Rr3 = P3({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var Ar3 = P3({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var xr2 = P3({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var Nr3 = P3({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var $r3 = P3({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var zr3 = Object.freeze({ __proto__: null, base32: Cr3, base32upper: Pr3, base32pad: Sr3, base32padupper: Or3, base32hex: Rr3, base32hexupper: Ar3, base32hexpad: xr2, base32hexpadupper: Nr3, base32z: $r3 });
var Lr3 = de3({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var kr3 = de3({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var jr3 = Object.freeze({ __proto__: null, base36: Lr3, base36upper: kr3 });
var Ur3 = de3({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Fr3 = de3({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var Mr3 = Object.freeze({ __proto__: null, base58btc: Ur3, base58flickr: Fr3 });
var Kr3 = P3({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var Br3 = P3({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var Vr3 = P3({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var qr3 = P3({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Gr3 = Object.freeze({ __proto__: null, base64: Kr3, base64pad: Br3, base64url: Vr3, base64urlpad: qr3 });
var ni2 = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var Wr3 = ni2.reduce((r2, e, t) => (r2[t] = e, r2), []);
var Hr3 = ni2.reduce((r2, e, t) => (r2[e.codePointAt(0)] = t, r2), []);
function Yr3(r2) {
  return r2.reduce((e, t) => (e += Wr3[t], e), "");
}
function Jr3(r2) {
  const e = [];
  for (const t of r2) {
    const i3 = Hr3[t.codePointAt(0)];
    if (i3 === void 0) throw new Error(`Non-base256emoji character: ${t}`);
    e.push(i3);
  }
  return new Uint8Array(e);
}
var Xr3 = Ee3({ prefix: "🚀", name: "base256emoji", encode: Yr3, decode: Jr3 });
var Zr3 = Object.freeze({ __proto__: null, base256emoji: Xr3 });
var Qr3 = ai;
var oi2 = 128;
var en3 = 127;
var tn2 = ~en3;
var sn3 = Math.pow(2, 31);
function ai(r2, e, t) {
  e = e || [], t = t || 0;
  for (var i3 = t; r2 >= sn3; ) e[t++] = r2 & 255 | oi2, r2 /= 128;
  for (; r2 & tn2; ) e[t++] = r2 & 255 | oi2, r2 >>>= 7;
  return e[t] = r2 | 0, ai.bytes = t - i3 + 1, e;
}
var rn3 = Me3;
var nn3 = 128;
var ci = 127;
function Me3(r2, i3) {
  var t = 0, i3 = i3 || 0, s = 0, n2 = i3, o2, a2 = r2.length;
  do {
    if (n2 >= a2) throw Me3.bytes = 0, new RangeError("Could not decode varint");
    o2 = r2[n2++], t += s < 28 ? (o2 & ci) << s : (o2 & ci) * Math.pow(2, s), s += 7;
  } while (o2 >= nn3);
  return Me3.bytes = n2 - i3, t;
}
var on3 = Math.pow(2, 7);
var an2 = Math.pow(2, 14);
var cn2 = Math.pow(2, 21);
var hn2 = Math.pow(2, 28);
var ln2 = Math.pow(2, 35);
var un2 = Math.pow(2, 42);
var dn2 = Math.pow(2, 49);
var gn3 = Math.pow(2, 56);
var pn2 = Math.pow(2, 63);
var yn3 = function(r2) {
  return r2 < on3 ? 1 : r2 < an2 ? 2 : r2 < cn2 ? 3 : r2 < hn2 ? 4 : r2 < ln2 ? 5 : r2 < un2 ? 6 : r2 < dn2 ? 7 : r2 < gn3 ? 8 : r2 < pn2 ? 9 : 10;
};
var bn3 = { encode: Qr3, decode: rn3, encodingLength: yn3 };
var hi = bn3;
var li2 = (r2, e, t = 0) => (hi.encode(r2, e, t), e);
var ui = (r2) => hi.encodingLength(r2);
var Ke3 = (r2, e) => {
  const t = e.byteLength, i3 = ui(r2), s = i3 + ui(t), n2 = new Uint8Array(s + t);
  return li2(r2, n2, 0), li2(t, n2, i3), n2.set(e, s), new mn3(r2, t, e, n2);
};
var mn3 = class {
  constructor(e, t, i3, s) {
    this.code = e, this.size = t, this.digest = i3, this.bytes = s;
  }
};
var di = ({ name: r2, code: e, encode: t }) => new fn2(r2, e, t);
var fn2 = class {
  constructor(e, t, i3) {
    this.name = e, this.code = t, this.encode = i3;
  }
  digest(e) {
    if (e instanceof Uint8Array) {
      const t = this.encode(e);
      return t instanceof Uint8Array ? Ke3(this.code, t) : t.then((i3) => Ke3(this.code, i3));
    } else throw Error("Unknown type, must be binary type");
  }
};
var gi2 = (r2) => async (e) => new Uint8Array(await crypto.subtle.digest(r2, e));
var Dn = di({ name: "sha2-256", code: 18, encode: gi2("SHA-256") });
var vn2 = di({ name: "sha2-512", code: 19, encode: gi2("SHA-512") });
var wn2 = Object.freeze({ __proto__: null, sha256: Dn, sha512: vn2 });
var pi = 0;
var _n3 = "identity";
var yi2 = si2;
var En3 = (r2) => Ke3(pi, yi2(r2));
var In2 = { code: pi, name: _n3, encode: yi2, digest: En3 };
var Tn3 = Object.freeze({ __proto__: null, identity: In2 });
new TextEncoder(), new TextDecoder();
var bi2 = { ...br3, ...fr3, ...vr3, ..._r3, ...Tr3, ...zr3, ...jr3, ...Mr3, ...Gr3, ...Zr3 };
({ ...wn2, ...Tn3 });
function Cn3(r2 = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? globalThis.Buffer.allocUnsafe(r2) : new Uint8Array(r2);
}
function mi2(r2, e, t, i3) {
  return { name: r2, prefix: e, encoder: { name: r2, prefix: e, encode: t }, decoder: { decode: i3 } };
}
var fi2 = mi2("utf8", "u", (r2) => "u" + new TextDecoder("utf8").decode(r2), (r2) => new TextEncoder().encode(r2.substring(1)));
var Be2 = mi2("ascii", "a", (r2) => {
  let e = "a";
  for (let t = 0; t < r2.length; t++) e += String.fromCharCode(r2[t]);
  return e;
}, (r2) => {
  r2 = r2.substring(1);
  const e = Cn3(r2.length);
  for (let t = 0; t < r2.length; t++) e[t] = r2.charCodeAt(t);
  return e;
});
var Pn3 = { utf8: fi2, "utf-8": fi2, hex: bi2.base16, latin1: Be2, ascii: Be2, binary: Be2, ...bi2 };
function Sn3(r2, e = "utf8") {
  const t = Pn3[e];
  if (!t) throw new Error(`Unsupported encoding "${e}"`);
  return (e === "utf8" || e === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(r2, "utf8") : t.decoder.decode(`${t.prefix}${r2}`);
}
var On3 = Object.defineProperty;
var Rn3 = (r2, e, t) => e in r2 ? On3(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var W2 = (r2, e, t) => Rn3(r2, typeof e != "symbol" ? e + "" : e, t);
var Di2 = class {
  constructor(e, t) {
    this.core = e, this.logger = t, W2(this, "keychain", /* @__PURE__ */ new Map()), W2(this, "name", Pt3), W2(this, "version", St3), W2(this, "initialized", false), W2(this, "storagePrefix", B), W2(this, "init", async () => {
      if (!this.initialized) {
        const i3 = await this.getKeyChain();
        typeof i3 < "u" && (this.keychain = i3), this.initialized = true;
      }
    }), W2(this, "has", (i3) => (this.isInitialized(), this.keychain.has(i3))), W2(this, "set", async (i3, s) => {
      this.isInitialized(), this.keychain.set(i3, s), await this.persist();
    }), W2(this, "get", (i3) => {
      this.isInitialized();
      const s = this.keychain.get(i3);
      if (typeof s > "u") {
        const { message: n2 } = ht2("NO_MATCHING_KEY", `${this.name}: ${i3}`);
        throw new Error(n2);
      }
      return s;
    }), W2(this, "del", async (i3) => {
      this.isInitialized(), this.keychain.delete(i3), await this.persist();
    }), this.core = e, this.logger = E(t, this.name);
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  async setKeyChain(e) {
    await this.core.storage.setItem(this.storageKey, fi(e));
  }
  async getKeyChain() {
    const e = await this.core.storage.getItem(this.storageKey);
    return typeof e < "u" ? li(e) : void 0;
  }
  async persist() {
    await this.setKeyChain(this.keychain);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = ht2("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var An2 = Object.defineProperty;
var xn3 = (r2, e, t) => e in r2 ? An2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var S2 = (r2, e, t) => xn3(r2, typeof e != "symbol" ? e + "" : e, t);
var vi2 = class {
  constructor(e, t, i3) {
    this.core = e, this.logger = t, S2(this, "name", Tt3), S2(this, "keychain"), S2(this, "randomSessionIdentifier", jc()), S2(this, "initialized", false), S2(this, "init", async () => {
      this.initialized || (await this.keychain.init(), this.initialized = true);
    }), S2(this, "hasKeys", (s) => (this.isInitialized(), this.keychain.has(s))), S2(this, "getClientId", async () => {
      this.isInitialized();
      const s = await this.getClientSeed(), n2 = Po(s);
      return Qe(n2.publicKey);
    }), S2(this, "generateKeyPair", () => {
      this.isInitialized();
      const s = Lc();
      return this.setPrivateKey(s.publicKey, s.privateKey);
    }), S2(this, "signJWT", async (s) => {
      this.isInitialized();
      const n2 = await this.getClientSeed(), o2 = Po(n2), a2 = this.randomSessionIdentifier, c3 = Ct2;
      return await Qo(a2, s, c3, o2);
    }), S2(this, "generateSharedKey", (s, n2, o2) => {
      this.isInitialized();
      const a2 = this.getPrivateKey(s), c3 = Cc(a2, n2);
      return this.setSymKey(c3, o2);
    }), S2(this, "setSymKey", async (s, n2) => {
      this.isInitialized();
      const o2 = n2 || Pc(s);
      return await this.keychain.set(o2, s), o2;
    }), S2(this, "deleteKeyPair", async (s) => {
      this.isInitialized(), await this.keychain.del(s);
    }), S2(this, "deleteSymKey", async (s) => {
      this.isInitialized(), await this.keychain.del(s);
    }), S2(this, "encode", async (s, n2, o2) => {
      this.isInitialized();
      const a2 = oo2(o2), c3 = safeJsonStringify(n2);
      if (Fc(a2)) return Dc(c3, o2?.encoding);
      if (Kc(a2)) {
        const g2 = a2.senderPublicKey, _2 = a2.receiverPublicKey;
        s = await this.generateSharedKey(g2, _2);
      }
      const h5 = this.getSymKey(s), { type: l4, senderPublicKey: d4 } = a2;
      return Vc({ type: l4, symKey: h5, message: c3, senderPublicKey: d4, encoding: o2?.encoding });
    }), S2(this, "decode", async (s, n2, o2) => {
      this.isInitialized();
      const a2 = qc(n2, o2);
      if (Fc(a2)) {
        const c3 = Hc(n2, o2?.encoding);
        return safeJsonParse(c3);
      }
      if (Kc(a2)) {
        const c3 = a2.receiverPublicKey, h5 = a2.senderPublicKey;
        s = await this.generateSharedKey(c3, h5);
      }
      try {
        const c3 = this.getSymKey(s), h5 = Mc({ symKey: c3, encoded: n2, encoding: o2?.encoding });
        return safeJsonParse(h5);
      } catch (c3) {
        this.logger.error(`Failed to decode message from topic: '${s}', clientId: '${await this.getClientId()}'`), this.logger.error(c3);
      }
    }), S2(this, "getPayloadType", (s, n2 = qt2) => {
      const o2 = Se2({ encoded: s, encoding: n2 });
      return Bt2(o2.type);
    }), S2(this, "getPayloadSenderPublicKey", (s, n2 = qt2) => {
      const o2 = Se2({ encoded: s, encoding: n2 });
      return o2.senderPublicKey ? toString(o2.senderPublicKey, G2) : void 0;
    }), this.core = e, this.logger = E(t, this.name), this.keychain = i3 || new Di2(this.core, this.logger);
  }
  get context() {
    return y(this.logger);
  }
  async setPrivateKey(e, t) {
    return await this.keychain.set(e, t), e;
  }
  getPrivateKey(e) {
    return this.keychain.get(e);
  }
  async getClientSeed() {
    let e = "";
    try {
      e = this.keychain.get(ke3);
    } catch {
      e = jc(), await this.keychain.set(ke3, e);
    }
    return Sn3(e, "base16");
  }
  getSymKey(e) {
    return this.keychain.get(e);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = ht2("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var Nn2 = Object.defineProperty;
var $n3 = Object.defineProperties;
var zn3 = Object.getOwnPropertyDescriptors;
var wi2 = Object.getOwnPropertySymbols;
var Ln2 = Object.prototype.hasOwnProperty;
var kn3 = Object.prototype.propertyIsEnumerable;
var Ve3 = (r2, e, t) => e in r2 ? Nn2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var jn3 = (r2, e) => {
  for (var t in e || (e = {})) Ln2.call(e, t) && Ve3(r2, t, e[t]);
  if (wi2) for (var t of wi2(e)) kn3.call(e, t) && Ve3(r2, t, e[t]);
  return r2;
};
var Un2 = (r2, e) => $n3(r2, zn3(e));
var k4 = (r2, e, t) => Ve3(r2, typeof e != "symbol" ? e + "" : e, t);
var _i2 = class extends y2 {
  constructor(e, t) {
    super(e, t), this.logger = e, this.core = t, k4(this, "messages", /* @__PURE__ */ new Map()), k4(this, "messagesWithoutClientAck", /* @__PURE__ */ new Map()), k4(this, "name", Ot3), k4(this, "version", Rt3), k4(this, "initialized", false), k4(this, "storagePrefix", B), k4(this, "init", async () => {
      if (!this.initialized) {
        this.logger.trace("Initialized");
        try {
          const i3 = await this.getRelayerMessages();
          typeof i3 < "u" && (this.messages = i3);
          const s = await this.getRelayerMessagesWithoutClientAck();
          typeof s < "u" && (this.messagesWithoutClientAck = s), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", size: this.messages.size });
        } catch (i3) {
          this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(i3);
        } finally {
          this.initialized = true;
        }
      }
    }), k4(this, "set", async (i3, s, n2) => {
      this.isInitialized();
      const o2 = kc(s);
      let a2 = this.messages.get(i3);
      if (typeof a2 > "u" && (a2 = {}), typeof a2[o2] < "u") return o2;
      if (a2[o2] = s, this.messages.set(i3, a2), n2 === le3.inbound) {
        const c3 = this.messagesWithoutClientAck.get(i3) || {};
        this.messagesWithoutClientAck.set(i3, Un2(jn3({}, c3), { [o2]: s }));
      }
      return await this.persist(), o2;
    }), k4(this, "get", (i3) => {
      this.isInitialized();
      let s = this.messages.get(i3);
      return typeof s > "u" && (s = {}), s;
    }), k4(this, "getWithoutAck", (i3) => {
      this.isInitialized();
      const s = {};
      for (const n2 of i3) {
        const o2 = this.messagesWithoutClientAck.get(n2) || {};
        s[n2] = Object.values(o2);
      }
      return s;
    }), k4(this, "has", (i3, s) => {
      this.isInitialized();
      const n2 = this.get(i3), o2 = kc(s);
      return typeof n2[o2] < "u";
    }), k4(this, "ack", async (i3, s) => {
      this.isInitialized();
      const n2 = this.messagesWithoutClientAck.get(i3);
      if (typeof n2 > "u") return;
      const o2 = kc(s);
      delete n2[o2], Object.keys(n2).length === 0 ? this.messagesWithoutClientAck.delete(i3) : this.messagesWithoutClientAck.set(i3, n2), await this.persist();
    }), k4(this, "del", async (i3) => {
      this.isInitialized(), this.messages.delete(i3), this.messagesWithoutClientAck.delete(i3), await this.persist();
    }), this.logger = E(e, this.name), this.core = t;
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get storageKeyWithoutClientAck() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name + "_withoutClientAck";
  }
  async setRelayerMessages(e) {
    await this.core.storage.setItem(this.storageKey, fi(e));
  }
  async setRelayerMessagesWithoutClientAck(e) {
    await this.core.storage.setItem(this.storageKeyWithoutClientAck, fi(e));
  }
  async getRelayerMessages() {
    const e = await this.core.storage.getItem(this.storageKey);
    return typeof e < "u" ? li(e) : void 0;
  }
  async getRelayerMessagesWithoutClientAck() {
    const e = await this.core.storage.getItem(this.storageKeyWithoutClientAck);
    return typeof e < "u" ? li(e) : void 0;
  }
  async persist() {
    await this.setRelayerMessages(this.messages), await this.setRelayerMessagesWithoutClientAck(this.messagesWithoutClientAck);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = ht2("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var Fn3 = Object.defineProperty;
var Mn3 = Object.defineProperties;
var Kn3 = Object.getOwnPropertyDescriptors;
var Ei2 = Object.getOwnPropertySymbols;
var Bn2 = Object.prototype.hasOwnProperty;
var Vn3 = Object.prototype.propertyIsEnumerable;
var qe3 = (r2, e, t) => e in r2 ? Fn3(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var Ie3 = (r2, e) => {
  for (var t in e || (e = {})) Bn2.call(e, t) && qe3(r2, t, e[t]);
  if (Ei2) for (var t of Ei2(e)) Vn3.call(e, t) && qe3(r2, t, e[t]);
  return r2;
};
var Ge3 = (r2, e) => Mn3(r2, Kn3(e));
var V3 = (r2, e, t) => qe3(r2, typeof e != "symbol" ? e + "" : e, t);
var qn2 = class extends m {
  constructor(e, t) {
    super(e, t), this.relayer = e, this.logger = t, V3(this, "events", new import_events4.EventEmitter()), V3(this, "name", At2), V3(this, "queue", /* @__PURE__ */ new Map()), V3(this, "publishTimeout", (0, import_time3.toMiliseconds)(import_time3.ONE_MINUTE)), V3(this, "initialPublishTimeout", (0, import_time3.toMiliseconds)(import_time3.ONE_SECOND * 15)), V3(this, "needsTransportRestart", false), V3(this, "publish", async (i3, s, n2) => {
      var o2;
      this.logger.debug("Publishing Payload"), this.logger.trace({ type: "method", method: "publish", params: { topic: i3, message: s, opts: n2 } });
      const a2 = n2?.ttl || je3, c3 = Zc(n2), h5 = n2?.prompt || false, l4 = n2?.tag || 0, d4 = n2?.id || getBigIntRpcId().toString(), g2 = { topic: i3, message: s, opts: { ttl: a2, relay: c3, prompt: h5, tag: l4, id: d4, attestation: n2?.attestation, tvf: n2?.tvf } }, _2 = `Failed to publish payload, please try again. id:${d4} tag:${l4}`;
      try {
        const u3 = new Promise(async (b6) => {
          const x3 = ({ id: D3 }) => {
            g2.opts.id === D3 && (this.removeRequestFromQueue(D3), this.relayer.events.removeListener(C2.publish, x3), b6(g2));
          };
          this.relayer.events.on(C2.publish, x3);
          const I4 = yi(new Promise((D3, j4) => {
            this.rpcPublish({ topic: i3, message: s, ttl: a2, prompt: h5, tag: l4, id: d4, attestation: n2?.attestation, tvf: n2?.tvf }).then(D3).catch((T3) => {
              this.logger.warn(T3, T3?.message), j4(T3);
            });
          }), this.initialPublishTimeout, `Failed initial publish, retrying.... id:${d4} tag:${l4}`);
          try {
            await I4, this.events.removeListener(C2.publish, x3);
          } catch (D3) {
            this.queue.set(d4, Ge3(Ie3({}, g2), { attempt: 1 })), this.logger.warn(D3, D3?.message);
          }
        });
        this.logger.trace({ type: "method", method: "publish", params: { id: d4, topic: i3, message: s, opts: n2 } }), await yi(u3, this.publishTimeout, _2);
      } catch (u3) {
        if (this.logger.debug("Failed to Publish Payload"), this.logger.error(u3), (o2 = n2?.internal) != null && o2.throwOnFailedPublish) throw u3;
      } finally {
        this.queue.delete(d4);
      }
    }), V3(this, "on", (i3, s) => {
      this.events.on(i3, s);
    }), V3(this, "once", (i3, s) => {
      this.events.once(i3, s);
    }), V3(this, "off", (i3, s) => {
      this.events.off(i3, s);
    }), V3(this, "removeListener", (i3, s) => {
      this.events.removeListener(i3, s);
    }), this.relayer = e, this.logger = E(t, this.name), this.registerEventListeners();
  }
  get context() {
    return y(this.logger);
  }
  async rpcPublish(e) {
    var t, i3, s, n2;
    const { topic: o2, message: a2, ttl: c3 = je3, prompt: h5, tag: l4, id: d4, attestation: g2, tvf: _2 } = e, u3 = { method: Yc(Zc().protocol).publish, params: Ie3({ topic: o2, message: a2, ttl: c3, prompt: h5, tag: l4, attestation: g2 }, _2), id: d4 };
    Et2((t = u3.params) == null ? void 0 : t.prompt) && ((i3 = u3.params) == null || delete i3.prompt), Et2((s = u3.params) == null ? void 0 : s.tag) && ((n2 = u3.params) == null || delete n2.tag), this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "message", direction: "outgoing", request: u3 });
    const b6 = await this.relayer.request(u3);
    return this.relayer.events.emit(C2.publish, e), this.logger.debug("Successfully Published Payload"), b6;
  }
  removeRequestFromQueue(e) {
    this.queue.delete(e);
  }
  checkQueue() {
    this.queue.forEach(async (e, t) => {
      const i3 = e.attempt + 1;
      this.queue.set(t, Ge3(Ie3({}, e), { attempt: i3 }));
      const { topic: s, message: n2, opts: o2, attestation: a2 } = e;
      this.logger.warn({}, `Publisher: queue->publishing: ${e.opts.id}, tag: ${e.opts.tag}, attempt: ${i3}`), await this.rpcPublish(Ge3(Ie3({}, e), { topic: s, message: n2, ttl: o2.ttl, prompt: o2.prompt, tag: o2.tag, id: o2.id, attestation: a2, tvf: o2.tvf })), this.logger.warn({}, `Publisher: queue->published: ${e.opts.id}`);
    });
  }
  registerEventListeners() {
    this.relayer.core.heartbeat.on(r.pulse, () => {
      if (this.needsTransportRestart) {
        this.needsTransportRestart = false, this.relayer.events.emit(C2.connection_stalled);
        return;
      }
      this.checkQueue();
    }), this.relayer.on(C2.message_ack, (e) => {
      this.removeRequestFromQueue(e.id.toString());
    });
  }
};
var Gn3 = Object.defineProperty;
var Wn3 = (r2, e, t) => e in r2 ? Gn3(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var ne2 = (r2, e, t) => Wn3(r2, typeof e != "symbol" ? e + "" : e, t);
var Hn2 = class {
  constructor() {
    ne2(this, "map", /* @__PURE__ */ new Map()), ne2(this, "set", (e, t) => {
      const i3 = this.get(e);
      this.exists(e, t) || this.map.set(e, [...i3, t]);
    }), ne2(this, "get", (e) => this.map.get(e) || []), ne2(this, "exists", (e, t) => this.get(e).includes(t)), ne2(this, "delete", (e, t) => {
      if (typeof t > "u") {
        this.map.delete(e);
        return;
      }
      if (!this.map.has(e)) return;
      const i3 = this.get(e);
      if (!this.exists(e, t)) return;
      const s = i3.filter((n2) => n2 !== t);
      if (!s.length) {
        this.map.delete(e);
        return;
      }
      this.map.set(e, s);
    }), ne2(this, "clear", () => {
      this.map.clear();
    });
  }
  get topics() {
    return Array.from(this.map.keys());
  }
};
var Yn3 = Object.defineProperty;
var Jn3 = Object.defineProperties;
var Xn3 = Object.getOwnPropertyDescriptors;
var Ii2 = Object.getOwnPropertySymbols;
var Zn3 = Object.prototype.hasOwnProperty;
var Qn3 = Object.prototype.propertyIsEnumerable;
var We3 = (r2, e, t) => e in r2 ? Yn3(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var ge3 = (r2, e) => {
  for (var t in e || (e = {})) Zn3.call(e, t) && We3(r2, t, e[t]);
  if (Ii2) for (var t of Ii2(e)) Qn3.call(e, t) && We3(r2, t, e[t]);
  return r2;
};
var He3 = (r2, e) => Jn3(r2, Xn3(e));
var f4 = (r2, e, t) => We3(r2, typeof e != "symbol" ? e + "" : e, t);
var Ti2 = class extends P2 {
  constructor(e, t) {
    super(e, t), this.relayer = e, this.logger = t, f4(this, "subscriptions", /* @__PURE__ */ new Map()), f4(this, "topicMap", new Hn2()), f4(this, "events", new import_events4.EventEmitter()), f4(this, "name", Ut2), f4(this, "version", Ft3), f4(this, "pending", /* @__PURE__ */ new Map()), f4(this, "cached", []), f4(this, "initialized", false), f4(this, "storagePrefix", B), f4(this, "subscribeTimeout", (0, import_time3.toMiliseconds)(import_time3.ONE_MINUTE)), f4(this, "initialSubscribeTimeout", (0, import_time3.toMiliseconds)(import_time3.ONE_SECOND * 15)), f4(this, "clientId"), f4(this, "batchSubscribeTopicsLimit", 500), f4(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), this.registerEventListeners(), await this.restore()), this.initialized = true;
    }), f4(this, "subscribe", async (i3, s) => {
      this.isInitialized(), this.logger.debug("Subscribing Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: i3, opts: s } });
      try {
        const n2 = Zc(s), o2 = { topic: i3, relay: n2, transportType: s?.transportType };
        this.pending.set(i3, o2);
        const a2 = await this.rpcSubscribe(i3, n2, s);
        return typeof a2 == "string" && (this.onSubscribe(a2, o2), this.logger.debug("Successfully Subscribed Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: i3, opts: s } })), a2;
      } catch (n2) {
        throw this.logger.debug("Failed to Subscribe Topic"), this.logger.error(n2), n2;
      }
    }), f4(this, "unsubscribe", async (i3, s) => {
      this.isInitialized(), typeof s?.id < "u" ? await this.unsubscribeById(i3, s.id, s) : await this.unsubscribeByTopic(i3, s);
    }), f4(this, "isSubscribed", (i3) => new Promise((s) => {
      s(this.topicMap.topics.includes(i3));
    })), f4(this, "isKnownTopic", (i3) => new Promise((s) => {
      s(this.topicMap.topics.includes(i3) || this.pending.has(i3) || this.cached.some((n2) => n2.topic === i3));
    })), f4(this, "on", (i3, s) => {
      this.events.on(i3, s);
    }), f4(this, "once", (i3, s) => {
      this.events.once(i3, s);
    }), f4(this, "off", (i3, s) => {
      this.events.off(i3, s);
    }), f4(this, "removeListener", (i3, s) => {
      this.events.removeListener(i3, s);
    }), f4(this, "start", async () => {
      await this.onConnect();
    }), f4(this, "stop", async () => {
      await this.onDisconnect();
    }), f4(this, "restart", async () => {
      await this.restore(), await this.onRestart();
    }), f4(this, "checkPending", async () => {
      if (this.pending.size === 0 && (!this.initialized || !this.relayer.connected)) return;
      const i3 = [];
      this.pending.forEach((s) => {
        i3.push(s);
      }), await this.batchSubscribe(i3);
    }), f4(this, "registerEventListeners", () => {
      this.relayer.core.heartbeat.on(r.pulse, async () => {
        await this.checkPending();
      }), this.events.on($.created, async (i3) => {
        const s = $.created;
        this.logger.info(`Emitting ${s}`), this.logger.debug({ type: "event", event: s, data: i3 }), await this.persist();
      }), this.events.on($.deleted, async (i3) => {
        const s = $.deleted;
        this.logger.info(`Emitting ${s}`), this.logger.debug({ type: "event", event: s, data: i3 }), await this.persist();
      });
    }), this.relayer = e, this.logger = E(t, this.name), this.clientId = "";
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.subscriptions.size;
  }
  get ids() {
    return Array.from(this.subscriptions.keys());
  }
  get values() {
    return Array.from(this.subscriptions.values());
  }
  get topics() {
    return this.topicMap.topics;
  }
  get hasAnyTopics() {
    return this.topicMap.topics.length > 0 || this.pending.size > 0 || this.cached.length > 0 || this.subscriptions.size > 0;
  }
  hasSubscription(e, t) {
    let i3 = false;
    try {
      i3 = this.getSubscription(e).topic === t;
    } catch {
    }
    return i3;
  }
  reset() {
    this.cached = [], this.initialized = true;
  }
  onDisable() {
    this.values.length > 0 && (this.cached = this.values), this.subscriptions.clear(), this.topicMap.clear();
  }
  async unsubscribeByTopic(e, t) {
    const i3 = this.topicMap.get(e);
    await Promise.all(i3.map(async (s) => await this.unsubscribeById(e, s, t)));
  }
  async unsubscribeById(e, t, i3) {
    this.logger.debug("Unsubscribing Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e, id: t, opts: i3 } });
    try {
      const s = Zc(i3);
      await this.restartToComplete({ topic: e, id: t, relay: s }), await this.rpcUnsubscribe(e, t, s);
      const n2 = Nt2("USER_DISCONNECTED", `${this.name}, ${e}`);
      await this.onUnsubscribe(e, t, n2), this.logger.debug("Successfully Unsubscribed Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e, id: t, opts: i3 } });
    } catch (s) {
      throw this.logger.debug("Failed to Unsubscribe Topic"), this.logger.error(s), s;
    }
  }
  async rpcSubscribe(e, t, i3) {
    var s;
    (!i3 || i3?.transportType === Q2.relay) && await this.restartToComplete({ topic: e, id: e, relay: t });
    const n2 = { method: Yc(t.protocol).subscribe, params: { topic: e } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: n2 });
    const o2 = (s = i3?.internal) == null ? void 0 : s.throwOnFailedPublish;
    try {
      const a2 = await this.getSubscriptionId(e);
      if (i3?.transportType === Q2.link_mode) return setTimeout(() => {
        (this.relayer.connected || this.relayer.connecting) && this.relayer.request(n2).catch((l4) => this.logger.warn(l4));
      }, (0, import_time3.toMiliseconds)(import_time3.ONE_SECOND)), a2;
      const c3 = new Promise(async (l4) => {
        const d4 = (g2) => {
          g2.topic === e && (this.events.removeListener($.created, d4), l4(g2.id));
        };
        this.events.on($.created, d4);
        try {
          const g2 = await yi(new Promise((_2, u3) => {
            this.relayer.request(n2).catch((b6) => {
              this.logger.warn(b6, b6?.message), u3(b6);
            }).then(_2);
          }), this.initialSubscribeTimeout, `Subscribing to ${e} failed, please try again`);
          this.events.removeListener($.created, d4), l4(g2);
        } catch {
        }
      }), h5 = await yi(c3, this.subscribeTimeout, `Subscribing to ${e} failed, please try again`);
      if (!h5 && o2) throw new Error(`Subscribing to ${e} failed, please try again`);
      return h5 ? a2 : null;
    } catch (a2) {
      if (this.logger.debug("Outgoing Relay Subscribe Payload stalled"), this.relayer.events.emit(C2.connection_stalled), o2) throw a2;
    }
    return null;
  }
  async rpcBatchSubscribe(e) {
    if (!e.length) return;
    const t = e[0].relay, i3 = { method: Yc(t.protocol).batchSubscribe, params: { topics: e.map((s) => s.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i3 });
    try {
      await await yi(new Promise((s) => {
        this.relayer.request(i3).catch((n2) => this.logger.warn(n2)).then(s);
      }), this.subscribeTimeout, "rpcBatchSubscribe failed, please try again");
    } catch {
      this.relayer.events.emit(C2.connection_stalled);
    }
  }
  async rpcBatchFetchMessages(e) {
    if (!e.length) return;
    const t = e[0].relay, i3 = { method: Yc(t.protocol).batchFetchMessages, params: { topics: e.map((n2) => n2.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i3 });
    let s;
    try {
      s = await await yi(new Promise((n2, o2) => {
        this.relayer.request(i3).catch((a2) => {
          this.logger.warn(a2), o2(a2);
        }).then(n2);
      }), this.subscribeTimeout, "rpcBatchFetchMessages failed, please try again");
    } catch {
      this.relayer.events.emit(C2.connection_stalled);
    }
    return s;
  }
  rpcUnsubscribe(e, t, i3) {
    const s = { method: Yc(i3.protocol).unsubscribe, params: { topic: e, id: t } };
    return this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s }), this.relayer.request(s);
  }
  onSubscribe(e, t) {
    this.setSubscription(e, He3(ge3({}, t), { id: e })), this.pending.delete(t.topic);
  }
  onBatchSubscribe(e) {
    e.length && e.forEach((t) => {
      this.setSubscription(t.id, ge3({}, t)), this.pending.delete(t.topic);
    });
  }
  async onUnsubscribe(e, t, i3) {
    this.events.removeAllListeners(t), this.hasSubscription(t, e) && this.deleteSubscription(t, i3), await this.relayer.messages.del(e);
  }
  async setRelayerSubscriptions(e) {
    await this.relayer.core.storage.setItem(this.storageKey, e);
  }
  async getRelayerSubscriptions() {
    return await this.relayer.core.storage.getItem(this.storageKey);
  }
  setSubscription(e, t) {
    this.logger.debug("Setting subscription"), this.logger.trace({ type: "method", method: "setSubscription", id: e, subscription: t }), this.addSubscription(e, t);
  }
  addSubscription(e, t) {
    this.subscriptions.set(e, ge3({}, t)), this.topicMap.set(t.topic, e), this.events.emit($.created, t);
  }
  getSubscription(e) {
    this.logger.debug("Getting subscription"), this.logger.trace({ type: "method", method: "getSubscription", id: e });
    const t = this.subscriptions.get(e);
    if (!t) {
      const { message: i3 } = ht2("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw new Error(i3);
    }
    return t;
  }
  deleteSubscription(e, t) {
    this.logger.debug("Deleting subscription"), this.logger.trace({ type: "method", method: "deleteSubscription", id: e, reason: t });
    const i3 = this.getSubscription(e);
    this.subscriptions.delete(e), this.topicMap.delete(i3.topic, e), this.events.emit($.deleted, He3(ge3({}, i3), { reason: t }));
  }
  async persist() {
    await this.setRelayerSubscriptions(this.values), this.events.emit($.sync);
  }
  async onRestart() {
    if (this.cached.length) {
      const e = [...this.cached], t = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);
      for (let i3 = 0; i3 < t; i3++) {
        const s = e.splice(0, this.batchSubscribeTopicsLimit);
        await this.batchSubscribe(s);
      }
    }
    this.events.emit($.resubscribed);
  }
  async restore() {
    try {
      const e = await this.getRelayerSubscriptions();
      if (typeof e > "u" || !e.length) return;
      if (this.subscriptions.size) {
        const { message: t } = ht2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e);
    }
  }
  async batchSubscribe(e) {
    e.length && (await this.rpcBatchSubscribe(e), this.onBatchSubscribe(await Promise.all(e.map(async (t) => He3(ge3({}, t), { id: await this.getSubscriptionId(t.topic) })))));
  }
  async batchFetchMessages(e) {
    if (!e.length) return;
    this.logger.trace(`Fetching batch messages for ${e.length} subscriptions`);
    const t = await this.rpcBatchFetchMessages(e);
    t && t.messages && (await Ni((0, import_time3.toMiliseconds)(import_time3.ONE_SECOND)), await this.relayer.handleBatchMessageEvents(t.messages));
  }
  async onConnect() {
    await this.restart(), this.reset();
  }
  onDisconnect() {
    this.onDisable();
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = ht2("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
  async restartToComplete(e) {
    !this.relayer.connected && !this.relayer.connecting && (this.cached.push(e), await this.relayer.transportOpen());
  }
  async getClientId() {
    return this.clientId || (this.clientId = await this.relayer.core.crypto.getClientId()), this.clientId;
  }
  async getSubscriptionId(e) {
    return kc(e + await this.getClientId());
  }
};
var eo3 = Object.defineProperty;
var Ci2 = Object.getOwnPropertySymbols;
var to3 = Object.prototype.hasOwnProperty;
var io3 = Object.prototype.propertyIsEnumerable;
var Ye3 = (r2, e, t) => e in r2 ? eo3(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var Pi2 = (r2, e) => {
  for (var t in e || (e = {})) to3.call(e, t) && Ye3(r2, t, e[t]);
  if (Ci2) for (var t of Ci2(e)) io3.call(e, t) && Ye3(r2, t, e[t]);
  return r2;
};
var y3 = (r2, e, t) => Ye3(r2, typeof e != "symbol" ? e + "" : e, t);
var Si2 = class extends d {
  constructor(e) {
    super(e), y3(this, "protocol", "wc"), y3(this, "version", 2), y3(this, "core"), y3(this, "logger"), y3(this, "events", new import_events4.EventEmitter()), y3(this, "provider"), y3(this, "messages"), y3(this, "subscriber"), y3(this, "publisher"), y3(this, "name", $t3), y3(this, "transportExplicitlyClosed", false), y3(this, "initialized", false), y3(this, "connectionAttemptInProgress", false), y3(this, "relayUrl"), y3(this, "projectId"), y3(this, "packageName"), y3(this, "bundleId"), y3(this, "hasExperiencedNetworkDisruption", false), y3(this, "pingTimeout"), y3(this, "heartBeatTimeout", (0, import_time3.toMiliseconds)(import_time3.THIRTY_SECONDS + import_time3.FIVE_SECONDS)), y3(this, "reconnectTimeout"), y3(this, "connectPromise"), y3(this, "reconnectInProgress", false), y3(this, "requestsInFlight", []), y3(this, "connectTimeout", (0, import_time3.toMiliseconds)(import_time3.ONE_SECOND * 15)), y3(this, "request", async (t) => {
      var i3, s;
      this.logger.debug("Publishing Request Payload");
      const n2 = t.id || getBigIntRpcId().toString();
      await this.toEstablishConnection();
      try {
        this.logger.trace({ id: n2, method: t.method, topic: (i3 = t.params) == null ? void 0 : i3.topic }, "relayer.request - publishing...");
        const o2 = `${n2}:${((s = t.params) == null ? void 0 : s.tag) || ""}`;
        this.requestsInFlight.push(o2);
        const a2 = await this.provider.request(t);
        return this.requestsInFlight = this.requestsInFlight.filter((c3) => c3 !== o2), a2;
      } catch (o2) {
        throw this.logger.debug(`Failed to Publish Request: ${n2}`), o2;
      }
    }), y3(this, "resetPingTimeout", () => {
      _e2() && (clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(() => {
        var t, i3, s, n2;
        try {
          this.logger.debug({}, "pingTimeout: Connection stalled, terminating..."), (n2 = (s = (i3 = (t = this.provider) == null ? void 0 : t.connection) == null ? void 0 : i3.socket) == null ? void 0 : s.terminate) == null || n2.call(s);
        } catch (o2) {
          this.logger.warn(o2, o2?.message);
        }
      }, this.heartBeatTimeout));
    }), y3(this, "onPayloadHandler", (t) => {
      this.onProviderPayload(t), this.resetPingTimeout();
    }), y3(this, "onConnectHandler", () => {
      this.logger.warn({}, "Relayer connected 🛜"), this.startPingTimeout(), this.events.emit(C2.connect);
    }), y3(this, "onDisconnectHandler", () => {
      this.logger.warn({}, "Relayer disconnected 🛑"), this.requestsInFlight = [], this.onProviderDisconnect();
    }), y3(this, "onProviderErrorHandler", (t) => {
      this.logger.fatal(`Fatal socket error: ${t.message}`), this.events.emit(C2.error, t), this.logger.fatal("Fatal socket error received, closing transport"), this.transportClose();
    }), y3(this, "registerProviderListeners", () => {
      this.provider.on(L.payload, this.onPayloadHandler), this.provider.on(L.connect, this.onConnectHandler), this.provider.on(L.disconnect, this.onDisconnectHandler), this.provider.on(L.error, this.onProviderErrorHandler);
    }), this.core = e.core, this.logger = typeof e.logger < "u" && typeof e.logger != "string" ? E(e.logger, this.name) : (0, import_pino.default)(k({ level: e.logger || Nt3 })), this.messages = new _i2(this.logger, e.core), this.subscriber = new Ti2(this, this.logger), this.publisher = new qn2(this, this.logger), this.relayUrl = e?.relayUrl || Ue2, this.projectId = e.projectId, ei() ? this.packageName = ri() : ni() && (this.bundleId = ri()), this.provider = {};
  }
  async init() {
    if (this.logger.trace("Initialized"), this.registerEventListeners(), await Promise.all([this.messages.init(), this.subscriber.init()]), this.initialized = true, this.subscriber.hasAnyTopics) try {
      await this.transportOpen();
    } catch (e) {
      this.logger.warn(e, e?.message);
    }
  }
  get context() {
    return y(this.logger);
  }
  get connected() {
    var e, t, i3;
    return ((i3 = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : i3.readyState) === 1 || false;
  }
  get connecting() {
    var e, t, i3;
    return ((i3 = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : i3.readyState) === 0 || this.connectPromise !== void 0 || false;
  }
  async publish(e, t, i3) {
    this.isInitialized(), await this.publisher.publish(e, t, i3), await this.recordMessageEvent({ topic: e, message: t, publishedAt: Date.now(), transportType: Q2.relay }, le3.outbound);
  }
  async subscribe(e, t) {
    var i3, s, n2;
    this.isInitialized(), (!(t != null && t.transportType) || t?.transportType === "relay") && await this.toEstablishConnection();
    const o2 = typeof ((i3 = t?.internal) == null ? void 0 : i3.throwOnFailedPublish) > "u" ? true : (s = t?.internal) == null ? void 0 : s.throwOnFailedPublish;
    let a2 = ((n2 = this.subscriber.topicMap.get(e)) == null ? void 0 : n2[0]) || "", c3;
    const h5 = (l4) => {
      l4.topic === e && (this.subscriber.off($.created, h5), c3());
    };
    return await Promise.all([new Promise((l4) => {
      c3 = l4, this.subscriber.on($.created, h5);
    }), new Promise(async (l4, d4) => {
      a2 = await this.subscriber.subscribe(e, Pi2({ internal: { throwOnFailedPublish: o2 } }, t)).catch((g2) => {
        o2 && d4(g2);
      }) || a2, l4();
    })]), a2;
  }
  async unsubscribe(e, t) {
    this.isInitialized(), await this.subscriber.unsubscribe(e, t);
  }
  on(e, t) {
    this.events.on(e, t);
  }
  once(e, t) {
    this.events.once(e, t);
  }
  off(e, t) {
    this.events.off(e, t);
  }
  removeListener(e, t) {
    this.events.removeListener(e, t);
  }
  async transportDisconnect() {
    this.provider.disconnect && (this.hasExperiencedNetworkDisruption || this.connected) ? await yi(this.provider.disconnect(), 2e3, "provider.disconnect()").catch(() => this.onProviderDisconnect()) : this.onProviderDisconnect();
  }
  async transportClose() {
    this.transportExplicitlyClosed = true, await this.transportDisconnect();
  }
  async transportOpen(e) {
    if (!this.subscriber.hasAnyTopics) {
      this.logger.warn("Starting WS connection skipped because the client has no topics to work with.");
      return;
    }
    if (this.connectPromise ? (this.logger.debug({}, "Waiting for existing connection attempt to resolve..."), await this.connectPromise, this.logger.debug({}, "Existing connection attempt resolved")) : (this.connectPromise = new Promise(async (t, i3) => {
      await this.connect(e).then(t).catch(i3).finally(() => {
        this.connectPromise = void 0;
      });
    }), await this.connectPromise), !this.connected) throw new Error(`Couldn't establish socket connection to the relay server: ${this.relayUrl}`);
  }
  async restartTransport(e) {
    this.logger.debug({}, "Restarting transport..."), !this.connectionAttemptInProgress && (this.relayUrl = e || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());
  }
  async confirmOnlineStateOrThrow() {
    if (!await Na()) throw new Error("No internet connection detected. Please restart your network and try again.");
  }
  async handleBatchMessageEvents(e) {
    if (e?.length === 0) {
      this.logger.trace("Batch message events is empty. Ignoring...");
      return;
    }
    const t = e.sort((i3, s) => i3.publishedAt - s.publishedAt);
    this.logger.debug(`Batch of ${t.length} message events sorted`);
    for (const i3 of t) try {
      await this.onMessageEvent(i3);
    } catch (s) {
      this.logger.warn(s, "Error while processing batch message event: " + s?.message);
    }
    this.logger.trace(`Batch of ${t.length} message events processed`);
  }
  async onLinkMessageEvent(e, t) {
    const { topic: i3 } = e;
    if (!t.sessionExists) {
      const s = Ei(import_time3.FIVE_MINUTES), n2 = { topic: i3, expiry: s, relay: { protocol: "irn" }, active: false };
      await this.core.pairing.pairings.set(i3, n2);
    }
    this.events.emit(C2.message, e), await this.recordMessageEvent(e, le3.inbound);
  }
  async connect(e) {
    await this.confirmOnlineStateOrThrow(), e && e !== this.relayUrl && (this.relayUrl = e, await this.transportDisconnect()), this.connectionAttemptInProgress = true, this.transportExplicitlyClosed = false;
    let t = 1;
    for (; t < 6; ) {
      try {
        if (this.transportExplicitlyClosed) break;
        this.logger.debug({}, `Connecting to ${this.relayUrl}, attempt: ${t}...`), await this.createProvider(), await new Promise(async (i3, s) => {
          const n2 = () => {
            s(new Error("Connection interrupted while trying to subscribe"));
          };
          this.provider.once(L.disconnect, n2), await yi(new Promise((o2, a2) => {
            this.provider.connect().then(o2).catch(a2);
          }), this.connectTimeout, `Socket stalled when trying to connect to ${this.relayUrl}`).catch((o2) => {
            s(o2);
          }).finally(() => {
            this.provider.off(L.disconnect, n2), clearTimeout(this.reconnectTimeout);
          }), await new Promise(async (o2, a2) => {
            const c3 = () => {
              a2(new Error("Connection interrupted while trying to subscribe"));
            };
            this.provider.once(L.disconnect, c3), await this.subscriber.start().then(o2).catch(a2).finally(() => {
              this.provider.off(L.disconnect, c3);
            });
          }), this.hasExperiencedNetworkDisruption = false, i3();
        });
      } catch (i3) {
        await this.subscriber.stop();
        const s = i3;
        this.logger.warn({}, s.message), this.hasExperiencedNetworkDisruption = true;
      } finally {
        this.connectionAttemptInProgress = false;
      }
      if (this.connected) {
        this.logger.debug({}, `Connected to ${this.relayUrl} successfully on attempt: ${t}`);
        break;
      }
      await new Promise((i3) => setTimeout(i3, (0, import_time3.toMiliseconds)(t * 1))), t++;
    }
  }
  startPingTimeout() {
    var e, t, i3, s, n2;
    if (_e2()) try {
      (t = (e = this.provider) == null ? void 0 : e.connection) != null && t.socket && ((n2 = (s = (i3 = this.provider) == null ? void 0 : i3.connection) == null ? void 0 : s.socket) == null || n2.on("ping", () => {
        this.resetPingTimeout();
      })), this.resetPingTimeout();
    } catch (o2) {
      this.logger.warn(o2, o2?.message);
    }
  }
  async createProvider() {
    this.provider.connection && this.unregisterProviderListeners();
    const e = await this.core.crypto.signJWT(this.relayUrl);
    this.provider = new o(new f3(si({ sdkVersion: _e3, protocol: this.protocol, version: this.version, relayUrl: this.relayUrl, projectId: this.projectId, auth: e, useOnCloseEvent: true, bundleId: this.bundleId, packageName: this.packageName }))), this.registerProviderListeners();
  }
  async recordMessageEvent(e, t) {
    const { topic: i3, message: s } = e;
    await this.messages.set(i3, s, t);
  }
  async shouldIgnoreMessageEvent(e) {
    const { topic: t, message: i3 } = e;
    if (!i3 || i3.length === 0) return this.logger.warn(`Ignoring invalid/empty message: ${i3}`), true;
    if (!await this.subscriber.isKnownTopic(t)) return this.logger.warn(`Ignoring message for unknown topic ${t}`), true;
    const s = this.messages.has(t, i3);
    return s && this.logger.warn(`Ignoring duplicate message: ${i3}`), s;
  }
  async onProviderPayload(e) {
    if (this.logger.debug("Incoming Relay Payload"), this.logger.trace({ type: "payload", direction: "incoming", payload: e }), isJsonRpcRequest(e)) {
      if (!e.method.endsWith(zt2)) return;
      const t = e.params, { topic: i3, message: s, publishedAt: n2, attestation: o2 } = t.data, a2 = { topic: i3, message: s, publishedAt: n2, transportType: Q2.relay, attestation: o2 };
      this.logger.debug("Emitting Relayer Payload"), this.logger.trace(Pi2({ type: "event", event: t.id }, a2)), this.events.emit(t.id, a2), await this.acknowledgePayload(e), await this.onMessageEvent(a2);
    } else isJsonRpcResponse(e) && this.events.emit(C2.message_ack, e);
  }
  async onMessageEvent(e) {
    await this.shouldIgnoreMessageEvent(e) || (await this.recordMessageEvent(e, le3.inbound), this.events.emit(C2.message, e));
  }
  async acknowledgePayload(e) {
    const t = formatJsonRpcResult(e.id, true);
    await this.provider.connection.send(t);
  }
  unregisterProviderListeners() {
    this.provider.off(L.payload, this.onPayloadHandler), this.provider.off(L.connect, this.onConnectHandler), this.provider.off(L.disconnect, this.onDisconnectHandler), this.provider.off(L.error, this.onProviderErrorHandler), clearTimeout(this.pingTimeout);
  }
  async registerEventListeners() {
    let e = await Na();
    Ua(async (t) => {
      e !== t && (e = t, t ? await this.transportOpen().catch((i3) => this.logger.error(i3, i3?.message)) : (this.hasExperiencedNetworkDisruption = true, await this.transportDisconnect(), this.transportExplicitlyClosed = false));
    }), this.core.heartbeat.on(r.pulse, async () => {
      if (!this.transportExplicitlyClosed && !this.connected && Ta()) try {
        await this.confirmOnlineStateOrThrow(), await this.transportOpen();
      } catch (t) {
        this.logger.warn(t, t?.message);
      }
    });
  }
  async onProviderDisconnect() {
    clearTimeout(this.pingTimeout), this.events.emit(C2.disconnect), this.connectionAttemptInProgress = false, !this.reconnectInProgress && (this.reconnectInProgress = true, await this.subscriber.stop(), this.subscriber.hasAnyTopics && (this.transportExplicitlyClosed || (this.reconnectTimeout = setTimeout(async () => {
      await this.transportOpen().catch((e) => this.logger.error(e, e?.message)), this.reconnectTimeout = void 0, this.reconnectInProgress = false;
    }, (0, import_time3.toMiliseconds)(Lt3)))));
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = ht2("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
  async toEstablishConnection() {
    if (await this.confirmOnlineStateOrThrow(), !this.connected) {
      if (this.connectPromise) {
        await this.connectPromise;
        return;
      }
      await this.connect();
    }
  }
};
function so3() {
}
function Oi2(r2) {
  if (!r2 || typeof r2 != "object") return false;
  const e = Object.getPrototypeOf(r2);
  return e === null || e === Object.prototype || Object.getPrototypeOf(e) === null ? Object.prototype.toString.call(r2) === "[object Object]" : false;
}
function Ri2(r2) {
  return Object.getOwnPropertySymbols(r2).filter((e) => Object.prototype.propertyIsEnumerable.call(r2, e));
}
function Ai2(r2) {
  return r2 == null ? r2 === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(r2);
}
var ro3 = "[object RegExp]";
var no3 = "[object String]";
var oo3 = "[object Number]";
var ao3 = "[object Boolean]";
var xi2 = "[object Arguments]";
var co3 = "[object Symbol]";
var ho3 = "[object Date]";
var lo3 = "[object Map]";
var uo3 = "[object Set]";
var go3 = "[object Array]";
var po3 = "[object Function]";
var yo3 = "[object ArrayBuffer]";
var Je3 = "[object Object]";
var bo3 = "[object Error]";
var mo3 = "[object DataView]";
var fo3 = "[object Uint8Array]";
var Do2 = "[object Uint8ClampedArray]";
var vo3 = "[object Uint16Array]";
var wo3 = "[object Uint32Array]";
var _o3 = "[object BigUint64Array]";
var Eo3 = "[object Int8Array]";
var Io3 = "[object Int16Array]";
var To3 = "[object Int32Array]";
var Co3 = "[object BigInt64Array]";
var Po3 = "[object Float32Array]";
var So3 = "[object Float64Array]";
function Oo3(r2, e) {
  return r2 === e || Number.isNaN(r2) && Number.isNaN(e);
}
function Ro3(r2, e, t) {
  return pe3(r2, e, void 0, void 0, void 0, void 0, t);
}
function pe3(r2, e, t, i3, s, n2, o2) {
  const a2 = o2(r2, e, t, i3, s, n2);
  if (a2 !== void 0) return a2;
  if (typeof r2 == typeof e) switch (typeof r2) {
    case "bigint":
    case "string":
    case "boolean":
    case "symbol":
    case "undefined":
      return r2 === e;
    case "number":
      return r2 === e || Object.is(r2, e);
    case "function":
      return r2 === e;
    case "object":
      return ye3(r2, e, n2, o2);
  }
  return ye3(r2, e, n2, o2);
}
function ye3(r2, e, t, i3) {
  if (Object.is(r2, e)) return true;
  let s = Ai2(r2), n2 = Ai2(e);
  if (s === xi2 && (s = Je3), n2 === xi2 && (n2 = Je3), s !== n2) return false;
  switch (s) {
    case no3:
      return r2.toString() === e.toString();
    case oo3: {
      const c3 = r2.valueOf(), h5 = e.valueOf();
      return Oo3(c3, h5);
    }
    case ao3:
    case ho3:
    case co3:
      return Object.is(r2.valueOf(), e.valueOf());
    case ro3:
      return r2.source === e.source && r2.flags === e.flags;
    case po3:
      return r2 === e;
  }
  t = t ?? /* @__PURE__ */ new Map();
  const o2 = t.get(r2), a2 = t.get(e);
  if (o2 != null && a2 != null) return o2 === e;
  t.set(r2, e), t.set(e, r2);
  try {
    switch (s) {
      case lo3: {
        if (r2.size !== e.size) return false;
        for (const [c3, h5] of r2.entries()) if (!e.has(c3) || !pe3(h5, e.get(c3), c3, r2, e, t, i3)) return false;
        return true;
      }
      case uo3: {
        if (r2.size !== e.size) return false;
        const c3 = Array.from(r2.values()), h5 = Array.from(e.values());
        for (let l4 = 0; l4 < c3.length; l4++) {
          const d4 = c3[l4], g2 = h5.findIndex((_2) => pe3(d4, _2, void 0, r2, e, t, i3));
          if (g2 === -1) return false;
          h5.splice(g2, 1);
        }
        return true;
      }
      case go3:
      case fo3:
      case Do2:
      case vo3:
      case wo3:
      case _o3:
      case Eo3:
      case Io3:
      case To3:
      case Co3:
      case Po3:
      case So3: {
        if (typeof Buffer < "u" && Buffer.isBuffer(r2) !== Buffer.isBuffer(e) || r2.length !== e.length) return false;
        for (let c3 = 0; c3 < r2.length; c3++) if (!pe3(r2[c3], e[c3], c3, r2, e, t, i3)) return false;
        return true;
      }
      case yo3:
        return r2.byteLength !== e.byteLength ? false : ye3(new Uint8Array(r2), new Uint8Array(e), t, i3);
      case mo3:
        return r2.byteLength !== e.byteLength || r2.byteOffset !== e.byteOffset ? false : ye3(new Uint8Array(r2), new Uint8Array(e), t, i3);
      case bo3:
        return r2.name === e.name && r2.message === e.message;
      case Je3: {
        if (!(ye3(r2.constructor, e.constructor, t, i3) || Oi2(r2) && Oi2(e))) return false;
        const h5 = [...Object.keys(r2), ...Ri2(r2)], l4 = [...Object.keys(e), ...Ri2(e)];
        if (h5.length !== l4.length) return false;
        for (let d4 = 0; d4 < h5.length; d4++) {
          const g2 = h5[d4], _2 = r2[g2];
          if (!Object.hasOwn(e, g2)) return false;
          const u3 = e[g2];
          if (!pe3(_2, u3, g2, r2, e, t, i3)) return false;
        }
        return true;
      }
      default:
        return false;
    }
  } finally {
    t.delete(r2), t.delete(e);
  }
}
function Ao3(r2, e) {
  return Ro3(r2, e, so3);
}
var xo3 = Object.defineProperty;
var Ni2 = Object.getOwnPropertySymbols;
var No3 = Object.prototype.hasOwnProperty;
var $o3 = Object.prototype.propertyIsEnumerable;
var Xe3 = (r2, e, t) => e in r2 ? xo3(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var $i2 = (r2, e) => {
  for (var t in e || (e = {})) No3.call(e, t) && Xe3(r2, t, e[t]);
  if (Ni2) for (var t of Ni2(e)) $o3.call(e, t) && Xe3(r2, t, e[t]);
  return r2;
};
var z = (r2, e, t) => Xe3(r2, typeof e != "symbol" ? e + "" : e, t);
var zi2 = class extends f2 {
  constructor(e, t, i3, s = B, n2 = void 0) {
    super(e, t, i3, s), this.core = e, this.logger = t, this.name = i3, z(this, "map", /* @__PURE__ */ new Map()), z(this, "version", kt3), z(this, "cached", []), z(this, "initialized", false), z(this, "getKey"), z(this, "storagePrefix", B), z(this, "recentlyDeleted", []), z(this, "recentlyDeletedLimit", 200), z(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((o2) => {
        this.getKey && o2 !== null && !Et2(o2) ? this.map.set(this.getKey(o2), o2) : la(o2) ? this.map.set(o2.id, o2) : da(o2) && this.map.set(o2.topic, o2);
      }), this.cached = [], this.initialized = true);
    }), z(this, "set", async (o2, a2) => {
      this.isInitialized(), this.map.has(o2) ? await this.update(o2, a2) : (this.logger.debug("Setting value"), this.logger.trace({ type: "method", method: "set", key: o2, value: a2 }), this.map.set(o2, a2), await this.persist());
    }), z(this, "get", (o2) => (this.isInitialized(), this.logger.debug("Getting value"), this.logger.trace({ type: "method", method: "get", key: o2 }), this.getData(o2))), z(this, "getAll", (o2) => (this.isInitialized(), o2 ? this.values.filter((a2) => Object.keys(o2).every((c3) => Ao3(a2[c3], o2[c3]))) : this.values)), z(this, "update", async (o2, a2) => {
      this.isInitialized(), this.logger.debug("Updating value"), this.logger.trace({ type: "method", method: "update", key: o2, update: a2 });
      const c3 = $i2($i2({}, this.getData(o2)), a2);
      this.map.set(o2, c3), await this.persist();
    }), z(this, "delete", async (o2, a2) => {
      this.isInitialized(), this.map.has(o2) && (this.logger.debug("Deleting value"), this.logger.trace({ type: "method", method: "delete", key: o2, reason: a2 }), this.map.delete(o2), this.addToRecentlyDeleted(o2), await this.persist());
    }), this.logger = E(t, this.name), this.storagePrefix = s, this.getKey = n2;
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.map.size;
  }
  get keys() {
    return Array.from(this.map.keys());
  }
  get values() {
    return Array.from(this.map.values());
  }
  addToRecentlyDeleted(e) {
    this.recentlyDeleted.push(e), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);
  }
  async setDataStore(e) {
    await this.core.storage.setItem(this.storageKey, e);
  }
  async getDataStore() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getData(e) {
    const t = this.map.get(e);
    if (!t) {
      if (this.recentlyDeleted.includes(e)) {
        const { message: s } = ht2("MISSING_OR_INVALID", `Record was recently deleted - ${this.name}: ${e}`);
        throw this.logger.error(s), new Error(s);
      }
      const { message: i3 } = ht2("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw this.logger.error(i3), new Error(i3);
    }
    return t;
  }
  async persist() {
    await this.setDataStore(this.values);
  }
  async restore() {
    try {
      const e = await this.getDataStore();
      if (typeof e > "u" || !e.length) return;
      if (this.map.size) {
        const { message: t } = ht2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({ type: "method", method: "restore", value: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = ht2("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var zo2 = Object.defineProperty;
var Lo3 = (r2, e, t) => e in r2 ? zo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var p2 = (r2, e, t) => Lo3(r2, typeof e != "symbol" ? e + "" : e, t);
var Li2 = class {
  constructor(e, t) {
    this.core = e, this.logger = t, p2(this, "name", Mt3), p2(this, "version", Kt3), p2(this, "events", new import_events4.default()), p2(this, "pairings"), p2(this, "initialized", false), p2(this, "storagePrefix", B), p2(this, "ignoredPayloadTypes", [Ft2]), p2(this, "registeredMethods", []), p2(this, "init", async () => {
      this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = true, this.logger.trace("Initialized"));
    }), p2(this, "register", ({ methods: i3 }) => {
      this.isInitialized(), this.registeredMethods = [.../* @__PURE__ */ new Set([...this.registeredMethods, ...i3])];
    }), p2(this, "create", async (i3) => {
      this.isInitialized();
      const s = jc(), n2 = await this.core.crypto.setSymKey(s), o2 = Ei(import_time3.FIVE_MINUTES), a2 = { protocol: xt3 }, c3 = { topic: n2, expiry: o2, relay: a2, active: false, methods: i3?.methods }, h5 = Wc({ protocol: this.core.protocol, version: this.core.version, topic: n2, symKey: s, relay: a2, expiryTimestamp: o2, methods: i3?.methods });
      return this.events.emit(re2.create, c3), this.core.expirer.set(n2, o2), await this.pairings.set(n2, c3), await this.core.relayer.subscribe(n2, { transportType: i3?.transportType }), { topic: n2, uri: h5 };
    }), p2(this, "pair", async (i3) => {
      this.isInitialized();
      const s = this.core.eventClient.createEvent({ properties: { topic: i3?.uri, trace: [G3.pairing_started] } });
      this.isValidPair(i3, s);
      const { topic: n2, symKey: o2, relay: a2, expiryTimestamp: c3, methods: h5 } = Gc(i3.uri);
      s.props.properties.topic = n2, s.addTrace(G3.pairing_uri_validation_success), s.addTrace(G3.pairing_uri_not_expired);
      let l4;
      if (this.pairings.keys.includes(n2)) {
        if (l4 = this.pairings.get(n2), s.addTrace(G3.existing_pairing), l4.active) throw s.setError(Y2.active_pairing_already_exists), new Error(`Pairing already exists: ${n2}. Please try again with a new connection URI.`);
        s.addTrace(G3.pairing_not_expired);
      }
      const d4 = c3 || Ei(import_time3.FIVE_MINUTES), g2 = { topic: n2, relay: a2, expiry: d4, active: false, methods: h5 };
      this.core.expirer.set(n2, d4), await this.pairings.set(n2, g2), s.addTrace(G3.store_new_pairing), i3.activatePairing && await this.activate({ topic: n2 }), this.events.emit(re2.create, g2), s.addTrace(G3.emit_inactive_pairing), this.core.crypto.keychain.has(n2) || await this.core.crypto.setSymKey(o2, n2), s.addTrace(G3.subscribing_pairing_topic);
      try {
        await this.core.relayer.confirmOnlineStateOrThrow();
      } catch {
        s.setError(Y2.no_internet_connection);
      }
      try {
        await this.core.relayer.subscribe(n2, { relay: a2 });
      } catch (_2) {
        throw s.setError(Y2.subscribe_pairing_topic_failure), _2;
      }
      return s.addTrace(G3.subscribe_pairing_topic_success), g2;
    }), p2(this, "activate", async ({ topic: i3 }) => {
      this.isInitialized();
      const s = Ei(import_time3.FIVE_MINUTES);
      this.core.expirer.set(i3, s), await this.pairings.update(i3, { active: true, expiry: s });
    }), p2(this, "ping", async (i3) => {
      this.isInitialized(), await this.isValidPing(i3), this.logger.warn("ping() is deprecated and will be removed in the next major release.");
      const { topic: s } = i3;
      if (this.pairings.keys.includes(s)) {
        const n2 = await this.sendRequest(s, "wc_pairingPing", {}), { done: o2, resolve: a2, reject: c3 } = gi();
        this.events.once(xi("pairing_ping", n2), ({ error: h5 }) => {
          h5 ? c3(h5) : a2();
        }), await o2();
      }
    }), p2(this, "updateExpiry", async ({ topic: i3, expiry: s }) => {
      this.isInitialized(), await this.pairings.update(i3, { expiry: s });
    }), p2(this, "updateMetadata", async ({ topic: i3, metadata: s }) => {
      this.isInitialized(), await this.pairings.update(i3, { peerMetadata: s });
    }), p2(this, "getPairings", () => (this.isInitialized(), this.pairings.values)), p2(this, "disconnect", async (i3) => {
      this.isInitialized(), await this.isValidDisconnect(i3);
      const { topic: s } = i3;
      this.pairings.keys.includes(s) && (await this.sendRequest(s, "wc_pairingDelete", Nt2("USER_DISCONNECTED")), await this.deletePairing(s));
    }), p2(this, "formatUriFromPairing", (i3) => {
      this.isInitialized();
      const { topic: s, relay: n2, expiry: o2, methods: a2 } = i3, c3 = this.core.crypto.keychain.get(s);
      return Wc({ protocol: this.core.protocol, version: this.core.version, topic: s, symKey: c3, relay: n2, expiryTimestamp: o2, methods: a2 });
    }), p2(this, "sendRequest", async (i3, s, n2) => {
      const o2 = formatJsonRpcRequest(s, n2), a2 = await this.core.crypto.encode(i3, o2), c3 = se2[s].req;
      return this.core.history.set(i3, o2), this.core.relayer.publish(i3, a2, c3), o2.id;
    }), p2(this, "sendResult", async (i3, s, n2) => {
      const o2 = formatJsonRpcResult(i3, n2), a2 = await this.core.crypto.encode(s, o2), c3 = (await this.core.history.get(s, i3)).request.method, h5 = se2[c3].res;
      await this.core.relayer.publish(s, a2, h5), await this.core.history.resolve(o2);
    }), p2(this, "sendError", async (i3, s, n2) => {
      const o2 = formatJsonRpcError(i3, n2), a2 = await this.core.crypto.encode(s, o2), c3 = (await this.core.history.get(s, i3)).request.method, h5 = se2[c3] ? se2[c3].res : se2.unregistered_method.res;
      await this.core.relayer.publish(s, a2, h5), await this.core.history.resolve(o2);
    }), p2(this, "deletePairing", async (i3, s) => {
      await this.core.relayer.unsubscribe(i3), await Promise.all([this.pairings.delete(i3, Nt2("USER_DISCONNECTED")), this.core.crypto.deleteSymKey(i3), s ? Promise.resolve() : this.core.expirer.del(i3)]);
    }), p2(this, "cleanup", async () => {
      const i3 = this.pairings.getAll().filter((s) => vi(s.expiry));
      await Promise.all(i3.map((s) => this.deletePairing(s.topic)));
    }), p2(this, "onRelayEventRequest", async (i3) => {
      const { topic: s, payload: n2 } = i3;
      switch (n2.method) {
        case "wc_pairingPing":
          return await this.onPairingPingRequest(s, n2);
        case "wc_pairingDelete":
          return await this.onPairingDeleteRequest(s, n2);
        default:
          return await this.onUnknownRpcMethodRequest(s, n2);
      }
    }), p2(this, "onRelayEventResponse", async (i3) => {
      const { topic: s, payload: n2 } = i3, o2 = (await this.core.history.get(s, n2.id)).request.method;
      switch (o2) {
        case "wc_pairingPing":
          return this.onPairingPingResponse(s, n2);
        default:
          return this.onUnknownRpcMethodResponse(o2);
      }
    }), p2(this, "onPairingPingRequest", async (i3, s) => {
      const { id: n2 } = s;
      try {
        this.isValidPing({ topic: i3 }), await this.sendResult(n2, i3, true), this.events.emit(re2.ping, { id: n2, topic: i3 });
      } catch (o2) {
        await this.sendError(n2, i3, o2), this.logger.error(o2);
      }
    }), p2(this, "onPairingPingResponse", (i3, s) => {
      const { id: n2 } = s;
      setTimeout(() => {
        isJsonRpcResult(s) ? this.events.emit(xi("pairing_ping", n2), {}) : isJsonRpcError(s) && this.events.emit(xi("pairing_ping", n2), { error: s.error });
      }, 500);
    }), p2(this, "onPairingDeleteRequest", async (i3, s) => {
      const { id: n2 } = s;
      try {
        this.isValidDisconnect({ topic: i3 }), await this.deletePairing(i3), this.events.emit(re2.delete, { id: n2, topic: i3 });
      } catch (o2) {
        await this.sendError(n2, i3, o2), this.logger.error(o2);
      }
    }), p2(this, "onUnknownRpcMethodRequest", async (i3, s) => {
      const { id: n2, method: o2 } = s;
      try {
        if (this.registeredMethods.includes(o2)) return;
        const a2 = Nt2("WC_METHOD_UNSUPPORTED", o2);
        await this.sendError(n2, i3, a2), this.logger.error(a2);
      } catch (a2) {
        await this.sendError(n2, i3, a2), this.logger.error(a2);
      }
    }), p2(this, "onUnknownRpcMethodResponse", (i3) => {
      this.registeredMethods.includes(i3) || this.logger.error(Nt2("WC_METHOD_UNSUPPORTED", i3));
    }), p2(this, "isValidPair", (i3, s) => {
      var n2;
      if (!ma(i3)) {
        const { message: a2 } = ht2("MISSING_OR_INVALID", `pair() params: ${i3}`);
        throw s.setError(Y2.malformed_pairing_uri), new Error(a2);
      }
      if (!fa(i3.uri)) {
        const { message: a2 } = ht2("MISSING_OR_INVALID", `pair() uri: ${i3.uri}`);
        throw s.setError(Y2.malformed_pairing_uri), new Error(a2);
      }
      const o2 = Gc(i3?.uri);
      if (!((n2 = o2?.relay) != null && n2.protocol)) {
        const { message: a2 } = ht2("MISSING_OR_INVALID", "pair() uri#relay-protocol");
        throw s.setError(Y2.malformed_pairing_uri), new Error(a2);
      }
      if (!(o2 != null && o2.symKey)) {
        const { message: a2 } = ht2("MISSING_OR_INVALID", "pair() uri#symKey");
        throw s.setError(Y2.malformed_pairing_uri), new Error(a2);
      }
      if (o2 != null && o2.expiryTimestamp && (0, import_time3.toMiliseconds)(o2?.expiryTimestamp) < Date.now()) {
        s.setError(Y2.pairing_expired);
        const { message: a2 } = ht2("EXPIRED", "pair() URI has expired. Please try again with a new connection URI.");
        throw new Error(a2);
      }
    }), p2(this, "isValidPing", async (i3) => {
      if (!ma(i3)) {
        const { message: n2 } = ht2("MISSING_OR_INVALID", `ping() params: ${i3}`);
        throw new Error(n2);
      }
      const { topic: s } = i3;
      await this.isValidPairingTopic(s);
    }), p2(this, "isValidDisconnect", async (i3) => {
      if (!ma(i3)) {
        const { message: n2 } = ht2("MISSING_OR_INVALID", `disconnect() params: ${i3}`);
        throw new Error(n2);
      }
      const { topic: s } = i3;
      await this.isValidPairingTopic(s);
    }), p2(this, "isValidPairingTopic", async (i3) => {
      if (!nt2(i3, false)) {
        const { message: s } = ht2("MISSING_OR_INVALID", `pairing topic should be a string: ${i3}`);
        throw new Error(s);
      }
      if (!this.pairings.keys.includes(i3)) {
        const { message: s } = ht2("NO_MATCHING_KEY", `pairing topic doesn't exist: ${i3}`);
        throw new Error(s);
      }
      if (vi(this.pairings.get(i3).expiry)) {
        await this.deletePairing(i3);
        const { message: s } = ht2("EXPIRED", `pairing topic: ${i3}`);
        throw new Error(s);
      }
    }), this.core = e, this.logger = E(t, this.name), this.pairings = new zi2(this.core, this.logger, this.name, this.storagePrefix);
  }
  get context() {
    return y(this.logger);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = ht2("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
  registerRelayerEvents() {
    this.core.relayer.on(C2.message, async (e) => {
      const { topic: t, message: i3, transportType: s } = e;
      if (this.pairings.keys.includes(t) && s !== Q2.link_mode && !this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(i3))) try {
        const n2 = await this.core.crypto.decode(t, i3);
        isJsonRpcRequest(n2) ? (this.core.history.set(t, n2), await this.onRelayEventRequest({ topic: t, payload: n2 })) : isJsonRpcResponse(n2) && (await this.core.history.resolve(n2), await this.onRelayEventResponse({ topic: t, payload: n2 }), this.core.history.delete(t, n2.id)), await this.core.relayer.messages.ack(t, i3);
      } catch (n2) {
        this.logger.error(n2);
      }
    });
  }
  registerExpirerEvents() {
    this.core.expirer.on(M3.expired, async (e) => {
      const { topic: t } = bi(e.target);
      t && this.pairings.keys.includes(t) && (await this.deletePairing(t, true), this.events.emit(re2.expire, { topic: t }));
    });
  }
};
var ko2 = Object.defineProperty;
var jo2 = (r2, e, t) => e in r2 ? ko2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var O2 = (r2, e, t) => jo2(r2, typeof e != "symbol" ? e + "" : e, t);
var ki2 = class extends I {
  constructor(e, t) {
    super(e, t), this.core = e, this.logger = t, O2(this, "records", /* @__PURE__ */ new Map()), O2(this, "events", new import_events4.EventEmitter()), O2(this, "name", Bt3), O2(this, "version", Vt3), O2(this, "cached", []), O2(this, "initialized", false), O2(this, "storagePrefix", B), O2(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((i3) => this.records.set(i3.id, i3)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), O2(this, "set", (i3, s, n2) => {
      if (this.isInitialized(), this.logger.debug("Setting JSON-RPC request history record"), this.logger.trace({ type: "method", method: "set", topic: i3, request: s, chainId: n2 }), this.records.has(s.id)) return;
      const o2 = { id: s.id, topic: i3, request: { method: s.method, params: s.params || null }, chainId: n2, expiry: Ei(import_time3.THIRTY_DAYS) };
      this.records.set(o2.id, o2), this.persist(), this.events.emit(F2.created, o2);
    }), O2(this, "resolve", async (i3) => {
      if (this.isInitialized(), this.logger.debug("Updating JSON-RPC response history record"), this.logger.trace({ type: "method", method: "update", response: i3 }), !this.records.has(i3.id)) return;
      const s = await this.getRecord(i3.id);
      typeof s.response > "u" && (s.response = isJsonRpcError(i3) ? { error: i3.error } : { result: i3.result }, this.records.set(s.id, s), this.persist(), this.events.emit(F2.updated, s));
    }), O2(this, "get", async (i3, s) => (this.isInitialized(), this.logger.debug("Getting record"), this.logger.trace({ type: "method", method: "get", topic: i3, id: s }), await this.getRecord(s))), O2(this, "delete", (i3, s) => {
      this.isInitialized(), this.logger.debug("Deleting record"), this.logger.trace({ type: "method", method: "delete", id: s }), this.values.forEach((n2) => {
        if (n2.topic === i3) {
          if (typeof s < "u" && n2.id !== s) return;
          this.records.delete(n2.id), this.events.emit(F2.deleted, n2);
        }
      }), this.persist();
    }), O2(this, "exists", async (i3, s) => (this.isInitialized(), this.records.has(s) ? (await this.getRecord(s)).topic === i3 : false)), O2(this, "on", (i3, s) => {
      this.events.on(i3, s);
    }), O2(this, "once", (i3, s) => {
      this.events.once(i3, s);
    }), O2(this, "off", (i3, s) => {
      this.events.off(i3, s);
    }), O2(this, "removeListener", (i3, s) => {
      this.events.removeListener(i3, s);
    }), this.logger = E(t, this.name);
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get size() {
    return this.records.size;
  }
  get keys() {
    return Array.from(this.records.keys());
  }
  get values() {
    return Array.from(this.records.values());
  }
  get pending() {
    const e = [];
    return this.values.forEach((t) => {
      if (typeof t.response < "u") return;
      const i3 = { topic: t.topic, request: formatJsonRpcRequest(t.request.method, t.request.params, t.id), chainId: t.chainId };
      return e.push(i3);
    }), e;
  }
  async setJsonRpcRecords(e) {
    await this.core.storage.setItem(this.storageKey, e);
  }
  async getJsonRpcRecords() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getRecord(e) {
    this.isInitialized();
    const t = this.records.get(e);
    if (!t) {
      const { message: i3 } = ht2("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw new Error(i3);
    }
    return t;
  }
  async persist() {
    await this.setJsonRpcRecords(this.values), this.events.emit(F2.sync);
  }
  async restore() {
    try {
      const e = await this.getJsonRpcRecords();
      if (typeof e > "u" || !e.length) return;
      if (this.records.size) {
        const { message: t } = ht2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", records: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e);
    }
  }
  registerEventListeners() {
    this.events.on(F2.created, (e) => {
      const t = F2.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e });
    }), this.events.on(F2.updated, (e) => {
      const t = F2.updated;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e });
    }), this.events.on(F2.deleted, (e) => {
      const t = F2.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e });
    }), this.core.heartbeat.on(r.pulse, () => {
      this.cleanup();
    });
  }
  cleanup() {
    try {
      this.isInitialized();
      let e = false;
      this.records.forEach((t) => {
        (0, import_time3.toMiliseconds)(t.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${t.id}`), this.records.delete(t.id), this.events.emit(F2.deleted, t, false), e = true);
      }), e && this.persist();
    } catch (e) {
      this.logger.warn(e);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = ht2("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var Uo3 = Object.defineProperty;
var Fo2 = (r2, e, t) => e in r2 ? Uo3(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var A2 = (r2, e, t) => Fo2(r2, typeof e != "symbol" ? e + "" : e, t);
var ji2 = class extends S {
  constructor(e, t) {
    super(e, t), this.core = e, this.logger = t, A2(this, "expirations", /* @__PURE__ */ new Map()), A2(this, "events", new import_events4.EventEmitter()), A2(this, "name", qt3), A2(this, "version", Gt2), A2(this, "cached", []), A2(this, "initialized", false), A2(this, "storagePrefix", B), A2(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((i3) => this.expirations.set(i3.target, i3)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), A2(this, "has", (i3) => {
      try {
        const s = this.formatTarget(i3);
        return typeof this.getExpiration(s) < "u";
      } catch {
        return false;
      }
    }), A2(this, "set", (i3, s) => {
      this.isInitialized();
      const n2 = this.formatTarget(i3), o2 = { target: n2, expiry: s };
      this.expirations.set(n2, o2), this.checkExpiry(n2, o2), this.events.emit(M3.created, { target: n2, expiration: o2 });
    }), A2(this, "get", (i3) => {
      this.isInitialized();
      const s = this.formatTarget(i3);
      return this.getExpiration(s);
    }), A2(this, "del", (i3) => {
      if (this.isInitialized(), this.has(i3)) {
        const s = this.formatTarget(i3), n2 = this.getExpiration(s);
        this.expirations.delete(s), this.events.emit(M3.deleted, { target: s, expiration: n2 });
      }
    }), A2(this, "on", (i3, s) => {
      this.events.on(i3, s);
    }), A2(this, "once", (i3, s) => {
      this.events.once(i3, s);
    }), A2(this, "off", (i3, s) => {
      this.events.off(i3, s);
    }), A2(this, "removeListener", (i3, s) => {
      this.events.removeListener(i3, s);
    }), this.logger = E(t, this.name);
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.expirations.size;
  }
  get keys() {
    return Array.from(this.expirations.keys());
  }
  get values() {
    return Array.from(this.expirations.values());
  }
  formatTarget(e) {
    if (typeof e == "string") return mi(e);
    if (typeof e == "number") return wi(e);
    const { message: t } = ht2("UNKNOWN_TYPE", `Target type: ${typeof e}`);
    throw new Error(t);
  }
  async setExpirations(e) {
    await this.core.storage.setItem(this.storageKey, e);
  }
  async getExpirations() {
    return await this.core.storage.getItem(this.storageKey);
  }
  async persist() {
    await this.setExpirations(this.values), this.events.emit(M3.sync);
  }
  async restore() {
    try {
      const e = await this.getExpirations();
      if (typeof e > "u" || !e.length) return;
      if (this.expirations.size) {
        const { message: t } = ht2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({ type: "method", method: "restore", expirations: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e);
    }
  }
  getExpiration(e) {
    const t = this.expirations.get(e);
    if (!t) {
      const { message: i3 } = ht2("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw this.logger.warn(i3), new Error(i3);
    }
    return t;
  }
  checkExpiry(e, t) {
    const { expiry: i3 } = t;
    (0, import_time3.toMiliseconds)(i3) - Date.now() <= 0 && this.expire(e, t);
  }
  expire(e, t) {
    this.expirations.delete(e), this.events.emit(M3.expired, { target: e, expiration: t });
  }
  checkExpirations() {
    this.core.relayer.connected && this.expirations.forEach((e, t) => this.checkExpiry(t, e));
  }
  registerEventListeners() {
    this.core.heartbeat.on(r.pulse, () => this.checkExpirations()), this.events.on(M3.created, (e) => {
      const t = M3.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
    }), this.events.on(M3.expired, (e) => {
      const t = M3.expired;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
    }), this.events.on(M3.deleted, (e) => {
      const t = M3.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = ht2("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var Mo2 = Object.defineProperty;
var Ko3 = (r2, e, t) => e in r2 ? Mo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var w2 = (r2, e, t) => Ko3(r2, typeof e != "symbol" ? e + "" : e, t);
var Ui2 = class extends M2 {
  constructor(e, t, i3) {
    super(e, t, i3), this.core = e, this.logger = t, this.store = i3, w2(this, "name", Wt3), w2(this, "abortController"), w2(this, "isDevEnv"), w2(this, "verifyUrlV3", Yt3), w2(this, "storagePrefix", B), w2(this, "version", Le2), w2(this, "publicKey"), w2(this, "fetchPromise"), w2(this, "init", async () => {
      var s;
      this.isDevEnv || (this.publicKey = await this.store.getItem(this.storeKey), this.publicKey && (0, import_time3.toMiliseconds)((s = this.publicKey) == null ? void 0 : s.expiresAt) < Date.now() && (this.logger.debug("verify v2 public key expired"), await this.removePublicKey()));
    }), w2(this, "register", async (s) => {
      if (!Tt2() || this.isDevEnv) return;
      const n2 = window.location.origin, { id: o2, decryptedId: a2 } = s, c3 = `${this.verifyUrlV3}/attestation?projectId=${this.core.projectId}&origin=${n2}&id=${o2}&decryptedId=${a2}`;
      try {
        const h5 = (0, import_window_getters2.getDocument)(), l4 = this.startAbortTimer(import_time3.ONE_SECOND * 5), d4 = await new Promise((g2, _2) => {
          const u3 = () => {
            window.removeEventListener("message", x3), h5.body.removeChild(b6), _2("attestation aborted");
          };
          this.abortController.signal.addEventListener("abort", u3);
          const b6 = h5.createElement("iframe");
          b6.src = c3, b6.style.display = "none", b6.addEventListener("error", u3, { signal: this.abortController.signal });
          const x3 = (I4) => {
            if (I4.data && typeof I4.data == "string") try {
              const D3 = JSON.parse(I4.data);
              if (D3.type === "verify_attestation") {
                if (sn(D3.attestation).payload.id !== o2) return;
                clearInterval(l4), h5.body.removeChild(b6), this.abortController.signal.removeEventListener("abort", u3), window.removeEventListener("message", x3), g2(D3.attestation === null ? "" : D3.attestation);
              }
            } catch (D3) {
              this.logger.warn(D3);
            }
          };
          h5.body.appendChild(b6), window.addEventListener("message", x3, { signal: this.abortController.signal });
        });
        return this.logger.debug("jwt attestation", d4), d4;
      } catch (h5) {
        this.logger.warn(h5);
      }
      return "";
    }), w2(this, "resolve", async (s) => {
      if (this.isDevEnv) return "";
      const { attestationId: n2, hash: o2, encryptedId: a2 } = s;
      if (n2 === "") {
        this.logger.debug("resolve: attestationId is empty, skipping");
        return;
      }
      if (n2) {
        if (sn(n2).payload.id !== a2) return;
        const h5 = await this.isValidJwtAttestation(n2);
        if (h5) {
          if (!h5.isVerified) {
            this.logger.warn("resolve: jwt attestation: origin url not verified");
            return;
          }
          return h5;
        }
      }
      if (!o2) return;
      const c3 = this.getVerifyUrl(s?.verifyUrl);
      return this.fetchAttestation(o2, c3);
    }), w2(this, "fetchAttestation", async (s, n2) => {
      this.logger.debug(`resolving attestation: ${s} from url: ${n2}`);
      const o2 = this.startAbortTimer(import_time3.ONE_SECOND * 5), a2 = await fetch(`${n2}/attestation/${s}?v2Supported=true`, { signal: this.abortController.signal });
      return clearTimeout(o2), a2.status === 200 ? await a2.json() : void 0;
    }), w2(this, "getVerifyUrl", (s) => {
      let n2 = s || ue2;
      return Jt3.includes(n2) || (this.logger.info(`verify url: ${n2}, not included in trusted list, assigning default: ${ue2}`), n2 = ue2), n2;
    }), w2(this, "fetchPublicKey", async () => {
      try {
        this.logger.debug(`fetching public key from: ${this.verifyUrlV3}`);
        const s = this.startAbortTimer(import_time3.FIVE_SECONDS), n2 = await fetch(`${this.verifyUrlV3}/public-key`, { signal: this.abortController.signal });
        return clearTimeout(s), await n2.json();
      } catch (s) {
        this.logger.warn(s);
      }
    }), w2(this, "persistPublicKey", async (s) => {
      this.logger.debug("persisting public key to local storage", s), await this.store.setItem(this.storeKey, s), this.publicKey = s;
    }), w2(this, "removePublicKey", async () => {
      this.logger.debug("removing verify v2 public key from storage"), await this.store.removeItem(this.storeKey), this.publicKey = void 0;
    }), w2(this, "isValidJwtAttestation", async (s) => {
      const n2 = await this.getPublicKey();
      try {
        if (n2) return this.validateAttestation(s, n2);
      } catch (a2) {
        this.logger.error(a2), this.logger.warn("error validating attestation");
      }
      const o2 = await this.fetchAndPersistPublicKey();
      try {
        if (o2) return this.validateAttestation(s, o2);
      } catch (a2) {
        this.logger.error(a2), this.logger.warn("error validating attestation");
      }
    }), w2(this, "getPublicKey", async () => this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey()), w2(this, "fetchAndPersistPublicKey", async () => {
      if (this.fetchPromise) return await this.fetchPromise, this.publicKey;
      this.fetchPromise = new Promise(async (n2) => {
        const o2 = await this.fetchPublicKey();
        o2 && (await this.persistPublicKey(o2), n2(o2));
      });
      const s = await this.fetchPromise;
      return this.fetchPromise = void 0, s;
    }), w2(this, "validateAttestation", (s, n2) => {
      const o2 = zc(s, n2.publicKey), a2 = { hasExpired: (0, import_time3.toMiliseconds)(o2.exp) < Date.now(), payload: o2 };
      if (a2.hasExpired) throw this.logger.warn("resolve: jwt attestation expired"), new Error("JWT attestation expired");
      return { origin: a2.payload.origin, isScam: a2.payload.isScam, isVerified: a2.payload.isVerified };
    }), this.logger = E(t, this.name), this.abortController = new AbortController(), this.isDevEnv = Ii(), this.init();
  }
  get storeKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//verify:public:key";
  }
  get context() {
    return y(this.logger);
  }
  startAbortTimer(e) {
    return this.abortController = new AbortController(), setTimeout(() => this.abortController.abort(), (0, import_time3.toMiliseconds)(e));
  }
};
var Bo3 = Object.defineProperty;
var Vo2 = (r2, e, t) => e in r2 ? Bo3(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var Fi2 = (r2, e, t) => Vo2(r2, typeof e != "symbol" ? e + "" : e, t);
var Mi2 = class extends O {
  constructor(e, t) {
    super(e, t), this.projectId = e, this.logger = t, Fi2(this, "context", Xt3), Fi2(this, "registerDeviceToken", async (i3) => {
      const { clientId: s, token: n2, notificationType: o2, enableEncrypted: a2 = false } = i3, c3 = `${Zt2}/${this.projectId}/clients`;
      await fetch(c3, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ client_id: s, type: o2, token: n2, always_raw: a2 }) });
    }), this.logger = E(t, this.context);
  }
};
var qo2 = Object.defineProperty;
var Ki2 = Object.getOwnPropertySymbols;
var Go3 = Object.prototype.hasOwnProperty;
var Wo3 = Object.prototype.propertyIsEnumerable;
var Ze3 = (r2, e, t) => e in r2 ? qo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var be3 = (r2, e) => {
  for (var t in e || (e = {})) Go3.call(e, t) && Ze3(r2, t, e[t]);
  if (Ki2) for (var t of Ki2(e)) Wo3.call(e, t) && Ze3(r2, t, e[t]);
  return r2;
};
var E2 = (r2, e, t) => Ze3(r2, typeof e != "symbol" ? e + "" : e, t);
var Bi2 = class extends R {
  constructor(e, t, i3 = true) {
    super(e, t, i3), this.core = e, this.logger = t, E2(this, "context", ei2), E2(this, "storagePrefix", B), E2(this, "storageVersion", Qt3), E2(this, "events", /* @__PURE__ */ new Map()), E2(this, "shouldPersist", false), E2(this, "init", async () => {
      if (!Ii()) try {
        const s = { eventId: Bi(), timestamp: Date.now(), domain: this.getAppDomain(), props: { event: "INIT", type: "", properties: { client_id: await this.core.crypto.getClientId(), user_agent: Mn2(this.core.relayer.protocol, this.core.relayer.version, _e3) } } };
        await this.sendEvent([s]);
      } catch (s) {
        this.logger.warn(s);
      }
    }), E2(this, "createEvent", (s) => {
      const { event: n2 = "ERROR", type: o2 = "", properties: { topic: a2, trace: c3 } } = s, h5 = Bi(), l4 = this.core.projectId || "", d4 = Date.now(), g2 = be3({ eventId: h5, timestamp: d4, props: { event: n2, type: o2, properties: { topic: a2, trace: c3 } }, bundleId: l4, domain: this.getAppDomain() }, this.setMethods(h5));
      return this.telemetryEnabled && (this.events.set(h5, g2), this.shouldPersist = true), g2;
    }), E2(this, "getEvent", (s) => {
      const { eventId: n2, topic: o2 } = s;
      if (n2) return this.events.get(n2);
      const a2 = Array.from(this.events.values()).find((c3) => c3.props.properties.topic === o2);
      if (a2) return be3(be3({}, a2), this.setMethods(a2.eventId));
    }), E2(this, "deleteEvent", (s) => {
      const { eventId: n2 } = s;
      this.events.delete(n2), this.shouldPersist = true;
    }), E2(this, "setEventListeners", () => {
      this.core.heartbeat.on(r.pulse, async () => {
        this.shouldPersist && await this.persist(), this.events.forEach((s) => {
          (0, import_time3.fromMiliseconds)(Date.now()) - (0, import_time3.fromMiliseconds)(s.timestamp) > ti && (this.events.delete(s.eventId), this.shouldPersist = true);
        });
      });
    }), E2(this, "setMethods", (s) => ({ addTrace: (n2) => this.addTrace(s, n2), setError: (n2) => this.setError(s, n2) })), E2(this, "addTrace", (s, n2) => {
      const o2 = this.events.get(s);
      o2 && (o2.props.properties.trace.push(n2), this.events.set(s, o2), this.shouldPersist = true);
    }), E2(this, "setError", (s, n2) => {
      const o2 = this.events.get(s);
      o2 && (o2.props.type = n2, o2.timestamp = Date.now(), this.events.set(s, o2), this.shouldPersist = true);
    }), E2(this, "persist", async () => {
      await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), this.shouldPersist = false;
    }), E2(this, "restore", async () => {
      try {
        const s = await this.core.storage.getItem(this.storageKey) || [];
        if (!s.length) return;
        s.forEach((n2) => {
          this.events.set(n2.eventId, be3(be3({}, n2), this.setMethods(n2.eventId)));
        });
      } catch (s) {
        this.logger.warn(s);
      }
    }), E2(this, "submit", async () => {
      if (!this.telemetryEnabled || this.events.size === 0) return;
      const s = [];
      for (const [n2, o2] of this.events) o2.props.type && s.push(o2);
      if (s.length !== 0) try {
        if ((await this.sendEvent(s)).ok) for (const n2 of s) this.events.delete(n2.eventId), this.shouldPersist = true;
      } catch (n2) {
        this.logger.warn(n2);
      }
    }), E2(this, "sendEvent", async (s) => {
      const n2 = this.getAppDomain() ? "" : "&sp=desktop";
      return await fetch(`${ii}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${_e3}${n2}`, { method: "POST", body: JSON.stringify(s) });
    }), E2(this, "getAppDomain", () => Pn2().url), this.logger = E(t, this.context), this.telemetryEnabled = i3, i3 ? this.restore().then(async () => {
      await this.submit(), this.setEventListeners();
    }) : this.persist();
  }
  get storageKey() {
    return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + "//" + this.context;
  }
};
var Ho2 = Object.defineProperty;
var Vi2 = Object.getOwnPropertySymbols;
var Yo3 = Object.prototype.hasOwnProperty;
var Jo3 = Object.prototype.propertyIsEnumerable;
var Qe3 = (r2, e, t) => e in r2 ? Ho2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var qi2 = (r2, e) => {
  for (var t in e || (e = {})) Yo3.call(e, t) && Qe3(r2, t, e[t]);
  if (Vi2) for (var t of Vi2(e)) Jo3.call(e, t) && Qe3(r2, t, e[t]);
  return r2;
};
var v3 = (r2, e, t) => Qe3(r2, typeof e != "symbol" ? e + "" : e, t);
var Te2 = class _Te extends h2 {
  constructor(e) {
    var t;
    super(e), v3(this, "protocol", ze3), v3(this, "version", Le2), v3(this, "name", he3), v3(this, "relayUrl"), v3(this, "projectId"), v3(this, "customStoragePrefix"), v3(this, "events", new import_events4.EventEmitter()), v3(this, "logger"), v3(this, "heartbeat"), v3(this, "relayer"), v3(this, "crypto"), v3(this, "storage"), v3(this, "history"), v3(this, "expirer"), v3(this, "pairing"), v3(this, "verify"), v3(this, "echoClient"), v3(this, "linkModeSupportedApps"), v3(this, "eventClient"), v3(this, "initialized", false), v3(this, "logChunkController"), v3(this, "on", (a2, c3) => this.events.on(a2, c3)), v3(this, "once", (a2, c3) => this.events.once(a2, c3)), v3(this, "off", (a2, c3) => this.events.off(a2, c3)), v3(this, "removeListener", (a2, c3) => this.events.removeListener(a2, c3)), v3(this, "dispatchEnvelope", ({ topic: a2, message: c3, sessionExists: h5 }) => {
      if (!a2 || !c3) return;
      const l4 = { topic: a2, message: c3, publishedAt: Date.now(), transportType: Q2.link_mode };
      this.relayer.onLinkMessageEvent(l4, { sessionExists: h5 });
    });
    const i3 = this.getGlobalCore(e?.customStoragePrefix);
    if (i3) try {
      return this.customStoragePrefix = i3.customStoragePrefix, this.logger = i3.logger, this.heartbeat = i3.heartbeat, this.crypto = i3.crypto, this.history = i3.history, this.expirer = i3.expirer, this.storage = i3.storage, this.relayer = i3.relayer, this.pairing = i3.pairing, this.verify = i3.verify, this.echoClient = i3.echoClient, this.linkModeSupportedApps = i3.linkModeSupportedApps, this.eventClient = i3.eventClient, this.initialized = i3.initialized, this.logChunkController = i3.logChunkController, i3;
    } catch (a2) {
      console.warn("Failed to copy global core", a2);
    }
    this.projectId = e?.projectId, this.relayUrl = e?.relayUrl || Ue2, this.customStoragePrefix = e != null && e.customStoragePrefix ? `:${e.customStoragePrefix}` : "";
    const s = k({ level: typeof e?.logger == "string" && e.logger ? e.logger : Et3.logger, name: he3 }), { logger: n2, chunkLoggerController: o2 } = A({ opts: s, maxSizeInBytes: e?.maxLogBlobSizeInBytes, loggerOverride: e?.logger });
    this.logChunkController = o2, (t = this.logChunkController) != null && t.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async () => {
      var a2, c3;
      (a2 = this.logChunkController) != null && a2.downloadLogsBlobInBrowser && ((c3 = this.logChunkController) == null || c3.downloadLogsBlobInBrowser({ clientId: await this.crypto.getClientId() }));
    }), this.logger = E(n2, this.name), this.heartbeat = new i(), this.crypto = new vi2(this, this.logger, e?.keychain), this.history = new ki2(this, this.logger), this.expirer = new ji2(this, this.logger), this.storage = e != null && e.storage ? e.storage : new h(qi2(qi2({}, It3), e?.storageOptions)), this.relayer = new Si2({ core: this, logger: this.logger, relayUrl: this.relayUrl, projectId: this.projectId }), this.pairing = new Li2(this, this.logger), this.verify = new Ui2(this, this.logger, this.storage), this.echoClient = new Mi2(this.projectId || "", this.logger), this.linkModeSupportedApps = [], this.eventClient = new Bi2(this, this.logger, e?.telemetryEnabled), this.setGlobalCore(this);
  }
  static async init(e) {
    const t = new _Te(e);
    await t.initialize();
    const i3 = await t.crypto.getClientId();
    return await t.storage.setItem(jt3, i3), t;
  }
  get context() {
    return y(this.logger);
  }
  async start() {
    this.initialized || await this.initialize();
  }
  async getLogsBlob() {
    var e;
    return (e = this.logChunkController) == null ? void 0 : e.logsToBlob({ clientId: await this.crypto.getClientId() });
  }
  async addLinkModeSupportedApp(e) {
    this.linkModeSupportedApps.includes(e) || (this.linkModeSupportedApps.push(e), await this.storage.setItem(Fe2, this.linkModeSupportedApps));
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.linkModeSupportedApps = await this.storage.getItem(Fe2) || [], this.initialized = true, this.logger.info("Core Initialization Success");
    } catch (e) {
      throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e), this.logger.error(e.message), e;
    }
  }
  getGlobalCore(e = "") {
    try {
      if (this.isGlobalCoreDisabled()) return;
      const t = `_walletConnectCore_${e}`, i3 = `${t}_count`;
      return globalThis[i3] = (globalThis[i3] || 0) + 1, globalThis[i3] > 1 && console.warn(`WalletConnect Core is already initialized. This is probably a mistake and can lead to unexpected behavior. Init() was called ${globalThis[i3]} times.`), globalThis[t];
    } catch (t) {
      console.warn("Failed to get global WalletConnect core", t);
      return;
    }
  }
  setGlobalCore(e) {
    var t;
    try {
      if (this.isGlobalCoreDisabled()) return;
      const i3 = `_walletConnectCore_${((t = e.opts) == null ? void 0 : t.customStoragePrefix) || ""}`;
      globalThis[i3] = e;
    } catch (i3) {
      console.warn("Failed to set global WalletConnect core", i3);
    }
  }
  isGlobalCoreDisabled() {
    try {
      return typeof process < "u" && process.env.DISABLE_GLOBAL_CORE === "true";
    } catch {
      return true;
    }
  }
};
var Xo2 = Te2;

// node_modules/@wagmi/connectors/node_modules/@walletconnect/sign-client/dist/index.es.js
var import_time4 = __toESM(require_cjs());
var import_events5 = __toESM(require_events());
var De3 = "wc";
var Le3 = 2;
var ke4 = "client";
var we3 = `${De3}@${Le3}:${ke4}:`;
var me3 = { name: ke4, logger: "error", controller: false, relayUrl: "wss://relay.walletconnect.org" };
var Me4 = "WALLETCONNECT_DEEPLINK_CHOICE";
var pt2 = "proposal";
var $e3 = "Proposal expired";
var ht3 = "session";
var J3 = import_time4.SEVEN_DAYS;
var dt3 = "engine";
var N2 = { wc_sessionPropose: { req: { ttl: import_time4.FIVE_MINUTES, prompt: true, tag: 1100 }, res: { ttl: import_time4.FIVE_MINUTES, prompt: false, tag: 1101 }, reject: { ttl: import_time4.FIVE_MINUTES, prompt: false, tag: 1120 }, autoReject: { ttl: import_time4.FIVE_MINUTES, prompt: false, tag: 1121 } }, wc_sessionSettle: { req: { ttl: import_time4.FIVE_MINUTES, prompt: false, tag: 1102 }, res: { ttl: import_time4.FIVE_MINUTES, prompt: false, tag: 1103 } }, wc_sessionUpdate: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1104 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1105 } }, wc_sessionExtend: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1106 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1107 } }, wc_sessionRequest: { req: { ttl: import_time4.FIVE_MINUTES, prompt: true, tag: 1108 }, res: { ttl: import_time4.FIVE_MINUTES, prompt: false, tag: 1109 } }, wc_sessionEvent: { req: { ttl: import_time4.FIVE_MINUTES, prompt: true, tag: 1110 }, res: { ttl: import_time4.FIVE_MINUTES, prompt: false, tag: 1111 } }, wc_sessionDelete: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1112 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1113 } }, wc_sessionPing: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1114 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1115 } }, wc_sessionAuthenticate: { req: { ttl: import_time4.ONE_HOUR, prompt: true, tag: 1116 }, res: { ttl: import_time4.ONE_HOUR, prompt: false, tag: 1117 }, reject: { ttl: import_time4.FIVE_MINUTES, prompt: false, tag: 1118 }, autoReject: { ttl: import_time4.FIVE_MINUTES, prompt: false, tag: 1119 } } };
var _e4 = { min: import_time4.FIVE_MINUTES, max: import_time4.SEVEN_DAYS };
var $2 = { idle: "IDLE", active: "ACTIVE" };
var Ke4 = { eth_sendTransaction: { key: "" }, eth_sendRawTransaction: { key: "" }, wallet_sendCalls: { key: "" }, solana_signTransaction: { key: "signature" }, solana_signAllTransactions: { key: "transactions" }, solana_signAndSendTransaction: { key: "signature" } };
var ut3 = "request";
var gt3 = ["wc_sessionPropose", "wc_sessionRequest", "wc_authRequest", "wc_sessionAuthenticate"];
var yt3 = "wc";
var wt3 = "auth";
var mt2 = "authKeys";
var _t3 = "pairingTopics";
var Et4 = "requests";
var ae2 = `${yt3}@${1.5}:${wt3}:`;
var ce2 = `${ae2}:PUB_KEY`;
var vs2 = Object.defineProperty;
var Is2 = Object.defineProperties;
var Ts2 = Object.getOwnPropertyDescriptors;
var ft3 = Object.getOwnPropertySymbols;
var qs3 = Object.prototype.hasOwnProperty;
var Ps2 = Object.prototype.propertyIsEnumerable;
var Ue3 = (S5, n2, e) => n2 in S5 ? vs2(S5, n2, { enumerable: true, configurable: true, writable: true, value: e }) : S5[n2] = e;
var v4 = (S5, n2) => {
  for (var e in n2 || (n2 = {})) qs3.call(n2, e) && Ue3(S5, e, n2[e]);
  if (ft3) for (var e of ft3(n2)) Ps2.call(n2, e) && Ue3(S5, e, n2[e]);
  return S5;
};
var b3 = (S5, n2) => Is2(S5, Ts2(n2));
var c2 = (S5, n2, e) => Ue3(S5, typeof n2 != "symbol" ? n2 + "" : n2, e);
var Ns2 = class extends V2 {
  constructor(n2) {
    super(n2), c2(this, "name", dt3), c2(this, "events", new import_events5.default()), c2(this, "initialized", false), c2(this, "requestQueue", { state: $2.idle, queue: [] }), c2(this, "sessionRequestQueue", { state: $2.idle, queue: [] }), c2(this, "requestQueueDelay", import_time4.ONE_SECOND), c2(this, "expectedPairingMethodMap", /* @__PURE__ */ new Map()), c2(this, "recentlyDeletedMap", /* @__PURE__ */ new Map()), c2(this, "recentlyDeletedLimit", 200), c2(this, "relayMessageCache", []), c2(this, "pendingSessions", /* @__PURE__ */ new Map()), c2(this, "init", async () => {
      this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), await this.registerLinkModeListeners(), this.client.core.pairing.register({ methods: Object.keys(N2) }), this.initialized = true, setTimeout(async () => {
        await this.processPendingMessageEvents(), this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();
      }, (0, import_time4.toMiliseconds)(this.requestQueueDelay)));
    }), c2(this, "connect", async (e) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      const t = b3(v4({}, e), { requiredNamespaces: e.requiredNamespaces || {}, optionalNamespaces: e.optionalNamespaces || {} });
      await this.isValidConnect(t), t.optionalNamespaces = aa(t.requiredNamespaces, t.optionalNamespaces), t.requiredNamespaces = {};
      const { pairingTopic: s, requiredNamespaces: i3, optionalNamespaces: r2, sessionProperties: o2, scopedProperties: a2, relays: l4 } = t;
      let p4 = s, h5, u3 = false;
      try {
        if (p4) {
          const T3 = this.client.core.pairing.pairings.get(p4);
          this.client.logger.warn("connect() with existing pairing topic is deprecated and will be removed in the next major release."), u3 = T3.active;
        }
      } catch (T3) {
        throw this.client.logger.error(`connect() -> pairing.get(${p4}) failed`), T3;
      }
      if (!p4 || !u3) {
        const { topic: T3, uri: K5 } = await this.client.core.pairing.create();
        p4 = T3, h5 = K5;
      }
      if (!p4) {
        const { message: T3 } = ht2("NO_MATCHING_KEY", `connect() pairing topic: ${p4}`);
        throw new Error(T3);
      }
      const d4 = await this.client.core.crypto.generateKeyPair(), w4 = N2.wc_sessionPropose.req.ttl || import_time4.FIVE_MINUTES, m2 = Ei(w4), f6 = b3(v4(v4({ requiredNamespaces: i3, optionalNamespaces: r2, relays: l4 ?? [{ protocol: xt3 }], proposer: { publicKey: d4, metadata: this.client.metadata }, expiryTimestamp: m2, pairingTopic: p4 }, o2 && { sessionProperties: o2 }), a2 && { scopedProperties: a2 }), { id: payloadId() }), _2 = xi("session_connect", f6.id), { reject: g2, resolve: A5, done: D3 } = gi(w4, $e3), I4 = ({ id: T3 }) => {
        T3 === f6.id && (this.client.events.off("proposal_expire", I4), this.pendingSessions.delete(f6.id), this.events.emit(_2, { error: { message: $e3, code: 0 } }));
      };
      return this.client.events.on("proposal_expire", I4), this.events.once(_2, ({ error: T3, session: K5 }) => {
        this.client.events.off("proposal_expire", I4), T3 ? g2(T3) : K5 && A5(K5);
      }), await this.sendRequest({ topic: p4, method: "wc_sessionPropose", params: f6, throwOnFailedPublish: true, clientRpcId: f6.id }), await this.setProposal(f6.id, f6), { uri: h5, approval: D3 };
    }), c2(this, "pair", async (e) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        return await this.client.core.pairing.pair(e);
      } catch (t) {
        throw this.client.logger.error("pair() failed"), t;
      }
    }), c2(this, "approve", async (e) => {
      var t, s, i3;
      const r2 = this.client.core.eventClient.createEvent({ properties: { topic: (t = e?.id) == null ? void 0 : t.toString(), trace: [er3.session_approve_started] } });
      try {
        this.isInitialized(), await this.confirmOnlineStateOrThrow();
      } catch (q4) {
        throw r2.setError(tr3.no_internet_connection), q4;
      }
      try {
        await this.isValidProposalId(e?.id);
      } catch (q4) {
        throw this.client.logger.error(`approve() -> proposal.get(${e?.id}) failed`), r2.setError(tr3.proposal_not_found), q4;
      }
      try {
        await this.isValidApprove(e);
      } catch (q4) {
        throw this.client.logger.error("approve() -> isValidApprove() failed"), r2.setError(tr3.session_approve_namespace_validation_failure), q4;
      }
      const { id: o2, relayProtocol: a2, namespaces: l4, sessionProperties: p4, scopedProperties: h5, sessionConfig: u3 } = e, d4 = this.client.proposal.get(o2);
      this.client.core.eventClient.deleteEvent({ eventId: r2.eventId });
      const { pairingTopic: w4, proposer: m2, requiredNamespaces: f6, optionalNamespaces: _2 } = d4;
      let g2 = (s = this.client.core.eventClient) == null ? void 0 : s.getEvent({ topic: w4 });
      g2 || (g2 = (i3 = this.client.core.eventClient) == null ? void 0 : i3.createEvent({ type: er3.session_approve_started, properties: { topic: w4, trace: [er3.session_approve_started, er3.session_namespaces_validation_success] } }));
      const A5 = await this.client.core.crypto.generateKeyPair(), D3 = m2.publicKey, I4 = await this.client.core.crypto.generateSharedKey(A5, D3), T3 = v4(v4(v4({ relay: { protocol: a2 ?? "irn" }, namespaces: l4, controller: { publicKey: A5, metadata: this.client.metadata }, expiry: Ei(J3) }, p4 && { sessionProperties: p4 }), h5 && { scopedProperties: h5 }), u3 && { sessionConfig: u3 }), K5 = Q2.relay;
      g2.addTrace(er3.subscribing_session_topic);
      try {
        await this.client.core.relayer.subscribe(I4, { transportType: K5 });
      } catch (q4) {
        throw g2.setError(tr3.subscribe_session_topic_failure), q4;
      }
      g2.addTrace(er3.subscribe_session_topic_success);
      const fe4 = b3(v4({}, T3), { topic: I4, requiredNamespaces: f6, optionalNamespaces: _2, pairingTopic: w4, acknowledged: false, self: T3.controller, peer: { publicKey: m2.publicKey, metadata: m2.metadata }, controller: A5, transportType: Q2.relay });
      await this.client.session.set(I4, fe4), g2.addTrace(er3.store_session);
      try {
        g2.addTrace(er3.publishing_session_settle), await this.sendRequest({ topic: I4, method: "wc_sessionSettle", params: T3, throwOnFailedPublish: true }).catch((q4) => {
          throw g2?.setError(tr3.session_settle_publish_failure), q4;
        }), g2.addTrace(er3.session_settle_publish_success), g2.addTrace(er3.publishing_session_approve), await this.sendResult({ id: o2, topic: w4, result: { relay: { protocol: a2 ?? "irn" }, responderPublicKey: A5 }, throwOnFailedPublish: true }).catch((q4) => {
          throw g2?.setError(tr3.session_approve_publish_failure), q4;
        }), g2.addTrace(er3.session_approve_publish_success);
      } catch (q4) {
        throw this.client.logger.error(q4), this.client.session.delete(I4, Nt2("USER_DISCONNECTED")), await this.client.core.relayer.unsubscribe(I4), q4;
      }
      return this.client.core.eventClient.deleteEvent({ eventId: g2.eventId }), await this.client.core.pairing.updateMetadata({ topic: w4, metadata: m2.metadata }), await this.client.proposal.delete(o2, Nt2("USER_DISCONNECTED")), await this.client.core.pairing.activate({ topic: w4 }), await this.setExpiry(I4, Ei(J3)), { topic: I4, acknowledged: () => Promise.resolve(this.client.session.get(I4)) };
    }), c2(this, "reject", async (e) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidReject(e);
      } catch (r2) {
        throw this.client.logger.error("reject() -> isValidReject() failed"), r2;
      }
      const { id: t, reason: s } = e;
      let i3;
      try {
        i3 = this.client.proposal.get(t).pairingTopic;
      } catch (r2) {
        throw this.client.logger.error(`reject() -> proposal.get(${t}) failed`), r2;
      }
      i3 && (await this.sendError({ id: t, topic: i3, error: s, rpcOpts: N2.wc_sessionPropose.reject }), await this.client.proposal.delete(t, Nt2("USER_DISCONNECTED")));
    }), c2(this, "update", async (e) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidUpdate(e);
      } catch (h5) {
        throw this.client.logger.error("update() -> isValidUpdate() failed"), h5;
      }
      const { topic: t, namespaces: s } = e, { done: i3, resolve: r2, reject: o2 } = gi(), a2 = payloadId(), l4 = getBigIntRpcId().toString(), p4 = this.client.session.get(t).namespaces;
      return this.events.once(xi("session_update", a2), ({ error: h5 }) => {
        h5 ? o2(h5) : r2();
      }), await this.client.session.update(t, { namespaces: s }), await this.sendRequest({ topic: t, method: "wc_sessionUpdate", params: { namespaces: s }, throwOnFailedPublish: true, clientRpcId: a2, relayRpcId: l4 }).catch((h5) => {
        this.client.logger.error(h5), this.client.session.update(t, { namespaces: p4 }), o2(h5);
      }), { acknowledged: i3 };
    }), c2(this, "extend", async (e) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidExtend(e);
      } catch (a2) {
        throw this.client.logger.error("extend() -> isValidExtend() failed"), a2;
      }
      const { topic: t } = e, s = payloadId(), { done: i3, resolve: r2, reject: o2 } = gi();
      return this.events.once(xi("session_extend", s), ({ error: a2 }) => {
        a2 ? o2(a2) : r2();
      }), await this.setExpiry(t, Ei(J3)), this.sendRequest({ topic: t, method: "wc_sessionExtend", params: {}, clientRpcId: s, throwOnFailedPublish: true }).catch((a2) => {
        o2(a2);
      }), { acknowledged: i3 };
    }), c2(this, "request", async (e) => {
      this.isInitialized();
      try {
        await this.isValidRequest(e);
      } catch (_2) {
        throw this.client.logger.error("request() -> isValidRequest() failed"), _2;
      }
      const { chainId: t, request: s, topic: i3, expiry: r2 = N2.wc_sessionRequest.req.ttl } = e, o2 = this.client.session.get(i3);
      o2?.transportType === Q2.relay && await this.confirmOnlineStateOrThrow();
      const a2 = payloadId(), l4 = getBigIntRpcId().toString(), { done: p4, resolve: h5, reject: u3 } = gi(r2, "Request expired. Please try again.");
      this.events.once(xi("session_request", a2), ({ error: _2, result: g2 }) => {
        _2 ? u3(_2) : h5(g2);
      });
      const d4 = "wc_sessionRequest", w4 = this.getAppLinkIfEnabled(o2.peer.metadata, o2.transportType);
      if (w4) return await this.sendRequest({ clientRpcId: a2, relayRpcId: l4, topic: i3, method: d4, params: { request: b3(v4({}, s), { expiryTimestamp: Ei(r2) }), chainId: t }, expiry: r2, throwOnFailedPublish: true, appLink: w4 }).catch((_2) => u3(_2)), this.client.events.emit("session_request_sent", { topic: i3, request: s, chainId: t, id: a2 }), await p4();
      const m2 = { request: b3(v4({}, s), { expiryTimestamp: Ei(r2) }), chainId: t }, f6 = this.shouldSetTVF(d4, m2);
      return await Promise.all([new Promise(async (_2) => {
        await this.sendRequest(v4({ clientRpcId: a2, relayRpcId: l4, topic: i3, method: d4, params: m2, expiry: r2, throwOnFailedPublish: true }, f6 && { tvf: this.getTVFParams(a2, m2) })).catch((g2) => u3(g2)), this.client.events.emit("session_request_sent", { topic: i3, request: s, chainId: t, id: a2 }), _2();
      }), new Promise(async (_2) => {
        var g2;
        if (!((g2 = o2.sessionConfig) != null && g2.disableDeepLink)) {
          const A5 = await Oi(this.client.core.storage, Me4);
          await Si({ id: a2, topic: i3, wcDeepLink: A5 });
        }
        _2();
      }), p4()]).then((_2) => _2[2]);
    }), c2(this, "respond", async (e) => {
      this.isInitialized(), await this.isValidRespond(e);
      const { topic: t, response: s } = e, { id: i3 } = s, r2 = this.client.session.get(t);
      r2.transportType === Q2.relay && await this.confirmOnlineStateOrThrow();
      const o2 = this.getAppLinkIfEnabled(r2.peer.metadata, r2.transportType);
      isJsonRpcResult(s) ? await this.sendResult({ id: i3, topic: t, result: s.result, throwOnFailedPublish: true, appLink: o2 }) : isJsonRpcError(s) && await this.sendError({ id: i3, topic: t, error: s.error, appLink: o2 }), this.cleanupAfterResponse(e);
    }), c2(this, "ping", async (e) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidPing(e);
      } catch (s) {
        throw this.client.logger.error("ping() -> isValidPing() failed"), s;
      }
      const { topic: t } = e;
      if (this.client.session.keys.includes(t)) {
        const s = payloadId(), i3 = getBigIntRpcId().toString(), { done: r2, resolve: o2, reject: a2 } = gi();
        this.events.once(xi("session_ping", s), ({ error: l4 }) => {
          l4 ? a2(l4) : o2();
        }), await Promise.all([this.sendRequest({ topic: t, method: "wc_sessionPing", params: {}, throwOnFailedPublish: true, clientRpcId: s, relayRpcId: i3 }), r2()]);
      } else this.client.core.pairing.pairings.keys.includes(t) && (this.client.logger.warn("ping() on pairing topic is deprecated and will be removed in the next major release."), await this.client.core.pairing.ping({ topic: t }));
    }), c2(this, "emit", async (e) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidEmit(e);
      const { topic: t, event: s, chainId: i3 } = e, r2 = getBigIntRpcId().toString(), o2 = payloadId();
      await this.sendRequest({ topic: t, method: "wc_sessionEvent", params: { event: s, chainId: i3 }, throwOnFailedPublish: true, relayRpcId: r2, clientRpcId: o2 });
    }), c2(this, "disconnect", async (e) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidDisconnect(e);
      const { topic: t } = e;
      if (this.client.session.keys.includes(t)) await this.sendRequest({ topic: t, method: "wc_sessionDelete", params: Nt2("USER_DISCONNECTED"), throwOnFailedPublish: true }), await this.deleteSession({ topic: t, emitEvent: false });
      else if (this.client.core.pairing.pairings.keys.includes(t)) await this.client.core.pairing.disconnect({ topic: t });
      else {
        const { message: s } = ht2("MISMATCHED_TOPIC", `Session or pairing topic not found: ${t}`);
        throw new Error(s);
      }
    }), c2(this, "find", (e) => (this.isInitialized(), this.client.session.getAll().filter((t) => ua(t, e)))), c2(this, "getPendingSessionRequests", () => this.client.pendingRequest.getAll()), c2(this, "authenticate", async (e, t) => {
      var s;
      this.isInitialized(), this.isValidAuthenticate(e);
      const i3 = t && this.client.core.linkModeSupportedApps.includes(t) && ((s = this.client.metadata.redirect) == null ? void 0 : s.linkMode), r2 = i3 ? Q2.link_mode : Q2.relay;
      r2 === Q2.relay && await this.confirmOnlineStateOrThrow();
      const { chains: o2, statement: a2 = "", uri: l4, domain: p4, nonce: h5, type: u3, exp: d4, nbf: w4, methods: m2 = [], expiry: f6 } = e, _2 = [...e.resources || []], { topic: g2, uri: A5 } = await this.client.core.pairing.create({ methods: ["wc_sessionAuthenticate"], transportType: r2 });
      this.client.logger.info({ message: "Generated new pairing", pairing: { topic: g2, uri: A5 } });
      const D3 = await this.client.core.crypto.generateKeyPair(), I4 = Pc(D3);
      if (await Promise.all([this.client.auth.authKeys.set(ce2, { responseTopic: I4, publicKey: D3 }), this.client.auth.pairingTopics.set(I4, { topic: I4, pairingTopic: g2 })]), await this.client.core.relayer.subscribe(I4, { transportType: r2 }), this.client.logger.info(`sending request to new pairing topic: ${g2}`), m2.length > 0) {
        const { namespace: x3 } = Ne2(o2[0]);
        let L4 = fs(x3, "request", m2);
        pe2(_2) && (L4 = ls(L4, _2.pop())), _2.push(L4);
      }
      const T3 = f6 && f6 > N2.wc_sessionAuthenticate.req.ttl ? f6 : N2.wc_sessionAuthenticate.req.ttl, K5 = { authPayload: { type: u3 ?? "caip122", chains: o2, statement: a2, aud: l4, domain: p4, version: "1", nonce: h5, iat: (/* @__PURE__ */ new Date()).toISOString(), exp: d4, nbf: w4, resources: _2 }, requester: { publicKey: D3, metadata: this.client.metadata }, expiryTimestamp: Ei(T3) }, fe4 = { eip155: { chains: o2, methods: [.../* @__PURE__ */ new Set(["personal_sign", ...m2])], events: ["chainChanged", "accountsChanged"] } }, q4 = { requiredNamespaces: {}, optionalNamespaces: fe4, relays: [{ protocol: "irn" }], pairingTopic: g2, proposer: { publicKey: D3, metadata: this.client.metadata }, expiryTimestamp: Ei(N2.wc_sessionPropose.req.ttl), id: payloadId() }, { done: Rt5, resolve: je5, reject: Se5 } = gi(T3, "Request expired"), te4 = payloadId(), le5 = xi("session_connect", q4.id), Re3 = xi("session_request", te4), pe5 = async ({ error: x3, session: L4 }) => {
        this.events.off(Re3, ve4), x3 ? Se5(x3) : L4 && je5({ session: L4 });
      }, ve4 = async (x3) => {
        var L4, Fe4, Qe5;
        if (await this.deletePendingAuthRequest(te4, { message: "fulfilled", code: 0 }), x3.error) {
          const ie4 = Nt2("WC_METHOD_UNSUPPORTED", "wc_sessionAuthenticate");
          return x3.error.code === ie4.code ? void 0 : (this.events.off(le5, pe5), Se5(x3.error.message));
        }
        await this.deleteProposal(q4.id), this.events.off(le5, pe5);
        const { cacaos: He5, responder: Q5 } = x3.result, Te4 = [], ze5 = [];
        for (const ie4 of He5) {
          await is({ cacao: ie4, projectId: this.client.core.projectId }) || (this.client.logger.error(ie4, "Signature verification failed"), Se5(Nt2("SESSION_SETTLEMENT_FAILED", "Signature verification failed")));
          const { p: qe5 } = ie4, Pe5 = pe2(qe5.resources), Ye5 = [dr2(qe5.iss)], vt3 = De2(qe5.iss);
          if (Pe5) {
            const Ne4 = ds(Pe5), It5 = hs(Pe5);
            Te4.push(...Ne4), Ye5.push(...It5);
          }
          for (const Ne4 of Ye5) ze5.push(`${Ne4}:${vt3}`);
        }
        const se4 = await this.client.core.crypto.generateSharedKey(D3, Q5.publicKey);
        let he5;
        Te4.length > 0 && (he5 = { topic: se4, acknowledged: true, self: { publicKey: D3, metadata: this.client.metadata }, peer: Q5, controller: Q5.publicKey, expiry: Ei(J3), requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: g2, namespaces: ca([...new Set(Te4)], [...new Set(ze5)]), transportType: r2 }, await this.client.core.relayer.subscribe(se4, { transportType: r2 }), await this.client.session.set(se4, he5), g2 && await this.client.core.pairing.updateMetadata({ topic: g2, metadata: Q5.metadata }), he5 = this.client.session.get(se4)), (L4 = this.client.metadata.redirect) != null && L4.linkMode && (Fe4 = Q5.metadata.redirect) != null && Fe4.linkMode && (Qe5 = Q5.metadata.redirect) != null && Qe5.universal && t && (this.client.core.addLinkModeSupportedApp(Q5.metadata.redirect.universal), this.client.session.update(se4, { transportType: Q2.link_mode })), je5({ auths: He5, session: he5 });
      };
      this.events.once(le5, pe5), this.events.once(Re3, ve4);
      let Ie5;
      try {
        if (i3) {
          const x3 = formatJsonRpcRequest("wc_sessionAuthenticate", K5, te4);
          this.client.core.history.set(g2, x3);
          const L4 = await this.client.core.crypto.encode("", x3, { type: re, encoding: xe2 });
          Ie5 = Xc(t, g2, L4);
        } else await Promise.all([this.sendRequest({ topic: g2, method: "wc_sessionAuthenticate", params: K5, expiry: e.expiry, throwOnFailedPublish: true, clientRpcId: te4 }), this.sendRequest({ topic: g2, method: "wc_sessionPropose", params: q4, expiry: N2.wc_sessionPropose.req.ttl, throwOnFailedPublish: true, clientRpcId: q4.id })]);
      } catch (x3) {
        throw this.events.off(le5, pe5), this.events.off(Re3, ve4), x3;
      }
      return await this.setProposal(q4.id, q4), await this.setAuthRequest(te4, { request: b3(v4({}, K5), { verifyContext: {} }), pairingTopic: g2, transportType: r2 }), { uri: Ie5 ?? A5, response: Rt5 };
    }), c2(this, "approveSessionAuthenticate", async (e) => {
      const { id: t, auths: s } = e, i3 = this.client.core.eventClient.createEvent({ properties: { topic: t.toString(), trace: [ir3.authenticated_session_approve_started] } });
      try {
        this.isInitialized();
      } catch (f6) {
        throw i3.setError(sr3.no_internet_connection), f6;
      }
      const r2 = this.getPendingAuthRequest(t);
      if (!r2) throw i3.setError(sr3.authenticated_session_pending_request_not_found), new Error(`Could not find pending auth request with id ${t}`);
      const o2 = r2.transportType || Q2.relay;
      o2 === Q2.relay && await this.confirmOnlineStateOrThrow();
      const a2 = r2.requester.publicKey, l4 = await this.client.core.crypto.generateKeyPair(), p4 = Pc(a2), h5 = { type: Ft2, receiverPublicKey: a2, senderPublicKey: l4 }, u3 = [], d4 = [];
      for (const f6 of s) {
        if (!await is({ cacao: f6, projectId: this.client.core.projectId })) {
          i3.setError(sr3.invalid_cacao);
          const I4 = Nt2("SESSION_SETTLEMENT_FAILED", "Signature verification failed");
          throw await this.sendError({ id: t, topic: p4, error: I4, encodeOpts: h5 }), new Error(I4.message);
        }
        i3.addTrace(ir3.cacaos_verified);
        const { p: _2 } = f6, g2 = pe2(_2.resources), A5 = [dr2(_2.iss)], D3 = De2(_2.iss);
        if (g2) {
          const I4 = ds(g2), T3 = hs(g2);
          u3.push(...I4), A5.push(...T3);
        }
        for (const I4 of A5) d4.push(`${I4}:${D3}`);
      }
      const w4 = await this.client.core.crypto.generateSharedKey(l4, a2);
      i3.addTrace(ir3.create_authenticated_session_topic);
      let m2;
      if (u3?.length > 0) {
        m2 = { topic: w4, acknowledged: true, self: { publicKey: l4, metadata: this.client.metadata }, peer: { publicKey: a2, metadata: r2.requester.metadata }, controller: a2, expiry: Ei(J3), authentication: s, requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: r2.pairingTopic, namespaces: ca([...new Set(u3)], [...new Set(d4)]), transportType: o2 }, i3.addTrace(ir3.subscribing_authenticated_session_topic);
        try {
          await this.client.core.relayer.subscribe(w4, { transportType: o2 });
        } catch (f6) {
          throw i3.setError(sr3.subscribe_authenticated_session_topic_failure), f6;
        }
        i3.addTrace(ir3.subscribe_authenticated_session_topic_success), await this.client.session.set(w4, m2), i3.addTrace(ir3.store_authenticated_session), await this.client.core.pairing.updateMetadata({ topic: r2.pairingTopic, metadata: r2.requester.metadata });
      }
      i3.addTrace(ir3.publishing_authenticated_session_approve);
      try {
        await this.sendResult({ topic: p4, id: t, result: { cacaos: s, responder: { publicKey: l4, metadata: this.client.metadata } }, encodeOpts: h5, throwOnFailedPublish: true, appLink: this.getAppLinkIfEnabled(r2.requester.metadata, o2) });
      } catch (f6) {
        throw i3.setError(sr3.authenticated_session_approve_publish_failure), f6;
      }
      return await this.client.auth.requests.delete(t, { message: "fulfilled", code: 0 }), await this.client.core.pairing.activate({ topic: r2.pairingTopic }), this.client.core.eventClient.deleteEvent({ eventId: i3.eventId }), { session: m2 };
    }), c2(this, "rejectSessionAuthenticate", async (e) => {
      this.isInitialized();
      const { id: t, reason: s } = e, i3 = this.getPendingAuthRequest(t);
      if (!i3) throw new Error(`Could not find pending auth request with id ${t}`);
      i3.transportType === Q2.relay && await this.confirmOnlineStateOrThrow();
      const r2 = i3.requester.publicKey, o2 = await this.client.core.crypto.generateKeyPair(), a2 = Pc(r2), l4 = { type: Ft2, receiverPublicKey: r2, senderPublicKey: o2 };
      await this.sendError({ id: t, topic: a2, error: s, encodeOpts: l4, rpcOpts: N2.wc_sessionAuthenticate.reject, appLink: this.getAppLinkIfEnabled(i3.requester.metadata, i3.transportType) }), await this.client.auth.requests.delete(t, { message: "rejected", code: 0 }), await this.client.proposal.delete(t, Nt2("USER_DISCONNECTED"));
    }), c2(this, "formatAuthMessage", (e) => {
      this.isInitialized();
      const { request: t, iss: s } = e;
      return hr2(t, s);
    }), c2(this, "processRelayMessageCache", () => {
      setTimeout(async () => {
        if (this.relayMessageCache.length !== 0) for (; this.relayMessageCache.length > 0; ) try {
          const e = this.relayMessageCache.shift();
          e && await this.onRelayMessage(e);
        } catch (e) {
          this.client.logger.error(e);
        }
      }, 50);
    }), c2(this, "cleanupDuplicatePairings", async (e) => {
      if (e.pairingTopic) try {
        const t = this.client.core.pairing.pairings.get(e.pairingTopic), s = this.client.core.pairing.pairings.getAll().filter((i3) => {
          var r2, o2;
          return ((r2 = i3.peerMetadata) == null ? void 0 : r2.url) && ((o2 = i3.peerMetadata) == null ? void 0 : o2.url) === e.peer.metadata.url && i3.topic && i3.topic !== t.topic;
        });
        if (s.length === 0) return;
        this.client.logger.info(`Cleaning up ${s.length} duplicate pairing(s)`), await Promise.all(s.map((i3) => this.client.core.pairing.disconnect({ topic: i3.topic }))), this.client.logger.info("Duplicate pairings clean up finished");
      } catch (t) {
        this.client.logger.error(t);
      }
    }), c2(this, "deleteSession", async (e) => {
      var t;
      const { topic: s, expirerHasDeleted: i3 = false, emitEvent: r2 = true, id: o2 = 0 } = e, { self: a2 } = this.client.session.get(s);
      await this.client.core.relayer.unsubscribe(s), await this.client.session.delete(s, Nt2("USER_DISCONNECTED")), this.addToRecentlyDeleted(s, "session"), this.client.core.crypto.keychain.has(a2.publicKey) && await this.client.core.crypto.deleteKeyPair(a2.publicKey), this.client.core.crypto.keychain.has(s) && await this.client.core.crypto.deleteSymKey(s), i3 || this.client.core.expirer.del(s), this.client.core.storage.removeItem(Me4).catch((l4) => this.client.logger.warn(l4)), this.getPendingSessionRequests().forEach((l4) => {
        l4.topic === s && this.deletePendingSessionRequest(l4.id, Nt2("USER_DISCONNECTED"));
      }), s === ((t = this.sessionRequestQueue.queue[0]) == null ? void 0 : t.topic) && (this.sessionRequestQueue.state = $2.idle), r2 && this.client.events.emit("session_delete", { id: o2, topic: s });
    }), c2(this, "deleteProposal", async (e, t) => {
      if (t) try {
        const s = this.client.proposal.get(e), i3 = this.client.core.eventClient.getEvent({ topic: s.pairingTopic });
        i3?.setError(tr3.proposal_expired);
      } catch {
      }
      await Promise.all([this.client.proposal.delete(e, Nt2("USER_DISCONNECTED")), t ? Promise.resolve() : this.client.core.expirer.del(e)]), this.addToRecentlyDeleted(e, "proposal");
    }), c2(this, "deletePendingSessionRequest", async (e, t, s = false) => {
      await Promise.all([this.client.pendingRequest.delete(e, t), s ? Promise.resolve() : this.client.core.expirer.del(e)]), this.addToRecentlyDeleted(e, "request"), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((i3) => i3.id !== e), s && (this.sessionRequestQueue.state = $2.idle, this.client.events.emit("session_request_expire", { id: e }));
    }), c2(this, "deletePendingAuthRequest", async (e, t, s = false) => {
      await Promise.all([this.client.auth.requests.delete(e, t), s ? Promise.resolve() : this.client.core.expirer.del(e)]);
    }), c2(this, "setExpiry", async (e, t) => {
      this.client.session.keys.includes(e) && (this.client.core.expirer.set(e, t), await this.client.session.update(e, { expiry: t }));
    }), c2(this, "setProposal", async (e, t) => {
      this.client.core.expirer.set(e, Ei(N2.wc_sessionPropose.req.ttl)), await this.client.proposal.set(e, t);
    }), c2(this, "setAuthRequest", async (e, t) => {
      const { request: s, pairingTopic: i3, transportType: r2 = Q2.relay } = t;
      this.client.core.expirer.set(e, s.expiryTimestamp), await this.client.auth.requests.set(e, { authPayload: s.authPayload, requester: s.requester, expiryTimestamp: s.expiryTimestamp, id: e, pairingTopic: i3, verifyContext: s.verifyContext, transportType: r2 });
    }), c2(this, "setPendingSessionRequest", async (e) => {
      const { id: t, topic: s, params: i3, verifyContext: r2 } = e, o2 = i3.request.expiryTimestamp || Ei(N2.wc_sessionRequest.req.ttl);
      this.client.core.expirer.set(t, o2), await this.client.pendingRequest.set(t, { id: t, topic: s, params: i3, verifyContext: r2 });
    }), c2(this, "sendRequest", async (e) => {
      const { topic: t, method: s, params: i3, expiry: r2, relayRpcId: o2, clientRpcId: a2, throwOnFailedPublish: l4, appLink: p4, tvf: h5 } = e, u3 = formatJsonRpcRequest(s, i3, a2);
      let d4;
      const w4 = !!p4;
      try {
        const _2 = w4 ? xe2 : qt2;
        d4 = await this.client.core.crypto.encode(t, u3, { encoding: _2 });
      } catch (_2) {
        throw await this.cleanup(), this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${t} failed`), _2;
      }
      let m2;
      if (gt3.includes(s)) {
        const _2 = kc(JSON.stringify(u3)), g2 = kc(d4);
        m2 = await this.client.core.verify.register({ id: g2, decryptedId: _2 });
      }
      const f6 = N2[s].req;
      if (f6.attestation = m2, r2 && (f6.ttl = r2), o2 && (f6.id = o2), this.client.core.history.set(t, u3), w4) {
        const _2 = Xc(p4, t, d4);
        await global.Linking.openURL(_2, this.client.name);
      } else {
        const _2 = N2[s].req;
        r2 && (_2.ttl = r2), o2 && (_2.id = o2), _2.tvf = b3(v4({}, h5), { correlationId: u3.id }), l4 ? (_2.internal = b3(v4({}, _2.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(t, d4, _2)) : this.client.core.relayer.publish(t, d4, _2).catch((g2) => this.client.logger.error(g2));
      }
      return u3.id;
    }), c2(this, "sendResult", async (e) => {
      const { id: t, topic: s, result: i3, throwOnFailedPublish: r2, encodeOpts: o2, appLink: a2 } = e, l4 = formatJsonRpcResult(t, i3);
      let p4;
      const h5 = a2 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const w4 = h5 ? xe2 : qt2;
        p4 = await this.client.core.crypto.encode(s, l4, b3(v4({}, o2 || {}), { encoding: w4 }));
      } catch (w4) {
        throw await this.cleanup(), this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s} failed`), w4;
      }
      let u3, d4;
      try {
        u3 = await this.client.core.history.get(s, t);
        const w4 = u3.request;
        try {
          this.shouldSetTVF(w4.method, w4.params) && (d4 = this.getTVFParams(t, w4.params, i3));
        } catch (m2) {
          this.client.logger.warn("sendResult() -> getTVFParams() failed", m2);
        }
      } catch (w4) {
        throw this.client.logger.error(`sendResult() -> history.get(${s}, ${t}) failed`), w4;
      }
      if (h5) {
        const w4 = Xc(a2, s, p4);
        await global.Linking.openURL(w4, this.client.name);
      } else {
        const w4 = u3.request.method, m2 = N2[w4].res;
        m2.tvf = b3(v4({}, d4), { correlationId: t }), r2 ? (m2.internal = b3(v4({}, m2.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(s, p4, m2)) : this.client.core.relayer.publish(s, p4, m2).catch((f6) => this.client.logger.error(f6));
      }
      await this.client.core.history.resolve(l4);
    }), c2(this, "sendError", async (e) => {
      const { id: t, topic: s, error: i3, encodeOpts: r2, rpcOpts: o2, appLink: a2 } = e, l4 = formatJsonRpcError(t, i3);
      let p4;
      const h5 = a2 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const d4 = h5 ? xe2 : qt2;
        p4 = await this.client.core.crypto.encode(s, l4, b3(v4({}, r2 || {}), { encoding: d4 }));
      } catch (d4) {
        throw await this.cleanup(), this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s} failed`), d4;
      }
      let u3;
      try {
        u3 = await this.client.core.history.get(s, t);
      } catch (d4) {
        throw this.client.logger.error(`sendError() -> history.get(${s}, ${t}) failed`), d4;
      }
      if (h5) {
        const d4 = Xc(a2, s, p4);
        await global.Linking.openURL(d4, this.client.name);
      } else {
        const d4 = u3.request.method, w4 = o2 || N2[d4].res;
        this.client.core.relayer.publish(s, p4, w4);
      }
      await this.client.core.history.resolve(l4);
    }), c2(this, "cleanup", async () => {
      const e = [], t = [];
      this.client.session.getAll().forEach((s) => {
        let i3 = false;
        vi(s.expiry) && (i3 = true), this.client.core.crypto.keychain.has(s.topic) || (i3 = true), i3 && e.push(s.topic);
      }), this.client.proposal.getAll().forEach((s) => {
        vi(s.expiryTimestamp) && t.push(s.id);
      }), await Promise.all([...e.map((s) => this.deleteSession({ topic: s })), ...t.map((s) => this.deleteProposal(s))]);
    }), c2(this, "onProviderMessageEvent", async (e) => {
      !this.initialized || this.relayMessageCache.length > 0 ? this.relayMessageCache.push(e) : await this.onRelayMessage(e);
    }), c2(this, "onRelayEventRequest", async (e) => {
      this.requestQueue.queue.push(e), await this.processRequestsQueue();
    }), c2(this, "processRequestsQueue", async () => {
      if (this.requestQueue.state === $2.active) {
        this.client.logger.info("Request queue already active, skipping...");
        return;
      }
      for (this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0; ) {
        this.requestQueue.state = $2.active;
        const e = this.requestQueue.queue.shift();
        if (e) try {
          await this.processRequest(e);
        } catch (t) {
          this.client.logger.warn(t);
        }
      }
      this.requestQueue.state = $2.idle;
    }), c2(this, "processRequest", async (e) => {
      const { topic: t, payload: s, attestation: i3, transportType: r2, encryptedId: o2 } = e, a2 = s.method;
      if (!this.shouldIgnorePairingRequest({ topic: t, requestMethod: a2 })) switch (a2) {
        case "wc_sessionPropose":
          return await this.onSessionProposeRequest({ topic: t, payload: s, attestation: i3, encryptedId: o2 });
        case "wc_sessionSettle":
          return await this.onSessionSettleRequest(t, s);
        case "wc_sessionUpdate":
          return await this.onSessionUpdateRequest(t, s);
        case "wc_sessionExtend":
          return await this.onSessionExtendRequest(t, s);
        case "wc_sessionPing":
          return await this.onSessionPingRequest(t, s);
        case "wc_sessionDelete":
          return await this.onSessionDeleteRequest(t, s);
        case "wc_sessionRequest":
          return await this.onSessionRequest({ topic: t, payload: s, attestation: i3, encryptedId: o2, transportType: r2 });
        case "wc_sessionEvent":
          return await this.onSessionEventRequest(t, s);
        case "wc_sessionAuthenticate":
          return await this.onSessionAuthenticateRequest({ topic: t, payload: s, attestation: i3, encryptedId: o2, transportType: r2 });
        default:
          return this.client.logger.info(`Unsupported request method ${a2}`);
      }
    }), c2(this, "onRelayEventResponse", async (e) => {
      const { topic: t, payload: s, transportType: i3 } = e, r2 = (await this.client.core.history.get(t, s.id)).request.method;
      switch (r2) {
        case "wc_sessionPropose":
          return this.onSessionProposeResponse(t, s, i3);
        case "wc_sessionSettle":
          return this.onSessionSettleResponse(t, s);
        case "wc_sessionUpdate":
          return this.onSessionUpdateResponse(t, s);
        case "wc_sessionExtend":
          return this.onSessionExtendResponse(t, s);
        case "wc_sessionPing":
          return this.onSessionPingResponse(t, s);
        case "wc_sessionRequest":
          return this.onSessionRequestResponse(t, s);
        case "wc_sessionAuthenticate":
          return this.onSessionAuthenticateResponse(t, s);
        default:
          return this.client.logger.info(`Unsupported response method ${r2}`);
      }
    }), c2(this, "onRelayEventUnknownPayload", (e) => {
      const { topic: t } = e, { message: s } = ht2("MISSING_OR_INVALID", `Decoded payload on topic ${t} is not identifiable as a JSON-RPC request or a response.`);
      throw new Error(s);
    }), c2(this, "shouldIgnorePairingRequest", (e) => {
      const { topic: t, requestMethod: s } = e, i3 = this.expectedPairingMethodMap.get(t);
      return !i3 || i3.includes(s) ? false : !!(i3.includes("wc_sessionAuthenticate") && this.client.events.listenerCount("session_authenticate") > 0);
    }), c2(this, "onSessionProposeRequest", async (e) => {
      const { topic: t, payload: s, attestation: i3, encryptedId: r2 } = e, { params: o2, id: a2 } = s;
      try {
        const l4 = this.client.core.eventClient.getEvent({ topic: t });
        this.client.events.listenerCount("session_proposal") === 0 && (console.warn("No listener for session_proposal event"), l4?.setError(Y2.proposal_listener_not_found)), this.isValidConnect(v4({}, s.params));
        const p4 = o2.expiryTimestamp || Ei(N2.wc_sessionPropose.req.ttl), h5 = v4({ id: a2, pairingTopic: t, expiryTimestamp: p4 }, o2);
        await this.setProposal(a2, h5);
        const u3 = await this.getVerifyContext({ attestationId: i3, hash: kc(JSON.stringify(s)), encryptedId: r2, metadata: h5.proposer.metadata });
        l4?.addTrace(G3.emit_session_proposal), this.client.events.emit("session_proposal", { id: a2, params: h5, verifyContext: u3 });
      } catch (l4) {
        await this.sendError({ id: a2, topic: t, error: l4, rpcOpts: N2.wc_sessionPropose.autoReject }), this.client.logger.error(l4);
      }
    }), c2(this, "onSessionProposeResponse", async (e, t, s) => {
      const { id: i3 } = t;
      if (isJsonRpcResult(t)) {
        const { result: r2 } = t;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", result: r2 });
        const o2 = this.client.proposal.get(i3);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", proposal: o2 });
        const a2 = o2.proposer.publicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", selfPublicKey: a2 });
        const l4 = r2.responderPublicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", peerPublicKey: l4 });
        const p4 = await this.client.core.crypto.generateSharedKey(a2, l4);
        this.pendingSessions.set(i3, { sessionTopic: p4, pairingTopic: e, proposalId: i3, publicKey: a2 });
        const h5 = await this.client.core.relayer.subscribe(p4, { transportType: s });
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", subscriptionId: h5 }), await this.client.core.pairing.activate({ topic: e });
      } else if (isJsonRpcError(t)) {
        await this.client.proposal.delete(i3, Nt2("USER_DISCONNECTED"));
        const r2 = xi("session_connect", i3);
        if (this.events.listenerCount(r2) === 0) throw new Error(`emitting ${r2} without any listeners, 954`);
        this.events.emit(r2, { error: t.error });
      }
    }), c2(this, "onSessionSettleRequest", async (e, t) => {
      const { id: s, params: i3 } = t;
      try {
        this.isValidSessionSettleRequest(i3);
        const { relay: r2, controller: o2, expiry: a2, namespaces: l4, sessionProperties: p4, scopedProperties: h5, sessionConfig: u3 } = t.params, d4 = [...this.pendingSessions.values()].find((f6) => f6.sessionTopic === e);
        if (!d4) return this.client.logger.error(`Pending session not found for topic ${e}`);
        const w4 = this.client.proposal.get(d4.proposalId), m2 = b3(v4(v4(v4({ topic: e, relay: r2, expiry: a2, namespaces: l4, acknowledged: true, pairingTopic: d4.pairingTopic, requiredNamespaces: w4.requiredNamespaces, optionalNamespaces: w4.optionalNamespaces, controller: o2.publicKey, self: { publicKey: d4.publicKey, metadata: this.client.metadata }, peer: { publicKey: o2.publicKey, metadata: o2.metadata } }, p4 && { sessionProperties: p4 }), h5 && { scopedProperties: h5 }), u3 && { sessionConfig: u3 }), { transportType: Q2.relay });
        await this.client.session.set(m2.topic, m2), await this.setExpiry(m2.topic, m2.expiry), await this.client.core.pairing.updateMetadata({ topic: d4.pairingTopic, metadata: m2.peer.metadata }), this.client.events.emit("session_connect", { session: m2 }), this.events.emit(xi("session_connect", d4.proposalId), { session: m2 }), this.pendingSessions.delete(d4.proposalId), this.deleteProposal(d4.proposalId, false), this.cleanupDuplicatePairings(m2), await this.sendResult({ id: t.id, topic: e, result: true, throwOnFailedPublish: true });
      } catch (r2) {
        await this.sendError({ id: s, topic: e, error: r2 }), this.client.logger.error(r2);
      }
    }), c2(this, "onSessionSettleResponse", async (e, t) => {
      const { id: s } = t;
      isJsonRpcResult(t) ? (await this.client.session.update(e, { acknowledged: true }), this.events.emit(xi("session_approve", s), {})) : isJsonRpcError(t) && (await this.client.session.delete(e, Nt2("USER_DISCONNECTED")), this.events.emit(xi("session_approve", s), { error: t.error }));
    }), c2(this, "onSessionUpdateRequest", async (e, t) => {
      const { params: s, id: i3 } = t;
      try {
        const r2 = `${e}_session_update`, o2 = Ra.get(r2);
        if (o2 && this.isRequestOutOfSync(o2, i3)) {
          this.client.logger.warn(`Discarding out of sync request - ${i3}`), this.sendError({ id: i3, topic: e, error: Nt2("INVALID_UPDATE_REQUEST") });
          return;
        }
        this.isValidUpdate(v4({ topic: e }, s));
        try {
          Ra.set(r2, i3), await this.client.session.update(e, { namespaces: s.namespaces }), await this.sendResult({ id: i3, topic: e, result: true, throwOnFailedPublish: true });
        } catch (a2) {
          throw Ra.delete(r2), a2;
        }
        this.client.events.emit("session_update", { id: i3, topic: e, params: s });
      } catch (r2) {
        await this.sendError({ id: i3, topic: e, error: r2 }), this.client.logger.error(r2);
      }
    }), c2(this, "isRequestOutOfSync", (e, t) => t.toString().slice(0, -3) < e.toString().slice(0, -3)), c2(this, "onSessionUpdateResponse", (e, t) => {
      const { id: s } = t, i3 = xi("session_update", s);
      if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners`);
      isJsonRpcResult(t) ? this.events.emit(xi("session_update", s), {}) : isJsonRpcError(t) && this.events.emit(xi("session_update", s), { error: t.error });
    }), c2(this, "onSessionExtendRequest", async (e, t) => {
      const { id: s } = t;
      try {
        this.isValidExtend({ topic: e }), await this.setExpiry(e, Ei(J3)), await this.sendResult({ id: s, topic: e, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_extend", { id: s, topic: e });
      } catch (i3) {
        await this.sendError({ id: s, topic: e, error: i3 }), this.client.logger.error(i3);
      }
    }), c2(this, "onSessionExtendResponse", (e, t) => {
      const { id: s } = t, i3 = xi("session_extend", s);
      if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners`);
      isJsonRpcResult(t) ? this.events.emit(xi("session_extend", s), {}) : isJsonRpcError(t) && this.events.emit(xi("session_extend", s), { error: t.error });
    }), c2(this, "onSessionPingRequest", async (e, t) => {
      const { id: s } = t;
      try {
        this.isValidPing({ topic: e }), await this.sendResult({ id: s, topic: e, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_ping", { id: s, topic: e });
      } catch (i3) {
        await this.sendError({ id: s, topic: e, error: i3 }), this.client.logger.error(i3);
      }
    }), c2(this, "onSessionPingResponse", (e, t) => {
      const { id: s } = t, i3 = xi("session_ping", s);
      setTimeout(() => {
        if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners 2176`);
        isJsonRpcResult(t) ? this.events.emit(xi("session_ping", s), {}) : isJsonRpcError(t) && this.events.emit(xi("session_ping", s), { error: t.error });
      }, 500);
    }), c2(this, "onSessionDeleteRequest", async (e, t) => {
      const { id: s } = t;
      try {
        this.isValidDisconnect({ topic: e, reason: t.params }), Promise.all([new Promise((i3) => {
          this.client.core.relayer.once(C2.publish, async () => {
            i3(await this.deleteSession({ topic: e, id: s }));
          });
        }), this.sendResult({ id: s, topic: e, result: true, throwOnFailedPublish: true }), this.cleanupPendingSentRequestsForTopic({ topic: e, error: Nt2("USER_DISCONNECTED") })]).catch((i3) => this.client.logger.error(i3));
      } catch (i3) {
        this.client.logger.error(i3);
      }
    }), c2(this, "onSessionRequest", async (e) => {
      var t, s, i3;
      const { topic: r2, payload: o2, attestation: a2, encryptedId: l4, transportType: p4 } = e, { id: h5, params: u3 } = o2;
      try {
        await this.isValidRequest(v4({ topic: r2 }, u3));
        const d4 = this.client.session.get(r2), w4 = await this.getVerifyContext({ attestationId: a2, hash: kc(JSON.stringify(formatJsonRpcRequest("wc_sessionRequest", u3, h5))), encryptedId: l4, metadata: d4.peer.metadata, transportType: p4 }), m2 = { id: h5, topic: r2, params: u3, verifyContext: w4 };
        await this.setPendingSessionRequest(m2), p4 === Q2.link_mode && (t = d4.peer.metadata.redirect) != null && t.universal && this.client.core.addLinkModeSupportedApp((s = d4.peer.metadata.redirect) == null ? void 0 : s.universal), (i3 = this.client.signConfig) != null && i3.disableRequestQueue ? this.emitSessionRequest(m2) : (this.addSessionRequestToSessionRequestQueue(m2), this.processSessionRequestQueue());
      } catch (d4) {
        await this.sendError({ id: h5, topic: r2, error: d4 }), this.client.logger.error(d4);
      }
    }), c2(this, "onSessionRequestResponse", (e, t) => {
      const { id: s } = t, i3 = xi("session_request", s);
      if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners`);
      isJsonRpcResult(t) ? this.events.emit(xi("session_request", s), { result: t.result }) : isJsonRpcError(t) && this.events.emit(xi("session_request", s), { error: t.error });
    }), c2(this, "onSessionEventRequest", async (e, t) => {
      const { id: s, params: i3 } = t;
      try {
        const r2 = `${e}_session_event_${i3.event.name}`, o2 = Ra.get(r2);
        if (o2 && this.isRequestOutOfSync(o2, s)) {
          this.client.logger.info(`Discarding out of sync request - ${s}`);
          return;
        }
        this.isValidEmit(v4({ topic: e }, i3)), this.client.events.emit("session_event", { id: s, topic: e, params: i3 }), Ra.set(r2, s);
      } catch (r2) {
        await this.sendError({ id: s, topic: e, error: r2 }), this.client.logger.error(r2);
      }
    }), c2(this, "onSessionAuthenticateResponse", (e, t) => {
      const { id: s } = t;
      this.client.logger.trace({ type: "method", method: "onSessionAuthenticateResponse", topic: e, payload: t }), isJsonRpcResult(t) ? this.events.emit(xi("session_request", s), { result: t.result }) : isJsonRpcError(t) && this.events.emit(xi("session_request", s), { error: t.error });
    }), c2(this, "onSessionAuthenticateRequest", async (e) => {
      var t;
      const { topic: s, payload: i3, attestation: r2, encryptedId: o2, transportType: a2 } = e;
      try {
        const { requester: l4, authPayload: p4, expiryTimestamp: h5 } = i3.params, u3 = await this.getVerifyContext({ attestationId: r2, hash: kc(JSON.stringify(i3)), encryptedId: o2, metadata: l4.metadata, transportType: a2 }), d4 = { requester: l4, pairingTopic: s, id: i3.id, authPayload: p4, verifyContext: u3, expiryTimestamp: h5 };
        await this.setAuthRequest(i3.id, { request: d4, pairingTopic: s, transportType: a2 }), a2 === Q2.link_mode && (t = l4.metadata.redirect) != null && t.universal && this.client.core.addLinkModeSupportedApp(l4.metadata.redirect.universal), this.client.events.emit("session_authenticate", { topic: s, params: i3.params, id: i3.id, verifyContext: u3 });
      } catch (l4) {
        this.client.logger.error(l4);
        const p4 = i3.params.requester.publicKey, h5 = await this.client.core.crypto.generateKeyPair(), u3 = this.getAppLinkIfEnabled(i3.params.requester.metadata, a2), d4 = { type: Ft2, receiverPublicKey: p4, senderPublicKey: h5 };
        await this.sendError({ id: i3.id, topic: s, error: l4, encodeOpts: d4, rpcOpts: N2.wc_sessionAuthenticate.autoReject, appLink: u3 });
      }
    }), c2(this, "addSessionRequestToSessionRequestQueue", (e) => {
      this.sessionRequestQueue.queue.push(e);
    }), c2(this, "cleanupAfterResponse", (e) => {
      this.deletePendingSessionRequest(e.response.id, { message: "fulfilled", code: 0 }), setTimeout(() => {
        this.sessionRequestQueue.state = $2.idle, this.processSessionRequestQueue();
      }, (0, import_time4.toMiliseconds)(this.requestQueueDelay));
    }), c2(this, "cleanupPendingSentRequestsForTopic", ({ topic: e, error: t }) => {
      const s = this.client.core.history.pending;
      s.length > 0 && s.filter((i3) => i3.topic === e && i3.request.method === "wc_sessionRequest").forEach((i3) => {
        const r2 = i3.request.id, o2 = xi("session_request", r2);
        if (this.events.listenerCount(o2) === 0) throw new Error(`emitting ${o2} without any listeners`);
        this.events.emit(xi("session_request", i3.request.id), { error: t });
      });
    }), c2(this, "processSessionRequestQueue", () => {
      if (this.sessionRequestQueue.state === $2.active) {
        this.client.logger.info("session request queue is already active.");
        return;
      }
      const e = this.sessionRequestQueue.queue[0];
      if (!e) {
        this.client.logger.info("session request queue is empty.");
        return;
      }
      try {
        this.sessionRequestQueue.state = $2.active, this.emitSessionRequest(e);
      } catch (t) {
        this.client.logger.error(t);
      }
    }), c2(this, "emitSessionRequest", (e) => {
      this.client.events.emit("session_request", e);
    }), c2(this, "onPairingCreated", (e) => {
      if (e.methods && this.expectedPairingMethodMap.set(e.topic, e.methods), e.active) return;
      const t = this.client.proposal.getAll().find((s) => s.pairingTopic === e.topic);
      t && this.onSessionProposeRequest({ topic: e.topic, payload: formatJsonRpcRequest("wc_sessionPropose", b3(v4({}, t), { requiredNamespaces: t.requiredNamespaces, optionalNamespaces: t.optionalNamespaces, relays: t.relays, proposer: t.proposer, sessionProperties: t.sessionProperties, scopedProperties: t.scopedProperties }), t.id) });
    }), c2(this, "isValidConnect", async (e) => {
      if (!ma(e)) {
        const { message: l4 } = ht2("MISSING_OR_INVALID", `connect() params: ${JSON.stringify(e)}`);
        throw new Error(l4);
      }
      const { pairingTopic: t, requiredNamespaces: s, optionalNamespaces: i3, sessionProperties: r2, scopedProperties: o2, relays: a2 } = e;
      if (Et2(t) || await this.isValidPairingTopic(t), !ga(a2, true)) {
        const { message: l4 } = ht2("MISSING_OR_INVALID", `connect() relays: ${a2}`);
        throw new Error(l4);
      }
      if (!Et2(s) && Oe2(s) !== 0) {
        const l4 = "requiredNamespaces are deprecated and are automatically assigned to optionalNamespaces";
        ["fatal", "error", "silent"].includes(this.client.logger.level) ? console.warn(l4) : this.client.logger.warn(l4), this.validateNamespaces(s, "requiredNamespaces");
      }
      if (!Et2(i3) && Oe2(i3) !== 0 && this.validateNamespaces(i3, "optionalNamespaces"), Et2(r2) || this.validateSessionProps(r2, "sessionProperties"), !Et2(o2)) {
        this.validateSessionProps(o2, "scopedProperties");
        const l4 = Object.keys(s || {}).concat(Object.keys(i3 || {}));
        if (!Object.keys(o2).every((p4) => l4.includes(p4))) throw new Error(`Scoped properties must be a subset of required/optional namespaces, received: ${JSON.stringify(o2)}, required/optional namespaces: ${JSON.stringify(l4)}`);
      }
    }), c2(this, "validateNamespaces", (e, t) => {
      const s = pa(e, "connect()", t);
      if (s) throw new Error(s.message);
    }), c2(this, "isValidApprove", async (e) => {
      if (!ma(e)) throw new Error(ht2("MISSING_OR_INVALID", `approve() params: ${e}`).message);
      const { id: t, namespaces: s, relayProtocol: i3, sessionProperties: r2, scopedProperties: o2 } = e;
      this.checkRecentlyDeleted(t), await this.isValidProposalId(t);
      const a2 = this.client.proposal.get(t), l4 = Bo2(s, "approve()");
      if (l4) throw new Error(l4.message);
      const p4 = No2(a2.requiredNamespaces, s, "approve()");
      if (p4) throw new Error(p4.message);
      if (!nt2(i3, true)) {
        const { message: h5 } = ht2("MISSING_OR_INVALID", `approve() relayProtocol: ${i3}`);
        throw new Error(h5);
      }
      if (Et2(r2) || this.validateSessionProps(r2, "sessionProperties"), !Et2(o2)) {
        this.validateSessionProps(o2, "scopedProperties");
        const h5 = new Set(Object.keys(s));
        if (!Object.keys(o2).every((u3) => h5.has(u3))) throw new Error(`Scoped properties must be a subset of approved namespaces, received: ${JSON.stringify(o2)}, approved namespaces: ${Array.from(h5).join(", ")}`);
      }
    }), c2(this, "isValidReject", async (e) => {
      if (!ma(e)) {
        const { message: i3 } = ht2("MISSING_OR_INVALID", `reject() params: ${e}`);
        throw new Error(i3);
      }
      const { id: t, reason: s } = e;
      if (this.checkRecentlyDeleted(t), await this.isValidProposalId(t), !wa(s)) {
        const { message: i3 } = ht2("MISSING_OR_INVALID", `reject() reason: ${JSON.stringify(s)}`);
        throw new Error(i3);
      }
    }), c2(this, "isValidSessionSettleRequest", (e) => {
      if (!ma(e)) {
        const { message: l4 } = ht2("MISSING_OR_INVALID", `onSessionSettleRequest() params: ${e}`);
        throw new Error(l4);
      }
      const { relay: t, controller: s, namespaces: i3, expiry: r2 } = e;
      if (!Io2(t)) {
        const { message: l4 } = ht2("MISSING_OR_INVALID", "onSessionSettleRequest() relay protocol should be a string");
        throw new Error(l4);
      }
      const o2 = ha(s, "onSessionSettleRequest()");
      if (o2) throw new Error(o2.message);
      const a2 = Bo2(i3, "onSessionSettleRequest()");
      if (a2) throw new Error(a2.message);
      if (vi(r2)) {
        const { message: l4 } = ht2("EXPIRED", "onSessionSettleRequest()");
        throw new Error(l4);
      }
    }), c2(this, "isValidUpdate", async (e) => {
      if (!ma(e)) {
        const { message: a2 } = ht2("MISSING_OR_INVALID", `update() params: ${e}`);
        throw new Error(a2);
      }
      const { topic: t, namespaces: s } = e;
      this.checkRecentlyDeleted(t), await this.isValidSessionTopic(t);
      const i3 = this.client.session.get(t), r2 = Bo2(s, "update()");
      if (r2) throw new Error(r2.message);
      const o2 = No2(i3.requiredNamespaces, s, "update()");
      if (o2) throw new Error(o2.message);
    }), c2(this, "isValidExtend", async (e) => {
      if (!ma(e)) {
        const { message: s } = ht2("MISSING_OR_INVALID", `extend() params: ${e}`);
        throw new Error(s);
      }
      const { topic: t } = e;
      this.checkRecentlyDeleted(t), await this.isValidSessionTopic(t);
    }), c2(this, "isValidRequest", async (e) => {
      if (!ma(e)) {
        const { message: a2 } = ht2("MISSING_OR_INVALID", `request() params: ${e}`);
        throw new Error(a2);
      }
      const { topic: t, request: s, chainId: i3, expiry: r2 } = e;
      this.checkRecentlyDeleted(t), await this.isValidSessionTopic(t);
      const { namespaces: o2 } = this.client.session.get(t);
      if (!xa(o2, i3)) {
        const { message: a2 } = ht2("MISSING_OR_INVALID", `request() chainId: ${i3}`);
        throw new Error(a2);
      }
      if (!ba(s)) {
        const { message: a2 } = ht2("MISSING_OR_INVALID", `request() ${JSON.stringify(s)}`);
        throw new Error(a2);
      }
      if (!Sa(o2, i3, s.method)) {
        const { message: a2 } = ht2("MISSING_OR_INVALID", `request() method: ${s.method}`);
        throw new Error(a2);
      }
      if (r2 && !Ia(r2, _e4)) {
        const { message: a2 } = ht2("MISSING_OR_INVALID", `request() expiry: ${r2}. Expiry must be a number (in seconds) between ${_e4.min} and ${_e4.max}`);
        throw new Error(a2);
      }
    }), c2(this, "isValidRespond", async (e) => {
      var t;
      if (!ma(e)) {
        const { message: r2 } = ht2("MISSING_OR_INVALID", `respond() params: ${e}`);
        throw new Error(r2);
      }
      const { topic: s, response: i3 } = e;
      try {
        await this.isValidSessionTopic(s);
      } catch (r2) {
        throw (t = e?.response) != null && t.id && this.cleanupAfterResponse(e), r2;
      }
      if (!Ea(i3)) {
        const { message: r2 } = ht2("MISSING_OR_INVALID", `respond() response: ${JSON.stringify(i3)}`);
        throw new Error(r2);
      }
    }), c2(this, "isValidPing", async (e) => {
      if (!ma(e)) {
        const { message: s } = ht2("MISSING_OR_INVALID", `ping() params: ${e}`);
        throw new Error(s);
      }
      const { topic: t } = e;
      await this.isValidSessionOrPairingTopic(t);
    }), c2(this, "isValidEmit", async (e) => {
      if (!ma(e)) {
        const { message: o2 } = ht2("MISSING_OR_INVALID", `emit() params: ${e}`);
        throw new Error(o2);
      }
      const { topic: t, event: s, chainId: i3 } = e;
      await this.isValidSessionTopic(t);
      const { namespaces: r2 } = this.client.session.get(t);
      if (!xa(r2, i3)) {
        const { message: o2 } = ht2("MISSING_OR_INVALID", `emit() chainId: ${i3}`);
        throw new Error(o2);
      }
      if (!va(s)) {
        const { message: o2 } = ht2("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s)}`);
        throw new Error(o2);
      }
      if (!Oa(r2, i3, s.name)) {
        const { message: o2 } = ht2("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s)}`);
        throw new Error(o2);
      }
    }), c2(this, "isValidDisconnect", async (e) => {
      if (!ma(e)) {
        const { message: s } = ht2("MISSING_OR_INVALID", `disconnect() params: ${e}`);
        throw new Error(s);
      }
      const { topic: t } = e;
      await this.isValidSessionOrPairingTopic(t);
    }), c2(this, "isValidAuthenticate", (e) => {
      const { chains: t, uri: s, domain: i3, nonce: r2 } = e;
      if (!Array.isArray(t) || t.length === 0) throw new Error("chains is required and must be a non-empty array");
      if (!nt2(s, false)) throw new Error("uri is required parameter");
      if (!nt2(i3, false)) throw new Error("domain is required parameter");
      if (!nt2(r2, false)) throw new Error("nonce is required parameter");
      if ([...new Set(t.map((a2) => Ne2(a2).namespace))].length > 1) throw new Error("Multi-namespace requests are not supported. Please request single namespace only.");
      const { namespace: o2 } = Ne2(t[0]);
      if (o2 !== "eip155") throw new Error("Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.");
    }), c2(this, "getVerifyContext", async (e) => {
      const { attestationId: t, hash: s, encryptedId: i3, metadata: r2, transportType: o2 } = e, a2 = { verified: { verifyUrl: r2.verifyUrl || ue2, validation: "UNKNOWN", origin: r2.url || "" } };
      try {
        if (o2 === Q2.link_mode) {
          const p4 = this.getAppLinkIfEnabled(r2, o2);
          return a2.verified.validation = p4 && new URL(p4).origin === new URL(r2.url).origin ? "VALID" : "INVALID", a2;
        }
        const l4 = await this.client.core.verify.resolve({ attestationId: t, hash: s, encryptedId: i3, verifyUrl: r2.verifyUrl });
        l4 && (a2.verified.origin = l4.origin, a2.verified.isScam = l4.isScam, a2.verified.validation = l4.origin === new URL(r2.url).origin ? "VALID" : "INVALID");
      } catch (l4) {
        this.client.logger.warn(l4);
      }
      return this.client.logger.debug(`Verify context: ${JSON.stringify(a2)}`), a2;
    }), c2(this, "validateSessionProps", (e, t) => {
      Object.values(e).forEach((s, i3) => {
        if (s == null) {
          const { message: r2 } = ht2("MISSING_OR_INVALID", `${t} must contain an existing value for each key. Received: ${s} for key ${Object.keys(e)[i3]}`);
          throw new Error(r2);
        }
      });
    }), c2(this, "getPendingAuthRequest", (e) => {
      const t = this.client.auth.requests.get(e);
      return typeof t == "object" ? t : void 0;
    }), c2(this, "addToRecentlyDeleted", (e, t) => {
      if (this.recentlyDeletedMap.set(e, t), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {
        let s = 0;
        const i3 = this.recentlyDeletedLimit / 2;
        for (const r2 of this.recentlyDeletedMap.keys()) {
          if (s++ >= i3) break;
          this.recentlyDeletedMap.delete(r2);
        }
      }
    }), c2(this, "checkRecentlyDeleted", (e) => {
      const t = this.recentlyDeletedMap.get(e);
      if (t) {
        const { message: s } = ht2("MISSING_OR_INVALID", `Record was recently deleted - ${t}: ${e}`);
        throw new Error(s);
      }
    }), c2(this, "isLinkModeEnabled", (e, t) => {
      var s, i3, r2, o2, a2, l4, p4, h5, u3;
      return !e || t !== Q2.link_mode ? false : ((i3 = (s = this.client.metadata) == null ? void 0 : s.redirect) == null ? void 0 : i3.linkMode) === true && ((o2 = (r2 = this.client.metadata) == null ? void 0 : r2.redirect) == null ? void 0 : o2.universal) !== void 0 && ((l4 = (a2 = this.client.metadata) == null ? void 0 : a2.redirect) == null ? void 0 : l4.universal) !== "" && ((p4 = e?.redirect) == null ? void 0 : p4.universal) !== void 0 && ((h5 = e?.redirect) == null ? void 0 : h5.universal) !== "" && ((u3 = e?.redirect) == null ? void 0 : u3.linkMode) === true && this.client.core.linkModeSupportedApps.includes(e.redirect.universal) && typeof (global == null ? void 0 : global.Linking) < "u";
    }), c2(this, "getAppLinkIfEnabled", (e, t) => {
      var s;
      return this.isLinkModeEnabled(e, t) ? (s = e?.redirect) == null ? void 0 : s.universal : void 0;
    }), c2(this, "handleLinkModeMessage", ({ url: e }) => {
      if (!e || !e.includes("wc_ev") || !e.includes("topic")) return;
      const t = Ai(e, "topic") || "", s = decodeURIComponent(Ai(e, "wc_ev") || ""), i3 = this.client.session.keys.includes(t);
      i3 && this.client.session.update(t, { transportType: Q2.link_mode }), this.client.core.dispatchEnvelope({ topic: t, message: s, sessionExists: i3 });
    }), c2(this, "registerLinkModeListeners", async () => {
      var e;
      if (Ii() || pt() && (e = this.client.metadata.redirect) != null && e.linkMode) {
        const t = global == null ? void 0 : global.Linking;
        if (typeof t < "u") {
          t.addEventListener("url", this.handleLinkModeMessage, this.client.name);
          const s = await t.getInitialURL();
          s && setTimeout(() => {
            this.handleLinkModeMessage({ url: s });
          }, 50);
        }
      }
    }), c2(this, "shouldSetTVF", (e, t) => {
      if (!t || e !== "wc_sessionRequest") return false;
      const { request: s } = t;
      return Object.keys(Ke4).includes(s.method);
    }), c2(this, "getTVFParams", (e, t, s) => {
      var i3, r2;
      try {
        const o2 = t.request.method, a2 = this.extractTxHashesFromResult(o2, s);
        return b3(v4({ correlationId: e, rpcMethods: [o2], chainId: t.chainId }, this.isValidContractData(t.request.params) && { contractAddresses: [(r2 = (i3 = t.request.params) == null ? void 0 : i3[0]) == null ? void 0 : r2.to] }), { txHashes: a2 });
      } catch (o2) {
        this.client.logger.warn("Error getting TVF params", o2);
      }
      return {};
    }), c2(this, "isValidContractData", (e) => {
      var t;
      if (!e) return false;
      try {
        const s = e?.data || ((t = e?.[0]) == null ? void 0 : t.data);
        if (!s.startsWith("0x")) return false;
        const i3 = s.slice(2);
        return /^[0-9a-fA-F]*$/.test(i3) ? i3.length % 2 === 0 : false;
      } catch {
      }
      return false;
    }), c2(this, "extractTxHashesFromResult", (e, t) => {
      try {
        const s = Ke4[e];
        if (typeof t == "string") return [t];
        const i3 = t[s.key];
        if (se(i3)) return e === "solana_signAllTransactions" ? i3.map((r2) => Ji(r2)) : i3;
        if (typeof i3 == "string") return [i3];
      } catch (s) {
        this.client.logger.warn("Error extracting tx hashes from result", s);
      }
      return [];
    });
  }
  async processPendingMessageEvents() {
    try {
      const n2 = this.client.session.keys, e = this.client.core.relayer.messages.getWithoutAck(n2);
      for (const [t, s] of Object.entries(e)) for (const i3 of s) try {
        await this.onProviderMessageEvent({ topic: t, message: i3, publishedAt: Date.now() });
      } catch {
        this.client.logger.warn(`Error processing pending message event for topic: ${t}, message: ${i3}`);
      }
    } catch (n2) {
      this.client.logger.warn("processPendingMessageEvents failed", n2);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: n2 } = ht2("NOT_INITIALIZED", this.name);
      throw new Error(n2);
    }
  }
  async confirmOnlineStateOrThrow() {
    await this.client.core.relayer.confirmOnlineStateOrThrow();
  }
  registerRelayerEvents() {
    this.client.core.relayer.on(C2.message, (n2) => {
      this.onProviderMessageEvent(n2);
    });
  }
  async onRelayMessage(n2) {
    const { topic: e, message: t, attestation: s, transportType: i3 } = n2, { publicKey: r2 } = this.client.auth.authKeys.keys.includes(ce2) ? this.client.auth.authKeys.get(ce2) : { responseTopic: void 0, publicKey: void 0 };
    try {
      const o2 = await this.client.core.crypto.decode(e, t, { receiverPublicKey: r2, encoding: i3 === Q2.link_mode ? xe2 : qt2 });
      isJsonRpcRequest(o2) ? (this.client.core.history.set(e, o2), await this.onRelayEventRequest({ topic: e, payload: o2, attestation: s, transportType: i3, encryptedId: kc(t) })) : isJsonRpcResponse(o2) ? (await this.client.core.history.resolve(o2), await this.onRelayEventResponse({ topic: e, payload: o2, transportType: i3 }), this.client.core.history.delete(e, o2.id)) : await this.onRelayEventUnknownPayload({ topic: e, payload: o2, transportType: i3 }), await this.client.core.relayer.messages.ack(e, t);
    } catch (o2) {
      this.client.logger.error(o2);
    }
  }
  registerExpirerEvents() {
    this.client.core.expirer.on(M3.expired, async (n2) => {
      const { topic: e, id: t } = bi(n2.target);
      if (t && this.client.pendingRequest.keys.includes(t)) return await this.deletePendingSessionRequest(t, ht2("EXPIRED"), true);
      if (t && this.client.auth.requests.keys.includes(t)) return await this.deletePendingAuthRequest(t, ht2("EXPIRED"), true);
      e ? this.client.session.keys.includes(e) && (await this.deleteSession({ topic: e, expirerHasDeleted: true }), this.client.events.emit("session_expire", { topic: e })) : t && (await this.deleteProposal(t, true), this.client.events.emit("proposal_expire", { id: t }));
    });
  }
  registerPairingEvents() {
    this.client.core.pairing.events.on(re2.create, (n2) => this.onPairingCreated(n2)), this.client.core.pairing.events.on(re2.delete, (n2) => {
      this.addToRecentlyDeleted(n2.topic, "pairing");
    });
  }
  isValidPairingTopic(n2) {
    if (!nt2(n2, false)) {
      const { message: e } = ht2("MISSING_OR_INVALID", `pairing topic should be a string: ${n2}`);
      throw new Error(e);
    }
    if (!this.client.core.pairing.pairings.keys.includes(n2)) {
      const { message: e } = ht2("NO_MATCHING_KEY", `pairing topic doesn't exist: ${n2}`);
      throw new Error(e);
    }
    if (vi(this.client.core.pairing.pairings.get(n2).expiry)) {
      const { message: e } = ht2("EXPIRED", `pairing topic: ${n2}`);
      throw new Error(e);
    }
  }
  async isValidSessionTopic(n2) {
    if (!nt2(n2, false)) {
      const { message: e } = ht2("MISSING_OR_INVALID", `session topic should be a string: ${n2}`);
      throw new Error(e);
    }
    if (this.checkRecentlyDeleted(n2), !this.client.session.keys.includes(n2)) {
      const { message: e } = ht2("NO_MATCHING_KEY", `session topic doesn't exist: ${n2}`);
      throw new Error(e);
    }
    if (vi(this.client.session.get(n2).expiry)) {
      await this.deleteSession({ topic: n2 });
      const { message: e } = ht2("EXPIRED", `session topic: ${n2}`);
      throw new Error(e);
    }
    if (!this.client.core.crypto.keychain.has(n2)) {
      const { message: e } = ht2("MISSING_OR_INVALID", `session topic does not exist in keychain: ${n2}`);
      throw await this.deleteSession({ topic: n2 }), new Error(e);
    }
  }
  async isValidSessionOrPairingTopic(n2) {
    if (this.checkRecentlyDeleted(n2), this.client.session.keys.includes(n2)) await this.isValidSessionTopic(n2);
    else if (this.client.core.pairing.pairings.keys.includes(n2)) this.isValidPairingTopic(n2);
    else if (nt2(n2, false)) {
      const { message: e } = ht2("NO_MATCHING_KEY", `session or pairing topic doesn't exist: ${n2}`);
      throw new Error(e);
    } else {
      const { message: e } = ht2("MISSING_OR_INVALID", `session or pairing topic should be a string: ${n2}`);
      throw new Error(e);
    }
  }
  async isValidProposalId(n2) {
    if (!ya(n2)) {
      const { message: e } = ht2("MISSING_OR_INVALID", `proposal id should be a number: ${n2}`);
      throw new Error(e);
    }
    if (!this.client.proposal.keys.includes(n2)) {
      const { message: e } = ht2("NO_MATCHING_KEY", `proposal id doesn't exist: ${n2}`);
      throw new Error(e);
    }
    if (vi(this.client.proposal.get(n2).expiryTimestamp)) {
      await this.deleteProposal(n2);
      const { message: e } = ht2("EXPIRED", `proposal id: ${n2}`);
      throw new Error(e);
    }
  }
};
var Os2 = class extends zi2 {
  constructor(n2, e) {
    super(n2, e, pt2, we3), this.core = n2, this.logger = e;
  }
};
var St4 = class extends zi2 {
  constructor(n2, e) {
    super(n2, e, ht3, we3), this.core = n2, this.logger = e;
  }
};
var bs2 = class extends zi2 {
  constructor(n2, e) {
    super(n2, e, ut3, we3, (t) => t.id), this.core = n2, this.logger = e;
  }
};
var As2 = class extends zi2 {
  constructor(n2, e) {
    super(n2, e, mt2, ae2, () => ce2), this.core = n2, this.logger = e;
  }
};
var xs2 = class extends zi2 {
  constructor(n2, e) {
    super(n2, e, _t3, ae2), this.core = n2, this.logger = e;
  }
};
var Cs2 = class extends zi2 {
  constructor(n2, e) {
    super(n2, e, Et4, ae2, (t) => t.id), this.core = n2, this.logger = e;
  }
};
var Vs2 = Object.defineProperty;
var Ds2 = (S5, n2, e) => n2 in S5 ? Vs2(S5, n2, { enumerable: true, configurable: true, writable: true, value: e }) : S5[n2] = e;
var Ge4 = (S5, n2, e) => Ds2(S5, typeof n2 != "symbol" ? n2 + "" : n2, e);
var Ls2 = class {
  constructor(n2, e) {
    this.core = n2, this.logger = e, Ge4(this, "authKeys"), Ge4(this, "pairingTopics"), Ge4(this, "requests"), this.authKeys = new As2(this.core, this.logger), this.pairingTopics = new xs2(this.core, this.logger), this.requests = new Cs2(this.core, this.logger);
  }
  async init() {
    await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();
  }
};
var ks2 = Object.defineProperty;
var Ms2 = (S5, n2, e) => n2 in S5 ? ks2(S5, n2, { enumerable: true, configurable: true, writable: true, value: e }) : S5[n2] = e;
var E3 = (S5, n2, e) => Ms2(S5, typeof n2 != "symbol" ? n2 + "" : n2, e);
var Ee4 = class _Ee extends J2 {
  constructor(n2) {
    super(n2), E3(this, "protocol", De3), E3(this, "version", Le3), E3(this, "name", me3.name), E3(this, "metadata"), E3(this, "core"), E3(this, "logger"), E3(this, "events", new import_events5.EventEmitter()), E3(this, "engine"), E3(this, "session"), E3(this, "proposal"), E3(this, "pendingRequest"), E3(this, "auth"), E3(this, "signConfig"), E3(this, "on", (t, s) => this.events.on(t, s)), E3(this, "once", (t, s) => this.events.once(t, s)), E3(this, "off", (t, s) => this.events.off(t, s)), E3(this, "removeListener", (t, s) => this.events.removeListener(t, s)), E3(this, "removeAllListeners", (t) => this.events.removeAllListeners(t)), E3(this, "connect", async (t) => {
      try {
        return await this.engine.connect(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "pair", async (t) => {
      try {
        return await this.engine.pair(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "approve", async (t) => {
      try {
        return await this.engine.approve(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "reject", async (t) => {
      try {
        return await this.engine.reject(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "update", async (t) => {
      try {
        return await this.engine.update(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "extend", async (t) => {
      try {
        return await this.engine.extend(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "request", async (t) => {
      try {
        return await this.engine.request(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "respond", async (t) => {
      try {
        return await this.engine.respond(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "ping", async (t) => {
      try {
        return await this.engine.ping(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "emit", async (t) => {
      try {
        return await this.engine.emit(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "disconnect", async (t) => {
      try {
        return await this.engine.disconnect(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "find", (t) => {
      try {
        return this.engine.find(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "getPendingSessionRequests", () => {
      try {
        return this.engine.getPendingSessionRequests();
      } catch (t) {
        throw this.logger.error(t.message), t;
      }
    }), E3(this, "authenticate", async (t, s) => {
      try {
        return await this.engine.authenticate(t, s);
      } catch (i3) {
        throw this.logger.error(i3.message), i3;
      }
    }), E3(this, "formatAuthMessage", (t) => {
      try {
        return this.engine.formatAuthMessage(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "approveSessionAuthenticate", async (t) => {
      try {
        return await this.engine.approveSessionAuthenticate(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "rejectSessionAuthenticate", async (t) => {
      try {
        return await this.engine.rejectSessionAuthenticate(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), this.name = n2?.name || me3.name, this.metadata = oi(n2?.metadata), this.signConfig = n2?.signConfig;
    const e = typeof n2?.logger < "u" && typeof n2?.logger != "string" ? n2.logger : (0, import_pino.default)(k({ level: n2?.logger || me3.logger }));
    this.core = n2?.core || new Xo2(n2), this.logger = E(e, this.name), this.session = new St4(this.core, this.logger), this.proposal = new Os2(this.core, this.logger), this.pendingRequest = new bs2(this.core, this.logger), this.engine = new Ns2(this), this.auth = new Ls2(this.core, this.logger);
  }
  static async init(n2) {
    const e = new _Ee(n2);
    return await e.initialize(), e;
  }
  get context() {
    return y(this.logger);
  }
  get pairing() {
    return this.core.pairing.pairings;
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.auth.init(), await this.engine.init(), this.logger.info("SignClient Initialization Success"), setTimeout(() => {
        this.engine.processRelayMessageCache();
      }, (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND));
    } catch (n2) {
      throw this.logger.info("SignClient Initialization Failure"), this.logger.error(n2.message), n2;
    }
  }
};

// node_modules/@wagmi/connectors/node_modules/@walletconnect/universal-provider/dist/index.es.js
var import_events6 = __toESM(require_events());
var et2 = "error";
var St5 = "wss://relay.walletconnect.org";
var Dt3 = "wc";
var qt4 = "universal_provider";
var U3 = `${Dt3}@2:${qt4}:`;
var st = "https://rpc.walletconnect.org/v1/";
var I2 = "generic";
var jt4 = `${st}bundler`;
var u2 = { DEFAULT_CHAIN_CHANGED: "default_chain_changed" };
function Rt4() {
}
function k5(s) {
  return s == null || typeof s != "object" && typeof s != "function";
}
function W3(s) {
  return ArrayBuffer.isView(s) && !(s instanceof DataView);
}
function _t4(s) {
  if (k5(s)) return s;
  if (Array.isArray(s) || W3(s) || s instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && s instanceof SharedArrayBuffer) return s.slice(0);
  const t = Object.getPrototypeOf(s), e = t.constructor;
  if (s instanceof Date || s instanceof Map || s instanceof Set) return new e(s);
  if (s instanceof RegExp) {
    const i3 = new e(s);
    return i3.lastIndex = s.lastIndex, i3;
  }
  if (s instanceof DataView) return new e(s.buffer.slice(0));
  if (s instanceof Error) {
    const i3 = new e(s.message);
    return i3.stack = s.stack, i3.name = s.name, i3.cause = s.cause, i3;
  }
  if (typeof File < "u" && s instanceof File) return new e([s], s.name, { type: s.type, lastModified: s.lastModified });
  if (typeof s == "object") {
    const i3 = Object.create(t);
    return Object.assign(i3, s);
  }
  return s;
}
function it4(s) {
  return typeof s == "object" && s !== null;
}
function rt2(s) {
  return Object.getOwnPropertySymbols(s).filter((t) => Object.prototype.propertyIsEnumerable.call(s, t));
}
function nt3(s) {
  return s == null ? s === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(s);
}
var Ut3 = "[object RegExp]";
var at2 = "[object String]";
var ct3 = "[object Number]";
var ot2 = "[object Boolean]";
var ht4 = "[object Arguments]";
var Ft4 = "[object Symbol]";
var Lt4 = "[object Date]";
var Mt4 = "[object Map]";
var xt4 = "[object Set]";
var Bt4 = "[object Array]";
var Gt3 = "[object ArrayBuffer]";
var Jt4 = "[object Object]";
var zt3 = "[object DataView]";
var kt5 = "[object Uint8Array]";
var Wt4 = "[object Uint8ClampedArray]";
var Kt4 = "[object Uint16Array]";
var Vt4 = "[object Uint32Array]";
var Xt4 = "[object Int8Array]";
var Yt4 = "[object Int16Array]";
var Qt4 = "[object Int32Array]";
var Zt3 = "[object Float32Array]";
var Tt4 = "[object Float64Array]";
function te3(s, t) {
  return $3(s, void 0, s, /* @__PURE__ */ new Map(), t);
}
function $3(s, t, e, i3 = /* @__PURE__ */ new Map(), n2 = void 0) {
  const a2 = n2?.(s, t, e, i3);
  if (a2 != null) return a2;
  if (k5(s)) return s;
  if (i3.has(s)) return i3.get(s);
  if (Array.isArray(s)) {
    const r2 = new Array(s.length);
    i3.set(s, r2);
    for (let c3 = 0; c3 < s.length; c3++) r2[c3] = $3(s[c3], c3, e, i3, n2);
    return Object.hasOwn(s, "index") && (r2.index = s.index), Object.hasOwn(s, "input") && (r2.input = s.input), r2;
  }
  if (s instanceof Date) return new Date(s.getTime());
  if (s instanceof RegExp) {
    const r2 = new RegExp(s.source, s.flags);
    return r2.lastIndex = s.lastIndex, r2;
  }
  if (s instanceof Map) {
    const r2 = /* @__PURE__ */ new Map();
    i3.set(s, r2);
    for (const [c3, o2] of s) r2.set(c3, $3(o2, c3, e, i3, n2));
    return r2;
  }
  if (s instanceof Set) {
    const r2 = /* @__PURE__ */ new Set();
    i3.set(s, r2);
    for (const c3 of s) r2.add($3(c3, void 0, e, i3, n2));
    return r2;
  }
  if (typeof Buffer < "u" && Buffer.isBuffer(s)) return s.subarray();
  if (W3(s)) {
    const r2 = new (Object.getPrototypeOf(s)).constructor(s.length);
    i3.set(s, r2);
    for (let c3 = 0; c3 < s.length; c3++) r2[c3] = $3(s[c3], c3, e, i3, n2);
    return r2;
  }
  if (s instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && s instanceof SharedArrayBuffer) return s.slice(0);
  if (s instanceof DataView) {
    const r2 = new DataView(s.buffer.slice(0), s.byteOffset, s.byteLength);
    return i3.set(s, r2), y4(r2, s, e, i3, n2), r2;
  }
  if (typeof File < "u" && s instanceof File) {
    const r2 = new File([s], s.name, { type: s.type });
    return i3.set(s, r2), y4(r2, s, e, i3, n2), r2;
  }
  if (s instanceof Blob) {
    const r2 = new Blob([s], { type: s.type });
    return i3.set(s, r2), y4(r2, s, e, i3, n2), r2;
  }
  if (s instanceof Error) {
    const r2 = new s.constructor();
    return i3.set(s, r2), r2.message = s.message, r2.name = s.name, r2.stack = s.stack, r2.cause = s.cause, y4(r2, s, e, i3, n2), r2;
  }
  if (typeof s == "object" && ee3(s)) {
    const r2 = Object.create(Object.getPrototypeOf(s));
    return i3.set(s, r2), y4(r2, s, e, i3, n2), r2;
  }
  return s;
}
function y4(s, t, e = s, i3, n2) {
  const a2 = [...Object.keys(t), ...rt2(t)];
  for (let r2 = 0; r2 < a2.length; r2++) {
    const c3 = a2[r2], o2 = Object.getOwnPropertyDescriptor(s, c3);
    (o2 == null || o2.writable) && (s[c3] = $3(t[c3], c3, e, i3, n2));
  }
}
function ee3(s) {
  switch (nt3(s)) {
    case ht4:
    case Bt4:
    case Gt3:
    case zt3:
    case ot2:
    case Lt4:
    case Zt3:
    case Tt4:
    case Xt4:
    case Yt4:
    case Qt4:
    case Mt4:
    case ct3:
    case Jt4:
    case Ut3:
    case xt4:
    case at2:
    case Ft4:
    case kt5:
    case Wt4:
    case Kt4:
    case Vt4:
      return true;
    default:
      return false;
  }
}
function se3(s, t) {
  return te3(s, (e, i3, n2, a2) => {
    const r2 = t?.(e, i3, n2, a2);
    if (r2 != null) return r2;
    if (typeof s == "object") switch (Object.prototype.toString.call(s)) {
      case ct3:
      case at2:
      case ot2: {
        const c3 = new s.constructor(s?.valueOf());
        return y4(c3, s), c3;
      }
      case ht4: {
        const c3 = {};
        return y4(c3, s), c3.length = s.length, c3[Symbol.iterator] = s[Symbol.iterator], c3;
      }
      default:
        return;
    }
  });
}
function pt3(s) {
  return se3(s);
}
function dt4(s) {
  return s !== null && typeof s == "object" && nt3(s) === "[object Arguments]";
}
function ie3(s) {
  return W3(s);
}
function re3(s) {
  if (typeof s != "object" || s == null) return false;
  if (Object.getPrototypeOf(s) === null) return true;
  if (Object.prototype.toString.call(s) !== "[object Object]") {
    const e = s[Symbol.toStringTag];
    return e == null || !Object.getOwnPropertyDescriptor(s, Symbol.toStringTag)?.writable ? false : s.toString() === `[object ${e}]`;
  }
  let t = s;
  for (; Object.getPrototypeOf(t) !== null; ) t = Object.getPrototypeOf(t);
  return Object.getPrototypeOf(s) === t;
}
function ne3(s, ...t) {
  const e = t.slice(0, -1), i3 = t[t.length - 1];
  let n2 = s;
  for (let a2 = 0; a2 < e.length; a2++) {
    const r2 = e[a2];
    n2 = F3(n2, r2, i3, /* @__PURE__ */ new Map());
  }
  return n2;
}
function F3(s, t, e, i3) {
  if (k5(s) && (s = Object(s)), t == null || typeof t != "object") return s;
  if (i3.has(t)) return _t4(i3.get(t));
  if (i3.set(t, s), Array.isArray(t)) {
    t = t.slice();
    for (let a2 = 0; a2 < t.length; a2++) t[a2] = t[a2] ?? void 0;
  }
  const n2 = [...Object.keys(t), ...rt2(t)];
  for (let a2 = 0; a2 < n2.length; a2++) {
    const r2 = n2[a2];
    let c3 = t[r2], o2 = s[r2];
    if (dt4(c3) && (c3 = { ...c3 }), dt4(o2) && (o2 = { ...o2 }), typeof Buffer < "u" && Buffer.isBuffer(c3) && (c3 = pt3(c3)), Array.isArray(c3)) if (typeof o2 == "object" && o2 != null) {
      const w4 = [], v6 = Reflect.ownKeys(o2);
      for (let P5 = 0; P5 < v6.length; P5++) {
        const p4 = v6[P5];
        w4[p4] = o2[p4];
      }
      o2 = w4;
    } else o2 = [];
    const m2 = e(o2, c3, r2, s, t, i3);
    m2 != null ? s[r2] = m2 : Array.isArray(c3) || it4(o2) && it4(c3) ? s[r2] = F3(o2, c3, e, i3) : o2 == null && re3(c3) ? s[r2] = F3({}, c3, e, i3) : o2 == null && ie3(c3) ? s[r2] = pt3(c3) : (o2 === void 0 || c3 !== void 0) && (s[r2] = c3);
  }
  return s;
}
function ae3(s, ...t) {
  return ne3(s, ...t, Rt4);
}
var ce3 = Object.defineProperty;
var oe2 = Object.defineProperties;
var he4 = Object.getOwnPropertyDescriptors;
var ut4 = Object.getOwnPropertySymbols;
var pe4 = Object.prototype.hasOwnProperty;
var de4 = Object.prototype.propertyIsEnumerable;
var lt3 = (s, t, e) => t in s ? ce3(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var L2 = (s, t) => {
  for (var e in t || (t = {})) pe4.call(t, e) && lt3(s, e, t[e]);
  if (ut4) for (var e of ut4(t)) de4.call(t, e) && lt3(s, e, t[e]);
  return s;
};
var ue3 = (s, t) => oe2(s, he4(t));
function d3(s, t, e) {
  var i3;
  const n2 = Ne2(s);
  return ((i3 = t.rpcMap) == null ? void 0 : i3[n2.reference]) || `${st}?chainId=${n2.namespace}:${n2.reference}&projectId=${e}`;
}
function b4(s) {
  return s.includes(":") ? s.split(":")[1] : s;
}
function ft4(s) {
  return s.map((t) => `${t.split(":")[0]}:${t.split(":")[1]}`);
}
function le4(s, t) {
  const e = Object.keys(t.namespaces).filter((n2) => n2.includes(s));
  if (!e.length) return [];
  const i3 = [];
  return e.forEach((n2) => {
    const a2 = t.namespaces[n2].accounts;
    i3.push(...a2);
  }), i3;
}
function M4(s = {}, t = {}) {
  const e = mt3(s), i3 = mt3(t);
  return ae3(e, i3);
}
function mt3(s) {
  var t, e, i3, n2, a2;
  const r2 = {};
  if (!Oe2(s)) return r2;
  for (const [c3, o2] of Object.entries(s)) {
    const m2 = yn2(c3) ? [c3] : o2.chains, w4 = o2.methods || [], v6 = o2.events || [], P5 = o2.rpcMap || {}, p4 = yo2(c3);
    r2[p4] = ue3(L2(L2({}, r2[p4]), o2), { chains: ot(m2, (t = r2[p4]) == null ? void 0 : t.chains), methods: ot(w4, (e = r2[p4]) == null ? void 0 : e.methods), events: ot(v6, (i3 = r2[p4]) == null ? void 0 : i3.events) }), (Oe2(P5) || Oe2(((n2 = r2[p4]) == null ? void 0 : n2.rpcMap) || {})) && (r2[p4].rpcMap = L2(L2({}, P5), (a2 = r2[p4]) == null ? void 0 : a2.rpcMap));
  }
  return r2;
}
function vt2(s) {
  return s.includes(":") ? s.split(":")[2] : s;
}
function gt4(s) {
  const t = {};
  for (const [e, i3] of Object.entries(s)) {
    const n2 = i3.methods || [], a2 = i3.events || [], r2 = i3.accounts || [], c3 = yn2(e) ? [e] : i3.chains ? i3.chains : ft4(i3.accounts);
    t[e] = { chains: c3, methods: n2, events: a2, accounts: r2 };
  }
  return t;
}
function K3(s) {
  return typeof s == "number" ? s : s.includes("0x") ? parseInt(s, 16) : (s = s.includes(":") ? s.split(":")[1] : s, isNaN(Number(s)) ? s : Number(s));
}
var Pt4 = {};
var h4 = (s) => Pt4[s];
var V4 = (s, t) => {
  Pt4[s] = t;
};
var fe3 = Object.defineProperty;
var me4 = (s, t, e) => t in s ? fe3(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var O3 = (s, t, e) => me4(s, typeof t != "symbol" ? t + "" : t, e);
var ve3 = class {
  constructor(t) {
    O3(this, "name", "polkadot"), O3(this, "client"), O3(this, "httpProviders"), O3(this, "events"), O3(this, "namespace"), O3(this, "chainId"), this.namespace = t.namespace, this.events = h4("events"), this.client = h4("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(u2.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      const n2 = b4(e);
      t[n2] = this.createHttpProvider(n2, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || d3(t, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f(i3, h4("disableProviderPing")));
  }
};
var ge4 = Object.defineProperty;
var Pe4 = Object.defineProperties;
var we4 = Object.getOwnPropertyDescriptors;
var wt4 = Object.getOwnPropertySymbols;
var ye4 = Object.prototype.hasOwnProperty;
var be4 = Object.prototype.propertyIsEnumerable;
var X2 = (s, t, e) => t in s ? ge4(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var yt4 = (s, t) => {
  for (var e in t || (t = {})) ye4.call(t, e) && X2(s, e, t[e]);
  if (wt4) for (var e of wt4(t)) be4.call(t, e) && X2(s, e, t[e]);
  return s;
};
var bt3 = (s, t) => Pe4(s, we4(t));
var A3 = (s, t, e) => X2(s, typeof t != "symbol" ? t + "" : t, e);
var Ie4 = class {
  constructor(t) {
    A3(this, "name", "eip155"), A3(this, "client"), A3(this, "chainId"), A3(this, "namespace"), A3(this, "httpProviders"), A3(this, "events"), this.namespace = t.namespace, this.events = h4("events"), this.client = h4("client"), this.httpProviders = this.createHttpProviders(), this.chainId = parseInt(this.getDefaultChain());
  }
  async request(t) {
    switch (t.request.method) {
      case "eth_requestAccounts":
        return this.getAccounts();
      case "eth_accounts":
        return this.getAccounts();
      case "wallet_switchEthereumChain":
        return await this.handleSwitchChain(t);
      case "eth_chainId":
        return parseInt(this.getDefaultChain());
      case "wallet_getCapabilities":
        return await this.getCapabilities(t);
      case "wallet_getCallsStatus":
        return await this.getCallStatus(t);
    }
    return this.namespace.methods.includes(t.request.method) ? await this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(parseInt(t), e), this.chainId = parseInt(t), this.events.emit(u2.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId.toString();
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  createHttpProvider(t, e) {
    const i3 = e || d3(`${this.name}:${t}`, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f(i3, h4("disableProviderPing")));
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      const n2 = parseInt(b4(e));
      t[n2] = this.createHttpProvider(n2, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  getHttpProvider() {
    const t = this.chainId, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  async handleSwitchChain(t) {
    var e, i3;
    let n2 = t.request.params ? (e = t.request.params[0]) == null ? void 0 : e.chainId : "0x0";
    n2 = n2.startsWith("0x") ? n2 : `0x${n2}`;
    const a2 = parseInt(n2, 16);
    if (this.isChainApproved(a2)) this.setDefaultChain(`${a2}`);
    else if (this.namespace.methods.includes("wallet_switchEthereumChain")) await this.client.request({ topic: t.topic, request: { method: t.request.method, params: [{ chainId: n2 }] }, chainId: (i3 = this.namespace.chains) == null ? void 0 : i3[0] }), this.setDefaultChain(`${a2}`);
    else throw new Error(`Failed to switch to chain 'eip155:${a2}'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.`);
    return null;
  }
  isChainApproved(t) {
    return this.namespace.chains.includes(`${this.name}:${t}`);
  }
  async getCapabilities(t) {
    var e, i3, n2, a2, r2;
    const c3 = (i3 = (e = t.request) == null ? void 0 : e.params) == null ? void 0 : i3[0], o2 = ((a2 = (n2 = t.request) == null ? void 0 : n2.params) == null ? void 0 : a2[1]) || [], m2 = `${c3}${o2.join(",")}`;
    if (!c3) throw new Error("Missing address parameter in `wallet_getCapabilities` request");
    const w4 = this.client.session.get(t.topic), v6 = ((r2 = w4?.sessionProperties) == null ? void 0 : r2.capabilities) || {};
    if (v6 != null && v6[m2]) return v6?.[m2];
    const P5 = await this.client.request(t);
    try {
      await this.client.session.update(t.topic, { sessionProperties: bt3(yt4({}, w4.sessionProperties || {}), { capabilities: bt3(yt4({}, v6 || {}), { [m2]: P5 }) }) });
    } catch (p4) {
      console.warn("Failed to update session with capabilities", p4);
    }
    return P5;
  }
  async getCallStatus(t) {
    var e, i3;
    const n2 = this.client.session.get(t.topic), a2 = (e = n2.sessionProperties) == null ? void 0 : e.bundler_name;
    if (a2) {
      const c3 = this.getBundlerUrl(t.chainId, a2);
      try {
        return await this.getUserOperationReceipt(c3, t);
      } catch (o2) {
        console.warn("Failed to fetch call status from bundler", o2, c3);
      }
    }
    const r2 = (i3 = n2.sessionProperties) == null ? void 0 : i3.bundler_url;
    if (r2) try {
      return await this.getUserOperationReceipt(r2, t);
    } catch (c3) {
      console.warn("Failed to fetch call status from custom bundler", c3, r2);
    }
    if (this.namespace.methods.includes(t.request.method)) return await this.client.request(t);
    throw new Error("Fetching call status not approved by the wallet.");
  }
  async getUserOperationReceipt(t, e) {
    var i3;
    const n2 = new URL(t), a2 = await fetch(n2, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(formatJsonRpcRequest("eth_getUserOperationReceipt", [(i3 = e.request.params) == null ? void 0 : i3[0]])) });
    if (!a2.ok) throw new Error(`Failed to fetch user operation receipt - ${a2.status}`);
    return await a2.json();
  }
  getBundlerUrl(t, e) {
    return `${jt4}?projectId=${this.client.core.projectId}&chainId=${t}&bundler=${e}`;
  }
};
var $e4 = Object.defineProperty;
var Oe4 = (s, t, e) => t in s ? $e4(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var C4 = (s, t, e) => Oe4(s, typeof t != "symbol" ? t + "" : t, e);
var Ae3 = class {
  constructor(t) {
    C4(this, "name", "solana"), C4(this, "client"), C4(this, "httpProviders"), C4(this, "events"), C4(this, "namespace"), C4(this, "chainId"), this.namespace = t.namespace, this.events = h4("events"), this.client = h4("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(u2.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      const n2 = b4(e);
      t[n2] = this.createHttpProvider(n2, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || d3(t, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f(i3, h4("disableProviderPing")));
  }
};
var Ce4 = Object.defineProperty;
var He4 = (s, t, e) => t in s ? Ce4(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var H3 = (s, t, e) => He4(s, typeof t != "symbol" ? t + "" : t, e);
var Ee5 = class {
  constructor(t) {
    H3(this, "name", "cosmos"), H3(this, "client"), H3(this, "httpProviders"), H3(this, "events"), H3(this, "namespace"), H3(this, "chainId"), this.namespace = t.namespace, this.events = h4("events"), this.client = h4("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(u2.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      const n2 = b4(e);
      t[n2] = this.createHttpProvider(n2, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || d3(t, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f(i3, h4("disableProviderPing")));
  }
};
var Ne3 = Object.defineProperty;
var Se4 = (s, t, e) => t in s ? Ne3(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var E4 = (s, t, e) => Se4(s, typeof t != "symbol" ? t + "" : t, e);
var De4 = class {
  constructor(t) {
    E4(this, "name", "algorand"), E4(this, "client"), E4(this, "httpProviders"), E4(this, "events"), E4(this, "namespace"), E4(this, "chainId"), this.namespace = t.namespace, this.events = h4("events"), this.client = h4("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    if (!this.httpProviders[t]) {
      const i3 = e || d3(`${this.name}:${t}`, this.namespace, this.client.core.projectId);
      if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
      this.setHttpProvider(t, i3);
    }
    this.chainId = t, this.events.emit(u2.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      t[e] = this.createHttpProvider(e, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || d3(t, this.namespace, this.client.core.projectId);
    return typeof i3 > "u" ? void 0 : new o(new f(i3, h4("disableProviderPing")));
  }
};
var qe4 = Object.defineProperty;
var je4 = (s, t, e) => t in s ? qe4(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var N3 = (s, t, e) => je4(s, typeof t != "symbol" ? t + "" : t, e);
var Re2 = class {
  constructor(t) {
    N3(this, "name", "cip34"), N3(this, "client"), N3(this, "httpProviders"), N3(this, "events"), N3(this, "namespace"), N3(this, "chainId"), this.namespace = t.namespace, this.events = h4("events"), this.client = h4("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(u2.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      const i3 = this.getCardanoRPCUrl(e), n2 = b4(e);
      t[n2] = this.createHttpProvider(n2, i3);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  getCardanoRPCUrl(t) {
    const e = this.namespace.rpcMap;
    if (e) return e[t];
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || this.getCardanoRPCUrl(t);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f(i3, h4("disableProviderPing")));
  }
};
var _e5 = Object.defineProperty;
var Ue4 = (s, t, e) => t in s ? _e5(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var S3 = (s, t, e) => Ue4(s, typeof t != "symbol" ? t + "" : t, e);
var Fe3 = class {
  constructor(t) {
    S3(this, "name", "elrond"), S3(this, "client"), S3(this, "httpProviders"), S3(this, "events"), S3(this, "namespace"), S3(this, "chainId"), this.namespace = t.namespace, this.events = h4("events"), this.client = h4("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(u2.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      const n2 = b4(e);
      t[n2] = this.createHttpProvider(n2, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || d3(t, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f(i3, h4("disableProviderPing")));
  }
};
var Le4 = Object.defineProperty;
var Me5 = (s, t, e) => t in s ? Le4(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var D = (s, t, e) => Me5(s, typeof t != "symbol" ? t + "" : t, e);
var xe3 = class {
  constructor(t) {
    D(this, "name", "multiversx"), D(this, "client"), D(this, "httpProviders"), D(this, "events"), D(this, "namespace"), D(this, "chainId"), this.namespace = t.namespace, this.events = h4("events"), this.client = h4("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(u2.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      const n2 = b4(e);
      t[n2] = this.createHttpProvider(n2, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || d3(t, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f(i3, h4("disableProviderPing")));
  }
};
var Be4 = Object.defineProperty;
var Ge5 = (s, t, e) => t in s ? Be4(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var q2 = (s, t, e) => Ge5(s, typeof t != "symbol" ? t + "" : t, e);
var Je4 = class {
  constructor(t) {
    q2(this, "name", "near"), q2(this, "client"), q2(this, "httpProviders"), q2(this, "events"), q2(this, "namespace"), q2(this, "chainId"), this.namespace = t.namespace, this.events = h4("events"), this.client = h4("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    if (this.chainId = t, !this.httpProviders[t]) {
      const i3 = e || d3(`${this.name}:${t}`, this.namespace);
      if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
      this.setHttpProvider(t, i3);
    }
    this.events.emit(u2.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      t[e] = this.createHttpProvider(e, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || d3(t, this.namespace);
    return typeof i3 > "u" ? void 0 : new o(new f(i3, h4("disableProviderPing")));
  }
};
var ze4 = Object.defineProperty;
var ke5 = (s, t, e) => t in s ? ze4(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var j2 = (s, t, e) => ke5(s, typeof t != "symbol" ? t + "" : t, e);
var We5 = class {
  constructor(t) {
    j2(this, "name", "tezos"), j2(this, "client"), j2(this, "httpProviders"), j2(this, "events"), j2(this, "namespace"), j2(this, "chainId"), this.namespace = t.namespace, this.events = h4("events"), this.client = h4("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    if (this.chainId = t, !this.httpProviders[t]) {
      const i3 = e || d3(`${this.name}:${t}`, this.namespace);
      if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
      this.setHttpProvider(t, i3);
    }
    this.events.emit(u2.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      t[e] = this.createHttpProvider(e);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || d3(t, this.namespace);
    return typeof i3 > "u" ? void 0 : new o(new f(i3));
  }
};
var Ke5 = Object.defineProperty;
var Ve4 = (s, t, e) => t in s ? Ke5(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var R3 = (s, t, e) => Ve4(s, typeof t != "symbol" ? t + "" : t, e);
var Xe4 = class {
  constructor(t) {
    R3(this, "name", I2), R3(this, "client"), R3(this, "httpProviders"), R3(this, "events"), R3(this, "namespace"), R3(this, "chainId"), this.namespace = t.namespace, this.events = h4("events"), this.client = h4("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace.chains = [...new Set((this.namespace.chains || []).concat(t.chains || []))], this.namespace.accounts = [...new Set((this.namespace.accounts || []).concat(t.accounts || []))], this.namespace.methods = [...new Set((this.namespace.methods || []).concat(t.methods || []))], this.namespace.events = [...new Set((this.namespace.events || []).concat(t.events || []))], this.httpProviders = this.createHttpProviders();
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider(t.chainId).request(t.request);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(u2.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  createHttpProviders() {
    var t, e;
    const i3 = {};
    return (e = (t = this.namespace) == null ? void 0 : t.accounts) == null || e.forEach((n2) => {
      const a2 = Ne2(n2);
      i3[`${a2.namespace}:${a2.reference}`] = this.createHttpProvider(n2);
    }), i3;
  }
  getHttpProvider(t) {
    const e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || d3(t, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f(i3, h4("disableProviderPing")));
  }
};
var Ye4 = Object.defineProperty;
var Qe4 = Object.defineProperties;
var Ze5 = Object.getOwnPropertyDescriptors;
var It4 = Object.getOwnPropertySymbols;
var Te3 = Object.prototype.hasOwnProperty;
var ts2 = Object.prototype.propertyIsEnumerable;
var Y3 = (s, t, e) => t in s ? Ye4(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var x2 = (s, t) => {
  for (var e in t || (t = {})) Te3.call(t, e) && Y3(s, e, t[e]);
  if (It4) for (var e of It4(t)) ts2.call(t, e) && Y3(s, e, t[e]);
  return s;
};
var Q3 = (s, t) => Qe4(s, Ze5(t));
var l3 = (s, t, e) => Y3(s, typeof t != "symbol" ? t + "" : t, e);
var B2 = class _B {
  constructor(t) {
    l3(this, "client"), l3(this, "namespaces"), l3(this, "optionalNamespaces"), l3(this, "sessionProperties"), l3(this, "scopedProperties"), l3(this, "events", new import_events6.default()), l3(this, "rpcProviders", {}), l3(this, "session"), l3(this, "providerOpts"), l3(this, "logger"), l3(this, "uri"), l3(this, "disableProviderPing", false), this.providerOpts = t, this.logger = typeof t?.logger < "u" && typeof t?.logger != "string" ? t.logger : (0, import_pino.default)(k({ level: t?.logger || et2 })), this.disableProviderPing = t?.disableProviderPing || false;
  }
  static async init(t) {
    const e = new _B(t);
    return await e.initialize(), e;
  }
  async request(t, e, i3) {
    const [n2, a2] = this.validateChain(e);
    if (!this.session) throw new Error("Please call connect() before request()");
    return await this.getProvider(n2).request({ request: x2({}, t), chainId: `${n2}:${a2}`, topic: this.session.topic, expiry: i3 });
  }
  sendAsync(t, e, i3, n2) {
    const a2 = (/* @__PURE__ */ new Date()).getTime();
    this.request(t, i3, n2).then((r2) => e(null, formatJsonRpcResult(a2, r2))).catch((r2) => e(r2, void 0));
  }
  async enable() {
    if (!this.client) throw new Error("Sign Client not initialized");
    return this.session || await this.connect({ namespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties, scopedProperties: this.scopedProperties }), await this.requestAccounts();
  }
  async disconnect() {
    var t;
    if (!this.session) throw new Error("Please call connect() before enable()");
    await this.client.disconnect({ topic: (t = this.session) == null ? void 0 : t.topic, reason: Nt2("USER_DISCONNECTED") }), await this.cleanup();
  }
  async connect(t) {
    if (!this.client) throw new Error("Sign Client not initialized");
    if (this.setNamespaces(t), await this.cleanupPendingPairings(), !t.skipPairing) return await this.pair(t.pairingTopic);
  }
  async authenticate(t, e) {
    if (!this.client) throw new Error("Sign Client not initialized");
    this.setNamespaces(t), await this.cleanupPendingPairings();
    const { uri: i3, response: n2 } = await this.client.authenticate(t, e);
    i3 && (this.uri = i3, this.events.emit("display_uri", i3));
    const a2 = await n2();
    if (this.session = a2.session, this.session) {
      const r2 = gt4(this.session.namespaces);
      this.namespaces = M4(this.namespaces, r2), await this.persist("namespaces", this.namespaces), this.onConnect();
    }
    return a2;
  }
  on(t, e) {
    this.events.on(t, e);
  }
  once(t, e) {
    this.events.once(t, e);
  }
  removeListener(t, e) {
    this.events.removeListener(t, e);
  }
  off(t, e) {
    this.events.off(t, e);
  }
  get isWalletConnect() {
    return true;
  }
  async pair(t) {
    const { uri: e, approval: i3 } = await this.client.connect({ pairingTopic: t, requiredNamespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties, scopedProperties: this.scopedProperties });
    e && (this.uri = e, this.events.emit("display_uri", e));
    const n2 = await i3();
    this.session = n2;
    const a2 = gt4(n2.namespaces);
    return this.namespaces = M4(this.namespaces, a2), await this.persist("namespaces", this.namespaces), await this.persist("optionalNamespaces", this.optionalNamespaces), this.onConnect(), this.session;
  }
  setDefaultChain(t, e) {
    try {
      if (!this.session) return;
      const [i3, n2] = this.validateChain(t), a2 = this.getProvider(i3);
      a2.name === I2 ? a2.setDefaultChain(`${i3}:${n2}`, e) : a2.setDefaultChain(n2, e);
    } catch (i3) {
      if (!/Please call connect/.test(i3.message)) throw i3;
    }
  }
  async cleanupPendingPairings(t = {}) {
    this.logger.info("Cleaning up inactive pairings...");
    const e = this.client.pairing.getAll();
    if (se(e)) {
      for (const i3 of e) t.deletePairings ? this.client.core.expirer.set(i3.topic, 0) : await this.client.core.relayer.subscriber.unsubscribe(i3.topic);
      this.logger.info(`Inactive pairings cleared: ${e.length}`);
    }
  }
  abortPairingAttempt() {
    this.logger.warn("abortPairingAttempt is deprecated. This is now a no-op.");
  }
  async checkStorage() {
    this.namespaces = await this.getFromStore("namespaces") || {}, this.optionalNamespaces = await this.getFromStore("optionalNamespaces") || {}, this.session && this.createProviders();
  }
  async initialize() {
    this.logger.trace("Initialized"), await this.createClient(), await this.checkStorage(), this.registerEventListeners();
  }
  async createClient() {
    var t, e;
    if (this.client = this.providerOpts.client || await Ee4.init({ core: this.providerOpts.core, logger: this.providerOpts.logger || et2, relayUrl: this.providerOpts.relayUrl || St5, projectId: this.providerOpts.projectId, metadata: this.providerOpts.metadata, storageOptions: this.providerOpts.storageOptions, storage: this.providerOpts.storage, name: this.providerOpts.name, customStoragePrefix: this.providerOpts.customStoragePrefix, telemetryEnabled: this.providerOpts.telemetryEnabled }), this.providerOpts.session) try {
      this.session = this.client.session.get(this.providerOpts.session.topic);
    } catch (i3) {
      throw this.logger.error("Failed to get session", i3), new Error(`The provided session: ${(e = (t = this.providerOpts) == null ? void 0 : t.session) == null ? void 0 : e.topic} doesn't exist in the Sign client`);
    }
    else {
      const i3 = this.client.session.getAll();
      this.session = i3[0];
    }
    this.logger.trace("SignClient Initialized");
  }
  createProviders() {
    if (!this.client) throw new Error("Sign Client not initialized");
    if (!this.session) throw new Error("Session not initialized. Please call connect() before enable()");
    const t = [...new Set(Object.keys(this.session.namespaces).map((e) => yo2(e)))];
    V4("client", this.client), V4("events", this.events), V4("disableProviderPing", this.disableProviderPing), t.forEach((e) => {
      if (!this.session) return;
      const i3 = le4(e, this.session), n2 = ft4(i3), a2 = M4(this.namespaces, this.optionalNamespaces), r2 = Q3(x2({}, a2[e]), { accounts: i3, chains: n2 });
      switch (e) {
        case "eip155":
          this.rpcProviders[e] = new Ie4({ namespace: r2 });
          break;
        case "algorand":
          this.rpcProviders[e] = new De4({ namespace: r2 });
          break;
        case "solana":
          this.rpcProviders[e] = new Ae3({ namespace: r2 });
          break;
        case "cosmos":
          this.rpcProviders[e] = new Ee5({ namespace: r2 });
          break;
        case "polkadot":
          this.rpcProviders[e] = new ve3({ namespace: r2 });
          break;
        case "cip34":
          this.rpcProviders[e] = new Re2({ namespace: r2 });
          break;
        case "elrond":
          this.rpcProviders[e] = new Fe3({ namespace: r2 });
          break;
        case "multiversx":
          this.rpcProviders[e] = new xe3({ namespace: r2 });
          break;
        case "near":
          this.rpcProviders[e] = new Je4({ namespace: r2 });
          break;
        case "tezos":
          this.rpcProviders[e] = new We5({ namespace: r2 });
          break;
        default:
          this.rpcProviders[I2] ? this.rpcProviders[I2].updateNamespace(r2) : this.rpcProviders[I2] = new Xe4({ namespace: r2 });
      }
    });
  }
  registerEventListeners() {
    if (typeof this.client > "u") throw new Error("Sign Client is not initialized");
    this.client.on("session_ping", (t) => {
      var e;
      const { topic: i3 } = t;
      i3 === ((e = this.session) == null ? void 0 : e.topic) && this.events.emit("session_ping", t);
    }), this.client.on("session_event", (t) => {
      var e;
      const { params: i3, topic: n2 } = t;
      if (n2 !== ((e = this.session) == null ? void 0 : e.topic)) return;
      const { event: a2 } = i3;
      if (a2.name === "accountsChanged") {
        const r2 = a2.data;
        r2 && se(r2) && this.events.emit("accountsChanged", r2.map(vt2));
      } else if (a2.name === "chainChanged") {
        const r2 = i3.chainId, c3 = i3.event.data, o2 = yo2(r2), m2 = K3(r2) !== K3(c3) ? `${o2}:${K3(c3)}` : r2;
        this.onChainChanged(m2);
      } else this.events.emit(a2.name, a2.data);
      this.events.emit("session_event", t);
    }), this.client.on("session_update", ({ topic: t, params: e }) => {
      var i3, n2;
      if (t !== ((i3 = this.session) == null ? void 0 : i3.topic)) return;
      const { namespaces: a2 } = e, r2 = (n2 = this.client) == null ? void 0 : n2.session.get(t);
      this.session = Q3(x2({}, r2), { namespaces: a2 }), this.onSessionUpdate(), this.events.emit("session_update", { topic: t, params: e });
    }), this.client.on("session_delete", async (t) => {
      var e;
      t.topic === ((e = this.session) == null ? void 0 : e.topic) && (await this.cleanup(), this.events.emit("session_delete", t), this.events.emit("disconnect", Q3(x2({}, Nt2("USER_DISCONNECTED")), { data: t.topic })));
    }), this.on(u2.DEFAULT_CHAIN_CHANGED, (t) => {
      this.onChainChanged(t, true);
    });
  }
  getProvider(t) {
    return this.rpcProviders[t] || this.rpcProviders[I2];
  }
  onSessionUpdate() {
    Object.keys(this.rpcProviders).forEach((t) => {
      var e;
      this.getProvider(t).updateNamespace((e = this.session) == null ? void 0 : e.namespaces[t]);
    });
  }
  setNamespaces(t) {
    const { namespaces: e = {}, optionalNamespaces: i3 = {}, sessionProperties: n2, scopedProperties: a2 } = t;
    this.optionalNamespaces = M4(e, i3), this.sessionProperties = n2, this.scopedProperties = a2;
  }
  validateChain(t) {
    const [e, i3] = t?.split(":") || ["", ""];
    if (!this.namespaces || !Object.keys(this.namespaces).length) return [e, i3];
    if (e && !Object.keys(this.namespaces || {}).map((r2) => yo2(r2)).includes(e)) throw new Error(`Namespace '${e}' is not configured. Please call connect() first with namespace config.`);
    if (e && i3) return [e, i3];
    const n2 = yo2(Object.keys(this.namespaces)[0]), a2 = this.rpcProviders[n2].getDefaultChain();
    return [n2, a2];
  }
  async requestAccounts() {
    const [t] = this.validateChain();
    return await this.getProvider(t).requestAccounts();
  }
  async onChainChanged(t, e = false) {
    if (!this.namespaces) return;
    const [i3, n2] = this.validateChain(t);
    if (!n2) return;
    this.updateNamespaceChain(i3, n2), this.events.emit("chainChanged", n2);
    const a2 = this.getProvider(i3).getDefaultChain();
    e || this.getProvider(i3).setDefaultChain(n2), this.emitAccountsChangedOnChainChange({ namespace: i3, previousChainId: a2, newChainId: t }), await this.persist("namespaces", this.namespaces);
  }
  emitAccountsChangedOnChainChange({ namespace: t, previousChainId: e, newChainId: i3 }) {
    var n2, a2;
    try {
      if (e === i3) return;
      const r2 = (a2 = (n2 = this.session) == null ? void 0 : n2.namespaces[t]) == null ? void 0 : a2.accounts;
      if (!r2) return;
      const c3 = r2.filter((o2) => o2.includes(`${i3}:`)).map(vt2);
      if (!se(c3)) return;
      this.events.emit("accountsChanged", c3);
    } catch (r2) {
      this.logger.warn("Failed to emit accountsChanged on chain change", r2);
    }
  }
  updateNamespaceChain(t, e) {
    if (!this.namespaces) return;
    const i3 = this.namespaces[t] ? t : `${t}:${e}`, n2 = { chains: [], methods: [], events: [], defaultChain: e };
    this.namespaces[i3] ? this.namespaces[i3] && (this.namespaces[i3].defaultChain = e) : this.namespaces[i3] = n2;
  }
  onConnect() {
    this.createProviders(), this.events.emit("connect", { session: this.session });
  }
  async cleanup() {
    this.namespaces = void 0, this.optionalNamespaces = void 0, this.sessionProperties = void 0, await this.deleteFromStore("namespaces"), await this.deleteFromStore("optionalNamespaces"), await this.deleteFromStore("sessionProperties"), this.session = void 0, await this.cleanupPendingPairings({ deletePairings: true }), await this.cleanupStorage();
  }
  async persist(t, e) {
    var i3;
    const n2 = ((i3 = this.session) == null ? void 0 : i3.topic) || "";
    await this.client.core.storage.setItem(`${U3}/${t}${n2}`, e);
  }
  async getFromStore(t) {
    var e;
    const i3 = ((e = this.session) == null ? void 0 : e.topic) || "";
    return await this.client.core.storage.getItem(`${U3}/${t}${i3}`);
  }
  async deleteFromStore(t) {
    var e;
    const i3 = ((e = this.session) == null ? void 0 : e.topic) || "";
    await this.client.core.storage.removeItem(`${U3}/${t}${i3}`);
  }
  async cleanupStorage() {
    var t;
    try {
      if (((t = this.client) == null ? void 0 : t.session.length) > 0) return;
      const e = await this.client.core.storage.getKeys();
      for (const i3 of e) i3.startsWith(U3) && await this.client.core.storage.removeItem(i3);
    } catch (e) {
      this.logger.warn("Failed to cleanup storage", e);
    }
  }
};
var es2 = B2;

// node_modules/@wagmi/connectors/node_modules/@walletconnect/ethereum-provider/dist/index.es.js
var $4 = "wc";
var k6 = "ethereum_provider";
var q3 = `${$4}@2:${k6}:`;
var U4 = "https://rpc.walletconnect.org/v1/";
var f5 = ["eth_sendTransaction", "personal_sign"];
var A4 = ["eth_accounts", "eth_requestAccounts", "eth_sendRawTransaction", "eth_sign", "eth_signTransaction", "eth_signTypedData", "eth_signTypedData_v3", "eth_signTypedData_v4", "eth_sendTransaction", "personal_sign", "wallet_switchEthereumChain", "wallet_addEthereumChain", "wallet_getPermissions", "wallet_requestPermissions", "wallet_registerOnboarding", "wallet_watchAsset", "wallet_scanQRCode", "wallet_sendCalls", "wallet_getCapabilities", "wallet_getCallsStatus", "wallet_showCallsStatus"];
var C5 = ["chainChanged", "accountsChanged"];
var P4 = ["chainChanged", "accountsChanged", "message", "disconnect", "connect"];
var D2 = async () => {
  const { createAppKit: s } = await import("./core-YOPURTGP.js");
  return s;
};
var z2 = Object.defineProperty;
var L3 = Object.defineProperties;
var K4 = Object.getOwnPropertyDescriptors;
var M5 = Object.getOwnPropertySymbols;
var Q4 = Object.prototype.hasOwnProperty;
var V5 = Object.prototype.propertyIsEnumerable;
var _ = (s, t, e) => t in s ? z2(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var v5 = (s, t) => {
  for (var e in t || (t = {})) Q4.call(t, e) && _(s, e, t[e]);
  if (M5) for (var e of M5(t)) V5.call(t, e) && _(s, e, t[e]);
  return s;
};
var w3 = (s, t) => L3(s, K4(t));
var p3 = (s, t, e) => _(s, typeof t != "symbol" ? t + "" : t, e);
function I3(s) {
  return Number(s[0].split(":")[1]);
}
function E5(s) {
  return `0x${s.toString(16)}`;
}
function G4(s) {
  const { chains: t, optionalChains: e, methods: n2, optionalMethods: i3, events: a2, optionalEvents: o2, rpcMap: u3 } = s;
  if (!se(t)) throw new Error("Invalid chains");
  const c3 = { chains: t, methods: n2 || f5, events: a2 || C5, rpcMap: v5({}, t.length ? { [I3(t)]: u3[I3(t)] } : {}) }, l4 = a2?.filter((d4) => !C5.includes(d4)), r2 = n2?.filter((d4) => !f5.includes(d4));
  if (!e && !o2 && !i3 && !(l4 != null && l4.length) && !(r2 != null && r2.length)) return { required: t.length ? c3 : void 0 };
  const m2 = l4?.length && r2?.length || !e, h5 = { chains: [...new Set(m2 ? c3.chains.concat(e || []) : e)], methods: [...new Set(c3.methods.concat(i3 != null && i3.length ? i3 : A4))], events: [...new Set(c3.events.concat(o2 != null && o2.length ? o2 : P4))], rpcMap: u3 };
  return { required: t.length ? c3 : void 0, optional: e.length ? h5 : void 0 };
}
var b5 = class _b {
  constructor() {
    p3(this, "events", new import_events7.EventEmitter()), p3(this, "namespace", "eip155"), p3(this, "accounts", []), p3(this, "signer"), p3(this, "chainId", 1), p3(this, "modal"), p3(this, "rpc"), p3(this, "STORAGE_KEY", q3), p3(this, "on", (t, e) => (this.events.on(t, e), this)), p3(this, "once", (t, e) => (this.events.once(t, e), this)), p3(this, "removeListener", (t, e) => (this.events.removeListener(t, e), this)), p3(this, "off", (t, e) => (this.events.off(t, e), this)), p3(this, "parseAccount", (t) => this.isCompatibleChainId(t) ? this.parseAccountId(t).address : t), this.signer = {}, this.rpc = {};
  }
  static async init(t) {
    const e = new _b();
    return await e.initialize(t), e;
  }
  async request(t, e) {
    return await this.signer.request(t, this.formatChainId(this.chainId), e);
  }
  sendAsync(t, e, n2) {
    this.signer.sendAsync(t, e, this.formatChainId(this.chainId), n2);
  }
  get connected() {
    return this.signer.client ? this.signer.client.core.relayer.connected : false;
  }
  get connecting() {
    return this.signer.client ? this.signer.client.core.relayer.connecting : false;
  }
  async enable() {
    return this.session || await this.connect(), await this.request({ method: "eth_requestAccounts" });
  }
  async connect(t) {
    var e;
    if (!this.signer.client) throw new Error("Provider not initialized. Call init() first");
    this.loadConnectOpts(t);
    const { required: n2, optional: i3 } = G4(this.rpc);
    try {
      const a2 = await new Promise(async (u3, c3) => {
        var l4, r2;
        this.rpc.showQrModal && ((l4 = this.modal) == null || l4.open(), (r2 = this.modal) == null || r2.subscribeState((h5) => {
          !h5.open && !this.signer.session && (this.signer.abortPairingAttempt(), c3(new Error("Connection request reset. Please try again.")));
        }));
        const m2 = t != null && t.scopedProperties ? { [this.namespace]: t.scopedProperties } : void 0;
        await this.signer.connect(w3(v5({ namespaces: v5({}, n2 && { [this.namespace]: n2 }) }, i3 && { optionalNamespaces: { [this.namespace]: i3 } }), { pairingTopic: t?.pairingTopic, scopedProperties: m2 })).then((h5) => {
          u3(h5);
        }).catch((h5) => {
          var d4;
          (d4 = this.modal) == null || d4.showErrorMessage("Unable to connect"), c3(new Error(h5.message));
        });
      });
      if (!a2) return;
      const o2 = Ko2(a2.namespaces, [this.namespace]);
      this.setChainIds(this.rpc.chains.length ? this.rpc.chains : o2), this.setAccounts(o2), this.events.emit("connect", { chainId: E5(this.chainId) });
    } catch (a2) {
      throw this.signer.logger.error(a2), a2;
    } finally {
      (e = this.modal) == null || e.close();
    }
  }
  async authenticate(t, e) {
    var n2;
    if (!this.signer.client) throw new Error("Provider not initialized. Call init() first");
    this.loadConnectOpts({ chains: t?.chains });
    try {
      const i3 = await new Promise(async (o2, u3) => {
        var c3, l4;
        this.rpc.showQrModal && ((c3 = this.modal) == null || c3.open(), (l4 = this.modal) == null || l4.subscribeState((r2) => {
          !r2.open && !this.signer.session && (this.signer.abortPairingAttempt(), u3(new Error("Connection request reset. Please try again.")));
        })), await this.signer.authenticate(w3(v5({}, t), { chains: this.rpc.chains }), e).then((r2) => {
          o2(r2);
        }).catch((r2) => {
          var m2;
          (m2 = this.modal) == null || m2.showErrorMessage("Unable to connect"), u3(new Error(r2.message));
        });
      }), a2 = i3.session;
      if (a2) {
        const o2 = Ko2(a2.namespaces, [this.namespace]);
        this.setChainIds(this.rpc.chains.length ? this.rpc.chains : o2), this.setAccounts(o2), this.events.emit("connect", { chainId: E5(this.chainId) });
      }
      return i3;
    } catch (i3) {
      throw this.signer.logger.error(i3), i3;
    } finally {
      (n2 = this.modal) == null || n2.close();
    }
  }
  async disconnect() {
    this.session && await this.signer.disconnect(), this.reset();
  }
  get isWalletConnect() {
    return true;
  }
  get session() {
    return this.signer.session;
  }
  registerEventListeners() {
    this.signer.on("session_event", (t) => {
      const { params: e } = t, { event: n2 } = e;
      n2.name === "accountsChanged" ? (this.accounts = this.parseAccounts(n2.data), this.events.emit("accountsChanged", this.accounts)) : n2.name === "chainChanged" ? this.setChainId(this.formatChainId(n2.data)) : this.events.emit(n2.name, n2.data), this.events.emit("session_event", t);
    }), this.signer.on("accountsChanged", (t) => {
      this.accounts = this.parseAccounts(t), this.events.emit("accountsChanged", this.accounts);
    }), this.signer.on("chainChanged", (t) => {
      const e = parseInt(t);
      this.chainId = e, this.events.emit("chainChanged", E5(this.chainId)), this.persist();
    }), this.signer.on("session_update", (t) => {
      this.events.emit("session_update", t);
    }), this.signer.on("session_delete", (t) => {
      this.reset(), this.events.emit("session_delete", t), this.events.emit("disconnect", w3(v5({}, Nt2("USER_DISCONNECTED")), { data: t.topic, name: "USER_DISCONNECTED" }));
    }), this.signer.on("display_uri", (t) => {
      this.events.emit("display_uri", t);
    });
  }
  switchEthereumChain(t) {
    this.request({ method: "wallet_switchEthereumChain", params: [{ chainId: t.toString(16) }] });
  }
  isCompatibleChainId(t) {
    return typeof t == "string" ? t.startsWith(`${this.namespace}:`) : false;
  }
  formatChainId(t) {
    return `${this.namespace}:${t}`;
  }
  parseChainId(t) {
    return Number(t.split(":")[1]);
  }
  setChainIds(t) {
    const e = t.filter((n2) => this.isCompatibleChainId(n2)).map((n2) => this.parseChainId(n2));
    e.length && (this.chainId = e[0], this.events.emit("chainChanged", E5(this.chainId)), this.persist());
  }
  setChainId(t) {
    if (this.isCompatibleChainId(t)) {
      const e = this.parseChainId(t);
      this.chainId = e, this.switchEthereumChain(e);
    }
  }
  parseAccountId(t) {
    const [e, n2, i3] = t.split(":");
    return { chainId: `${e}:${n2}`, address: i3 };
  }
  setAccounts(t) {
    this.accounts = t.filter((e) => this.parseChainId(this.parseAccountId(e).chainId) === this.chainId).map((e) => this.parseAccountId(e).address), this.events.emit("accountsChanged", this.accounts);
  }
  getRpcConfig(t) {
    var e, n2;
    const i3 = (e = t?.chains) != null ? e : [], a2 = (n2 = t?.optionalChains) != null ? n2 : [], o2 = i3.concat(a2);
    if (!o2.length) throw new Error("No chains specified in either `chains` or `optionalChains`");
    const u3 = i3.length ? t?.methods || f5 : [], c3 = i3.length ? t?.events || C5 : [], l4 = t?.optionalMethods || [], r2 = t?.optionalEvents || [], m2 = t?.rpcMap || this.buildRpcMap(o2, t.projectId), h5 = t?.qrModalOptions || void 0;
    return { chains: i3?.map((d4) => this.formatChainId(d4)), optionalChains: a2.map((d4) => this.formatChainId(d4)), methods: u3, events: c3, optionalMethods: l4, optionalEvents: r2, rpcMap: m2, showQrModal: !!(t != null && t.showQrModal), qrModalOptions: h5, projectId: t.projectId, metadata: t.metadata };
  }
  buildRpcMap(t, e) {
    const n2 = {};
    return t.forEach((i3) => {
      n2[i3] = this.getRpcUrl(i3, e);
    }), n2;
  }
  async initialize(t) {
    if (this.rpc = this.getRpcConfig(t), this.chainId = this.rpc.chains.length ? I3(this.rpc.chains) : I3(this.rpc.optionalChains), this.signer = await es2.init({ projectId: this.rpc.projectId, metadata: this.rpc.metadata, disableProviderPing: t.disableProviderPing, relayUrl: t.relayUrl, storage: t.storage, storageOptions: t.storageOptions, customStoragePrefix: t.customStoragePrefix, telemetryEnabled: t.telemetryEnabled, logger: t.logger }), this.registerEventListeners(), await this.loadPersistedSession(), this.rpc.showQrModal) {
      let e;
      try {
        const n2 = await D2(), { convertWCMToAppKitOptions: i3 } = await Promise.resolve().then(function() {
          return nt4;
        }), a2 = i3(w3(v5({}, this.rpc.qrModalOptions), { chains: [.../* @__PURE__ */ new Set([...this.rpc.chains, ...this.rpc.optionalChains])], metadata: this.rpc.metadata, projectId: this.rpc.projectId }));
        if (!a2.networks.length) throw new Error("No networks found for WalletConnect·");
        e = n2(w3(v5({}, a2), { universalProvider: this.signer, manualWCControl: true }));
      } catch (n2) {
        throw console.warn(n2), new Error("To use QR modal, please install @reown/appkit package");
      }
      if (e) try {
        this.modal = e;
      } catch (n2) {
        throw this.signer.logger.error(n2), new Error("Could not generate WalletConnectModal Instance");
      }
    }
  }
  loadConnectOpts(t) {
    if (!t) return;
    const { chains: e, optionalChains: n2, rpcMap: i3 } = t;
    e && se(e) && (this.rpc.chains = e.map((a2) => this.formatChainId(a2)), e.forEach((a2) => {
      this.rpc.rpcMap[a2] = i3?.[a2] || this.getRpcUrl(a2);
    })), n2 && se(n2) && (this.rpc.optionalChains = [], this.rpc.optionalChains = n2?.map((a2) => this.formatChainId(a2)), n2.forEach((a2) => {
      this.rpc.rpcMap[a2] = i3?.[a2] || this.getRpcUrl(a2);
    }));
  }
  getRpcUrl(t, e) {
    var n2;
    return ((n2 = this.rpc.rpcMap) == null ? void 0 : n2[t]) || `${U4}?chainId=eip155:${t}&projectId=${e || this.rpc.projectId}`;
  }
  async loadPersistedSession() {
    if (this.session) try {
      const t = await this.signer.client.core.storage.getItem(`${this.STORAGE_KEY}/chainId`), e = this.session.namespaces[`${this.namespace}:${t}`] ? this.session.namespaces[`${this.namespace}:${t}`] : this.session.namespaces[this.namespace];
      this.setChainIds(t ? [this.formatChainId(t)] : e?.accounts), this.setAccounts(e?.accounts);
    } catch (t) {
      this.signer.logger.error("Failed to load persisted session, clearing state..."), this.signer.logger.error(t), await this.disconnect().catch((e) => this.signer.logger.warn(e));
    }
  }
  reset() {
    this.chainId = 1, this.accounts = [];
  }
  persist() {
    this.session && this.signer.client.core.storage.setItem(`${this.STORAGE_KEY}/chainId`, this.chainId);
  }
  parseAccounts(t) {
    return typeof t == "string" || t instanceof String ? [this.parseAccount(t)] : t.map((e) => this.parseAccount(e));
  }
};
var Y4 = b5;
var H4 = Object.defineProperty;
var B3 = Object.defineProperties;
var F4 = Object.getOwnPropertyDescriptors;
var S4 = Object.getOwnPropertySymbols;
var X3 = Object.prototype.hasOwnProperty;
var J4 = Object.prototype.propertyIsEnumerable;
var T2 = (s, t, e) => t in s ? H4(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var R4 = (s, t) => {
  for (var e in t || (t = {})) X3.call(t, e) && T2(s, e, t[e]);
  if (S4) for (var e of S4(t)) J4.call(t, e) && T2(s, e, t[e]);
  return s;
};
var Z2 = (s, t) => B3(s, F4(t));
function tt3(s) {
  if (s) return { "--w3m-font-family": s["--wcm-font-family"], "--w3m-accent": s["--wcm-accent-color"], "--w3m-color-mix": s["--wcm-background-color"], "--w3m-z-index": s["--wcm-z-index"] ? Number(s["--wcm-z-index"]) : void 0, "--w3m-qr-color": s["--wcm-accent-color"], "--w3m-font-size-master": s["--wcm-text-medium-regular-size"], "--w3m-border-radius-master": s["--wcm-container-border-radius"], "--w3m-color-mix-strength": 0 };
}
var et3 = (s) => {
  const [t, e] = s.split(":");
  return W4({ id: e, caipNetworkId: s, chainNamespace: t, name: "", nativeCurrency: { name: "", symbol: "", decimals: 8 }, rpcUrls: { default: { http: ["https://rpc.walletconnect.org/v1"] } } });
};
function st2(s) {
  var t, e, n2, i3, a2, o2, u3;
  const c3 = (t = s.chains) == null ? void 0 : t.map(et3).filter(Boolean);
  if (c3.length === 0) throw new Error("At least one chain must be specified");
  const l4 = c3.find((m2) => {
    var h5;
    return m2.id === ((h5 = s.defaultChain) == null ? void 0 : h5.id);
  }), r2 = { projectId: s.projectId, networks: c3, themeMode: s.themeMode, themeVariables: tt3(s.themeVariables), chainImages: s.chainImages, connectorImages: s.walletImages, defaultNetwork: l4, metadata: Z2(R4({}, s.metadata), { name: ((e = s.metadata) == null ? void 0 : e.name) || "WalletConnect", description: ((n2 = s.metadata) == null ? void 0 : n2.description) || "Connect to WalletConnect-compatible wallets", url: ((i3 = s.metadata) == null ? void 0 : i3.url) || "https://walletconnect.org", icons: ((a2 = s.metadata) == null ? void 0 : a2.icons) || ["https://walletconnect.org/walletconnect-logo.png"] }), showWallets: true, featuredWalletIds: s.explorerRecommendedWalletIds === "NONE" ? [] : Array.isArray(s.explorerRecommendedWalletIds) ? s.explorerRecommendedWalletIds : [], excludeWalletIds: s.explorerExcludedWalletIds === "ALL" ? [] : Array.isArray(s.explorerExcludedWalletIds) ? s.explorerExcludedWalletIds : [], enableEIP6963: false, enableInjected: false, enableCoinbase: true, enableWalletConnect: true, features: { email: false, socials: false } };
  if ((o2 = s.mobileWallets) != null && o2.length || (u3 = s.desktopWallets) != null && u3.length) {
    const m2 = [...(s.mobileWallets || []).map((g2) => ({ id: g2.id, name: g2.name, links: g2.links })), ...(s.desktopWallets || []).map((g2) => ({ id: g2.id, name: g2.name, links: { native: g2.links.native, universal: g2.links.universal } }))], h5 = [...r2.featuredWalletIds || [], ...r2.excludeWalletIds || []], d4 = m2.filter((g2) => !h5.includes(g2.id));
    d4.length && (r2.customWallets = d4);
  }
  return r2;
}
function W4(s) {
  return R4({ formatters: void 0, fees: void 0, serializers: void 0 }, s);
}
var nt4 = Object.freeze({ __proto__: null, convertWCMToAppKitOptions: st2, defineChain: W4 });
export {
  Y4 as EthereumProvider,
  P4 as OPTIONAL_EVENTS,
  A4 as OPTIONAL_METHODS,
  C5 as REQUIRED_EVENTS,
  f5 as REQUIRED_METHODS,
  b5 as default
};
/*! Bundled license information:

@walletconnect/relay-auth/dist/index.es.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@walletconnect/utils/dist/index.es.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=index.es-WJVBCXJG.js.map
